= Topic Routing
:awestruct-layout: doc
:linkattrs:
:icons: font
:source-highlighter: highlight.js

Debezium enables you to re-reoute the emitted change before the message reaches the converter using a 
single message transformation, or https://kafka.apache.org/documentation/#connect_transforms[SMT]. 
The SMT provided by Debezium enables you to rewrite the topic and the key according to a regular expression 
and a replacement pattern, configurable per instance of Debezium.

The implementation does not care about the sanity of the change, this is in the responsibility of the user.

== Use-Cases

=== Virtual Tables

A logical table consists of one or more physical tables with the same table structure. A common use case is sharding. The
two physical tables `db_shard1.my_table` and `db_shard2.my_table` together form one logical table.

== Topic Names

Below is an example for a configuration which replaces a part of the table in the topic with another string, allowing
two tables to emit changes to the same topic, keeping their different key namings.

[source]
---
transforms=Reroute
transforms.Reroute.type=io.debezium.transforms.ByLogicalTableRouter
transforms.Reroute.topic.regex=(.*)__bar$
transforms.Reroute.topic.replacement=$1
---

The configuration above will match a topic named `db1.foo__bar` and replace it with `db1.foo`, but keep the key's name
`db1.foo__bar.Key`. If you intend to change also the key's name, please follow the instructions in (key-fields)[Key Fields]

== Key Fields

Using only the topic replacement does not touch the key's field. In order to make it completly transparent to the
consumer, whether the event came from one or another table, a key field change is also required. 

[source]
---
transforms=Reroute
transforms.Reroute.type=io.debezium.transforms.ByLogicalTableRouter
transforms.Reroute.topic.regex=(.*)__bar$
transforms.Reroute.topic.replacement=$1
transforms.Reroute.key.field.regex=(.*)__bar$
transforms.Reroute.key.field.replacement=$1
transforms.Reroute.key.field.name=__dbz__
---

The configuration above applies the same replacement to the key field that has already been applied to the topic name.
In addtion, the `key.field.name` configuration can be used to declare a field which will contain the original key name
for later use. The configuration shows the default value of `$$__dbz__$$`, which can be changed to a user provided value.
