= Mongo CDC Event Flattening
:awestruct-layout: doc
:linkattrs:
:icons: font
:source-highlighter: highlight.js

[NOTE]
====
This SMT is available since Debezium version 0.7.2.
====

[NOTE]
====
This SMT is supported only for MongoDB connector.
====

Debezium generates a data change in a form of a complex message structure.
The message consists of two parts:

* operation and metadata
* the row data after change

E.g. the general message structure for a `read` looks like this:

[source,json,indent=0]
----
{
  "op": "r",
  "after": "{\"field1\":newvalue1,\"field2\":\"newvalue1\"}",
  "source": { ... }
}
----

More details about the message structure are provided in link:../../connectors[the documentation for each connector].

This SMT is used to parse the String into a JSON Document.
The downside of using the format is that other connectors or other parts of the Kafka ecosystem usually expect the data in a simple message format that can generally be described like so:

[source,json,indent=0]
----
{
	"field1" : "newvalue1",
	"field2" : "newvalue2"
}
----

Debezium provides https://kafka.apache.org/documentation/#connect_transforms[a single message transformation] that crosses the bridge between the complex and simple formats, the https://github.com/debezium/debezium/blob/master/debezium-connector-mongodb/src/main/java/io/debezium/connector/mongodb/transforms/UnwrapFromMongoDbEnvelope.java[UnwrapFromMongoDbEnvelope] SMT.

The SMT extracts the `after` or `patch` field from change events and parses the String into a JSON Document. 

The SMT should be applied on a sink connector.

== Configuration
The configuration is a part of sink task connector and is expressed in a set of properties:

[source]
----
transforms=unwrap,...
transforms.unwrap.type=io.debezium.connector.mongodb.transforms.UnwrapFromMongoDbEnvelope
----
