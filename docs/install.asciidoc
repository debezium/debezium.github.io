= Installing Debezium
:awestruct-layout: doc
:linkattrs:
:icons: font

There are several ways to install and use Debezium connectors, so we've documented a few of the most common ways to do this.

== Installing a Debezium connector

If you've already installed https://zookeeper.apache.org[Zookeeper], http://kafka.apache.org/[Kafka], and http://kafka.apache.org/documentation.html#connect[Kafka Connect], then using one of Debezium's connectors is easy. Simply download one or more connector plugin archives (see below), extract its files into your Kafka Connect environment, and add the directory with the JARs to http://docs.confluent.io/3.0.0/connect/userguide.html#installing-connector-plugins[Kafka Connect's classpath]. Restart your Kafka Connect process to pick up the new JARs.

The connector plugins are available from Maven:

* https://repo1.maven.org/maven2/io/debezium/debezium-connector-mysql/{debezium-version}/debezium-connector-mysql-{debezium-version}-plugin.tar.gz[MySQL Connector plugin archive]
* https://repo1.maven.org/maven2/io/debezium/debezium-connector-postgres/{debezium-version}/debezium-connector-postgres-{debezium-version}-plugin.tar.gz[Postgres Connector plugin archive]
* https://repo1.maven.org/maven2/io/debezium/debezium-connector-mongodb/{debezium-version}/debezium-connector-mongodb-{debezium-version}-plugin.tar.gz[MongoDB Connector plugin archive]

If immutable containers are your thing, then check out https://hub.docker.com/r/debezium/[Debezium's Docker images] for Zookeeper, Kafka, and Kafka Connect with the MySQL and MongoDB connectors already pre-installed and ready to go. Our link:http://debezium.io/docs/tutorial[tutorial] even walks you through using these images, and this is a great way to learn what Debezium is all about. You can even link:/blog/2016/05/31/Debezium-on-Kubernetes[run Debezium on Kubernetes and OpenShift].

=== Consuming snapshot releases

Debezium executes nightly builds and deployments into the Central snapshot repository. If you want to try latest and fresh or verify a bugfix you are interested in then use plugins from https://oss.sonatype.org/content/repositories/snapshots/io/debezium/[Maven Central]. The installation procedure is the same as for regular releases.

== Using a Debezium connector

To use a connector to produce change events for a particular source server/cluster, simply create a configuration file for the link:/docs/connectors/mysql/#configuration[MySQL Connector] or link:/docs/connectors/mongodb/#configuration[MongoDB Connector], and use the link:http://docs.confluent.io/{confluent-platform-version}/connect/userguide.html#rest-interface[Kafka Connect REST API] to add that connector configuration to your Kafka Connect cluster. When the connector starts, it will connect to the source and produce events for each inserted, updated, and deleted row or document. See the Debezium documentation for the link:/docs/connectors/mysql/[MySQL Connector] and link:/docs/connectors/mongodb/[MongoDB Connector].

== Configuring Debezium Topics
Debezium uses (either via Kafka Connect or directly) multiple topics for storing data.
The topics have to be either created by an administrator or by Kafka itself by enabling auto-creation for topics.
There are certain limitations and recommendations which apply to topics:

* Database history topic (for MySQL connector)
** Infinite (or very long) retention (no compaction!)
** Replication factor at least 3 for production
** Single partition
* Other topics
** Compaction enabled
** Replicated in production
** Single partition
*** You can relax the single partition rule but your application must handle out-of-order events for different rows in database (events for a single row are still totally ordered). If multiple partitions are used, Kafka will determine the partition by hashing the key by default. Other partition strategies require using SMTs to set the partition number for each record.

== Using the Debezium libraries

Although Debezium is really intended to be used as turnkey services, all of Debezium's JARs and other artifacts are available in http://search.maven.org/#search%7Cga%7C1%7Cg%3A%22io.debezium%22[Maven Central]. For example, you might want to use our link:/blog/2016/04/15/parsing-ddl/[MySQL DDL parser] from our MySQL connector library to parse those DDL statments in your consumers of the MySQL schema change topics.

We do provide a small library so applications can link:/docs/embedded[embed any Kafka Connect connector] and consume data change events read directly from the source system. This provides a much lighter weight system (since Zookeeper, Kafka, and Kafka Connect services are not needed), but as a consequence is not as fault tolerant or reliable since the application must manage and maintain all state normally kept inside Kafka's distributed and replicated logs. It's perfect for use in tests, and with careful consideration it may be useful in some applications.
