= Debezium Roadmap
:awestruct-layout: doc
:linkattrs:
:icons: font
:source-highlighter: highlight.js

This page describes the roadmap for upcoming work on Debezium.

Debezium is community-driven and as such the roadmap constantly evolves to reflect the users needs and contributions.
You can find a fine-grained list of planned issues and feature requests in our https://issues.redhat.com/browse/DBZ[issue tracker],
but this page is a good starting point to see where we are going.

This roadmap is subject to changes.
Please get https://groups.google.com/forum/#!forum/debezium[in touch] if you think anything important is missing on the roadmap.

== 1.0

* Revise and align configuration options, e.g. snapshot modes
* Provide a Quarkus extension facilitating the application-side part when implementing the outbox pattern
* Incubating support for IBM DB2
* Unify more parts of the code base across connectors, e.g. handling of whitelists

== 1.1

* Expose topic with transaction events (begin, end)
* Analyze and fix performance bottlenecks
* Relocate Debezium's Java packages to `io.debezium.internal.*`, making it apparent that there's no public Java API/SPI (apart from the embedded connector); we may add such API/SPI later on, allowing to implement custom connectors on the foundations of Debezium, but it won't be supported as of 1.0
* Rebase MySQL and MongoDB connectors to be based on new common framework developed during the work on the Oracle and SQL Server connectors
* Provide standalone container for running Debezium without Apache Kafka and Connect

== Future 1.x releases

* Exploration of creating aggregated events, based on the streams/data from multiple tables, so to enable use cases which need to incorporate data from multiple tables into a single output structure (e.g. an Elasticsearch document containing order and orderline info)
* Support more messaging backends, e.g. Kinesis, Apache Pulsar etc.
* Explore and provide building blocks for implementing CQRS architectures based on change data streams
* Support for Infinispan as a source
* Allow to propagate custom contextual data in change messages (e.g. the business user doing a certain change)
* Alternative implementation for the Oracle connector not based on XStream, but e.g. using LogMiner or similar
* Re-structure DB history topic to have proper semantic representation instead of being DDL-based (https://issues.redhat.com/browse/DBZ-549[DBZ-549])
* Support for Infinispan as a sink (to enable caching use cases)
* Provide more detailed monitoring information about Debezium's internal state and health via JMX (e.g. to spot loss of DB connection while the connector still is running)
* Explore publication of change events via reactive data streams (on top of embedded connector)
* DB history topic compaction tool

== Past Releases

Please see the link:/releases[releases overview] page to learn more about the contents of past Debezium releases.
