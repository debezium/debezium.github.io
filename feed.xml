<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom"><generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator><link href="https://debezium.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://debezium.io/" rel="alternate" type="text/html"/><updated>2024-10-01T06:32:13+00:00</updated><id>https://debezium.io/feed.xml</id><title type="html">Debezium</title><subtitle>Debezium is an open source distributed platform for change data capture. Start it up, point it at your databases, and your apps can start responding to all of the inserts, updates, and deletes that other apps commit to your databases. Debezium is durable and fast, so your apps can respond quickly and never miss an event, even when things go wrong.</subtitle><entry><title type="html">Debezium 3.0.0.CR2 Released</title><link href="https://debezium.io/blog/2024/09/25/debezium-3-0-cr2-released/" rel="alternate" type="text/html" title="Debezium 3.0.0.CR2 Released"/><published>2024-09-25T00:00:00+00:00</published><updated>2024-09-25T00:00:00+00:00</updated><id>https://debezium.io/blog/2024/09/25/debezium-3-0-cr2-released</id><content type="html" xml:base="https://debezium.io/blog/2024/09/25/debezium-3-0-cr2-released/"><![CDATA[<div class="paragraph"> <p>As I mentioned last week, we are in the homestretch for the next major release. We&#8217;re happy to announce the next candidate release, Debezium <strong>3.0.0.CR2</strong>!. Let&#8217;s take a quick look at the changes and improvements in this new release&#8230;&#8203;</p> </div> <div class="paragraph"> <p></p> </div> <div class="sect1"> <h2 id="new-features-and-improvements">New features and improvements</h2> <div class="sectionbody"> <div class="paragraph"> <p>Debezium 3.0.0.CR2 introduces several improvements and features, lets take a look at each individually.</p> </div> <div class="sect2"> <h3 id="postgresql_isolation_level_support">PostgreSQL isolation level support</h3> <div class="paragraph"> <p>A longstanding enhancement for snapshot isolation support for PostgreSQL is now here! A new connector configuration property, <code>snapshot.isolation.mode</code>, allows the connector to control the consistency used while executing the initial and ad-hoc blocking snapshot steps. There are four isolation levels: <code>serializable</code> (the default), <code>repeatable_read</code>, <code>read_committed</code>, and <code>read_uncommitted</code>. You can find details about these isolation levels and how they work with PostgreSQL in the <a href="https://www.postgresql.org/docs/current/transaction-iso.html">documentation</a> (<a href="https://issues.redhat.com/browse/DBZ-1252">DBZ-1252</a>).</p> </div> </div> <div class="sect2"> <h3 id="jdbc_retry_flushes_on_specific_failures">JDBC retry flushes on specific failures</h3> <div class="paragraph"> <p>The JDBC sink uses a set of buffers to improve the throughput writes to the target database. In some use cases, the flush operation of these buffers may face specific exceptions due to locks due to other applications that may have locked a specific row or table. To improve the user experience, two new configuration properties have been added:</p> </div> <div class="dlist"> <dl> <dt class="hdlist1"><code>flush.failure.max.retries</code></dt> <dd> <p>Defines the number of retries when a flush failure occurs.</p> </dd> <dt class="hdlist1"><code>flush.failure.retries.wait.ms</code></dt> <dd> <p>Defines the number of milliseconds to wait between a retry.</p> </dd> </dl> </div> <div class="paragraph"> <p>The retry feature is enabled by default, attempting to retry up to a maximum <code>5</code> attempts, with a 1-second delay between retries. If you prefer retries disabled, setting <code>flush.failure.max.retries</code> to <code>0</code> would disable this feature (<a href="https://issues.redhat.com/browse?DBZ-7291">DBZ-7291</a>).</p> </div> </div> <div class="sect2"> <h3 id="oracle_extended_max_string_size_support">Oracle EXTENDED max string size support</h3> <div class="paragraph"> <p>Oracle extended strings is a feature that allows the traditional 4000 byte limit on character data to be raised to 32K. This is done by applying a database upgrade to set the database parameter <code>max_string_size</code> to <code>EXTENDED</code>. The extended string feature then allows using the same SQL syntax used for 4000 byte or smaller character data to be used for character data up to 32K without forcing you to use CLOB-based operations.</p> </div> <div class="paragraph"> <p>With Debezium 3, you can now use the Oracle connector with databases that use extended strings and capture the changes directly from the transaction logs (<a href="https://issues.redhat.com/browse/DBZ-8039">DBZ-8039</a>). As extended strings are effectively CLOB operations on the database level, mining such column types require setting <code>lob.enabled</code> to <code>true</code>.</p> </div> <div class="paragraph"> <p>As this new feature is experimental, we&#8217;d love to hear any feedback from the community!</p> </div> </div> <div class="sect2"> <h3 id="oracle_clobblob_default_value_support">Oracle CLOB/BLOB default value support</h3> <div class="paragraph"> <p>In some cases, Oracle users may define tables with a CLOB or BLOB as required, using the <code>EMPTY_BLOB()</code> or <code>EMPTY_CLOB()</code> function to define a default when the field isn&#8217;t supplied. In previous builds, these special functions were not evaluated by Debezium, and such columns would have been emitted as optional rather than not optional.</p> </div> <div class="paragraph"> <p>Starting with Debezium 3, when an <code>EMPTY_BLOB()</code> or <code>EMPTY_CLOB()</code> default value is specified, the field will be emitted as not optional. Additionally, the field contain the appropriate default value, an empty byte array or an empty string respectively (<a href="https://issues.redhat.com/browse/DBZ-8248">DBZ-8248</a>).</p> </div> </div> </div> </div> <div class="sect1"> <h2 id="other-changes">Other changes</h2> <div class="sectionbody"> <div class="ulist"> <ul> <li> <p>Debezium does not restart automatically after throwing an ORA-00600 krvrdccs30 error <a href="https://issues.redhat.com/browse/DBZ-8223">DBZ-8223</a></p> </li> <li> <p>JDBC sink doesn&#8217;t include fields as per documentation <a href="https://issues.redhat.com/browse/DBZ-8224">DBZ-8224</a></p> </li> <li> <p>Broken link to Streams doc about configuring logging <a href="https://issues.redhat.com/browse/DBZ-8231">DBZ-8231</a></p> </li> <li> <p>Document passthrough hibernate.* properties for the JDBC connector <a href="https://issues.redhat.com/browse/DBZ-8232">DBZ-8232</a></p> </li> <li> <p>Unbounded number of processing threads in async engine <a href="https://issues.redhat.com/browse/DBZ-8237">DBZ-8237</a></p> </li> <li> <p>Streaming metrics are stuck after an ad-hoc blocking snapshot <a href="https://issues.redhat.com/browse/DBZ-8238">DBZ-8238</a></p> </li> <li> <p>DDL statement couldn&#8217;t be parsed with IF EXISTS <a href="https://issues.redhat.com/browse/DBZ-8240">DBZ-8240</a></p> </li> <li> <p>Random engine factory used by default <a href="https://issues.redhat.com/browse/DBZ-8241">DBZ-8241</a></p> </li> <li> <p>JDBC sink test suite should use the debezium/connect:nightly image for e2e tests <a href="https://issues.redhat.com/browse/DBZ-8245">DBZ-8245</a></p> </li> <li> <p>Bump Infinispan to 15.0.8.Final <a href="https://issues.redhat.com/browse/DBZ-8246">DBZ-8246</a></p> </li> <li> <p>AbstractConnectorTest consumeRecordsUntil may prematurely exit loop <a href="https://issues.redhat.com/browse/DBZ-8250">DBZ-8250</a></p> </li> <li> <p>Performance Regression in Debezium Server Kafka after DBZ-7575 fix <a href="https://issues.redhat.com/browse/DBZ-8251">DBZ-8251</a></p> </li> <li> <p>Add a note to the docs about JDBC batch retry configs <a href="https://issues.redhat.com/browse/DBZ-8252">DBZ-8252</a></p> </li> <li> <p>Fix conditionalization in shared MariaDB/MySQL file <a href="https://issues.redhat.com/browse/DBZ-8254">DBZ-8254</a></p> </li> <li> <p>Error Prone library included in MySQL connector <a href="https://issues.redhat.com/browse/DBZ-8258">DBZ-8258</a></p> </li> <li> <p>Debezium.text.ParsingException: DDL statement couldn&#8217;t be parsed <a href="https://issues.redhat.com/browse/DBZ-8259">DBZ-8259</a></p> </li> <li> <p>Add Oracle FUTC license <a href="https://issues.redhat.com/browse/DBZ-8260">DBZ-8260</a></p> </li> <li> <p>Remove Oracle libs from product assembly package <a href="https://issues.redhat.com/browse/DBZ-8261">DBZ-8261</a></p> </li> <li> <p>debezium-connector-binlog does not need MariaDB dependency <a href="https://issues.redhat.com/browse/DBZ-8263">DBZ-8263</a></p> </li> <li> <p>Provide subset package for Debezium Server <a href="https://issues.redhat.com/browse/DBZ-8264">DBZ-8264</a></p> </li> </ul> </div> <div class="paragraph"> <p>Altogether, <a href="https://issues.redhat.com/issues/?jql=project%20%3D%20DBZ%20AND%20fixVersion%20%3D%203.0.0.CR2%20ORDER%20BY%20issuetype%20DESC">44 issues</a> were fixed in this release. Here are a list of some additional noteworthy changes:</p> </div> <div class="paragraph"> <p>A huge thank you to all contributors from the community who worked on this release: <a href="https://github.com/m8719-github">Andrei Leibovski</a>, <a href="https://github.com/ani-sha">Anisha Mohanty</a>, <a href="https://github.com/Naros">Chris Cranford</a>, <a href="https://github.com/cwholmes">Cody Holmes</a>, <a href="https://github.com/nicholas-fwang">Inki Hwang</a>, <a href="https://github.com/jpechane">Jiri Pechanec</a>, <a href="https://github.com/mfvitale">Mario Fiore Vitale</a>, <a href="https://github.com/roldanbob">Robert Roldan</a>, <a href="https://github.com/vjuranek">Vojtěch Juránek</a>, and <a href="https://github.com/msillence">martin</a>!</p> </div> </div> </div> <div class="sect1"> <h2 id="whats-next">What&#8217;s next &amp; Outlook?</h2> <div class="sectionbody"> <div class="paragraph"> <p>First and foremost, assuming there are no critical issues, you can expect the final release of Debezium 3 sometime next week. As we begin to shift toward the remainder of 2024, it&#8217;s important to discuss what lies ahead for the remainder of this year and 2025.</p> </div> <div class="paragraph"> <p>For the remainder of the 2024 calendar year, the team will continue to deliver maintenance and bugfix releases for Debezium 3. These will continue at our normal cadence, approximately every 2-3 weeks, barring issues reported and those fixed. However, what will be changing this quarter is that there won&#8217;t be a minor release in December like years past. This decision is to allow the team to focus on a number of low-hanging fruit activities that don&#8217;t necessarily or directly tie to development tasks.</p> </div> <div class="paragraph"> <p>In addition, as we get closer to the end of the year, we&#8217;ll be putting out our vision of the 2025 roadmap and what that includes. Now is a perfect time to think about what you&#8217;d like to see on that roadmap and get involved. You can always reach us on our <a href="https://groups.google.com/forum/#!forum/debezium">mailing list</a> or in our <a href="https://debezium.zulipchat.com/login/#narrow/stream/302529-users">Zulip chat</a>!</p> </div> </div> </div>]]></content><author><name>Chris Cranford</name></author><category term="releases"/><category term="mongodb"/><category term="mysql"/><category term="mariadb"/><category term="postgres"/><category term="sqlserver"/><category term="cassandra"/><category term="oracle"/><category term="db2"/><category term="vitess"/><category term="outbox"/><category term="spanner"/><category term="jdbc"/><category term="informix"/><category term="ibmi"/><summary type="html"><![CDATA[As I mentioned last week, we are in the homestretch for the next major release. We&#8217;re happy to announce the next candidate release, Debezium 3.0.0.CR2!. Let&#8217;s take a quick look at the changes and improvements in this new release&#8230;&#8203;]]></summary></entry><entry><title type="html">Debezium 2.7.3.Final Released</title><link href="https://debezium.io/blog/2024/09/23/debezium-2-7-3-final-released/" rel="alternate" type="text/html" title="Debezium 2.7.3.Final Released"/><published>2024-09-23T00:00:00+00:00</published><updated>2024-09-23T00:00:00+00:00</updated><id>https://debezium.io/blog/2024/09/23/debezium-2-7-3-final-released</id><content type="html" xml:base="https://debezium.io/blog/2024/09/23/debezium-2-7-3-final-released/"><![CDATA[<div class="paragraph"> <p>I am happy to announce the third maintenance release of the Debezium 2.7 release stream, <strong>2.7.3.Final</strong>. This maintenance release focuses on addressing stability and regressions, with several improvements. Let&#8217;s dive into these changes&#8230;&#8203;</p> </div> <div class="paragraph"> <p></p> </div> <div class="sect1"> <h2 id="new-features-and-improvements">New features and improvements</h2> <div class="sectionbody"> <div class="paragraph"> <p>Debezium 2.7.3.Final introduces a couple improvements and features, lets take a look at each individually.</p> </div> <div class="sect2"> <h3 id="mariadb_11_4_3">MariaDB 11.4.3</h3> <div class="paragraph"> <p>Debezium 3 also introduces support for the most recent non-rolling release of MariaDB, 11.4.3 (<a href="https://issues.redhat.com/browse/DBZ-8226">DBZ-8226</a>). We are also closing monitoring the MariaDB 11.6 release cycle and plan to introduce vector data type support when MariaDB 11.6 becomes stable.</p> </div> </div> <div class="sect2"> <h3 id="oracle_offline_rac_node_flush_improvements">Oracle offline RAC node flush improvements</h3> <div class="paragraph"> <p>In recent improvements to the Oracle RAC node flush strategy, it was determined that a three-second delay was being forced when an Oracle RAC node was taken offline by the database administrator. Since an Oracle RAC node cannot perform any writes to the redo logs while offline, this three-second delay introduced an unnecessary amount of latency while the node remained offline.</p> </div> <div class="paragraph"> <p>In Debezium 3, the three-second delay is only imposed if a connection is active to an Oracle RAC node; however, the flush SQL operation was unsuccessful. This means that when database administrators take RAC nodes offline for maintenance, no latency overhead will be imposed by the connector (<a href="https://issues.redhat.com/browse/DBZ-8177">DBZ-8177</a>).</p> </div> </div> </div> </div> <div class="sect1"> <h2 id="other-fixes">Other fixes</h2> <div class="sectionbody"> <div class="ulist"> <ul> <li> <p>Make ORA-00600 - krvrdccs10 automatically retriable <a href="https://issues.redhat.com/browse/DBZ-5009">DBZ-5009</a></p> </li> <li> <p>DDL statement couldn&#8217;t be parsed: REVOKE IF EXISTS <a href="https://issues.redhat.com/browse/DBZ-8209">DBZ-8209</a></p> </li> <li> <p>Oracle TableSchemaBuilder provides wrong column name in error message <a href="https://issues.redhat.com/browse/DBZ-8217">DBZ-8217</a></p> </li> <li> <p>Implement separate source and sink connector sections in documentation navigation <a href="https://issues.redhat.com/browse/DBZ-8220">DBZ-8220</a></p> </li> <li> <p>Debezium does not restart automatically after throwing an ORA-00600 krvrdccs30 error <a href="https://issues.redhat.com/browse/DBZ-8223">DBZ-8223</a></p> </li> <li> <p>JDBC sink doesn&#8217;t include fields as per documentation <a href="https://issues.redhat.com/browse/DBZ-8224">DBZ-8224</a></p> </li> <li> <p>Broken link to Streams doc about configuring logging <a href="https://issues.redhat.com/browse/DBZ-8231">DBZ-8231</a></p> </li> <li> <p>Document passthrough hibernate.* properties for the JDBC connector <a href="https://issues.redhat.com/browse/DBZ-8232">DBZ-8232</a></p> </li> <li> <p>Unbounded number of processing threads in async engine <a href="https://issues.redhat.com/browse/DBZ-8237">DBZ-8237</a></p> </li> <li> <p>Streaming metrics are stuck after an ad-hoc blocking snapshot <a href="https://issues.redhat.com/browse/DBZ-8238">DBZ-8238</a></p> </li> <li> <p>DDL statement couldn&#8217;t be parsed with IF EXISTS <a href="https://issues.redhat.com/browse/DBZ-8240">DBZ-8240</a></p> </li> <li> <p>Random engine factory used by default <a href="https://issues.redhat.com/browse/DBZ-8241">DBZ-8241</a></p> </li> <li> <p>Support BLOB with EMPTY_BLOB() as default <a href="https://issues.redhat.com/browse/DBZ-8248">DBZ-8248</a></p> </li> <li> <p>AbstractConnectorTest consumeRecordsUntil may prematurely exit loop <a href="https://issues.redhat.com/browse/DBZ-8250">DBZ-8250</a></p> </li> </ul> </div> <div class="paragraph"> <p>In total there were <a href="https://issues.redhat.com/issues/?jql=project%20%3D%20DBZ%20and%20fixVersion%20%20in%20(2.7.3.Final)">17 issues</a> resolved in Debezium 2.7.3.Final. The list of changes can also be found in our <a href="https://debezium.io/releases/2.7">release notes</a>.</p> </div> <div class="paragraph"> <p>A big thank you to all the contributors from the community who worked diligently on this release: <a href="https://github.com/m8719-github">Andrei Leibovski</a>, <a href="https://github.com/ani-sha">Anisha Mohanty</a>, <a href="https://github.com/Naros">Chris Cranford</a>, <a href="https://github.com/jcechace">Jakub Cechacek</a>, <a href="https://github.com/jpechane">Jiri Pechanec</a>, <a href="https://github.com/zalmane">Oren Elias</a>, <a href="https://github.com/roldanbob">Robert Roldan</a>, <a href="https://github.com/vjuranek">Vojtech Juranek</a>, and <a href="https://github.com/msillence">martin</a>!</p> </div> </div> </div>]]></content><author><name>Chris Cranford</name></author><category term="releases"/><category term="mongodb"/><category term="mysql"/><category term="mariadb"/><category term="postgres"/><category term="sqlserver"/><category term="cassandra"/><category term="oracle"/><category term="db2"/><category term="vitess"/><category term="outbox"/><category term="spanner"/><category term="jdbc"/><category term="informix"/><category term="ibmi"/><summary type="html"><![CDATA[I am happy to announce the third maintenance release of the Debezium 2.7 release stream, 2.7.3.Final. This maintenance release focuses on addressing stability and regressions, with several improvements. Let&#8217;s dive into these changes&#8230;&#8203;]]></summary></entry><entry><title type="html">Moving container images to quay.io</title><link href="https://debezium.io/blog/2024/09/18/quay-io-reminder/" rel="alternate" type="text/html" title="Moving container images to quay.io"/><published>2024-09-18T00:00:00+00:00</published><updated>2024-09-18T00:00:00+00:00</updated><id>https://debezium.io/blog/2024/09/18/quay-io-reminder</id><content type="html" xml:base="https://debezium.io/blog/2024/09/18/quay-io-reminder/"><![CDATA[<div class="paragraph"> <p>The Debezium community is in the homestretch for the next major milestone, <strong>Debezium 3</strong>. We wanted to take this opportunity to remind the community of our plans regarding Debezium&#8217;s container images&#8230;&#8203;</p> </div> <div class="paragraph"> <p></p> </div> <div class="paragraph"> <p>In April 2023, we announced that we intended to sunset the publishing of Debezium container images to <code>docker.io</code>. As we are now more than a year since that announcement, we believe sufficient time has passed to end dual-publishing.</p> </div> <div class="paragraph"> <p>With the release of Debezium 3.0.0.Final, we will no longer publish container image updates to <code>docker.io</code>. Older images for Debezium 2.x and 1.x will remain on <code>docker.io</code>; however, all future Debezium 2.7.x and 3.x or later images will only be available on <code>quay.io</code>.</p> </div> <div class="paragraph"> <p>The following chart shows the new locations for all images being sunset:</p> </div> <table class="tableblock frame-ends grid-all stretch"> <colgroup> <col style="width: 50%;"> <col style="width: 50%;"> </colgroup> <thead> <tr> <th class="tableblock halign-left valign-top">Old Repository</th> <th class="tableblock halign-left valign-top">New Pull command</th> </tr> </thead> <tbody> <tr> <td class="tableblock halign-left valign-top"><p class="tableblock"><a href="https://hub.docker.com/r/debezium/base">debezium/base</a></p></td> <td class="tableblock halign-left valign-top"><p class="tableblock"><code>docker pull quay.io/debezium/base</code></p></td> </tr> <tr> <td class="tableblock halign-left valign-top"><p class="tableblock"><a href="https://hub.docker.com/r/debezium/connect">debezium/connect</a></p></td> <td class="tableblock halign-left valign-top"><p class="tableblock"><code>docker pull quay.io/debezium/connect</code></p></td> </tr> <tr> <td class="tableblock halign-left valign-top"><p class="tableblock"><a href="https://hub.docker.com/r/debezium/connect-base">debezium/connect-base</a></p></td> <td class="tableblock halign-left valign-top"><p class="tableblock"><code>docker pull quay.io/debezium/connect-base</code></p></td> </tr> <tr> <td class="tableblock halign-left valign-top"><p class="tableblock"><a href="https://hub.docker.com/r/debezium/kafka">debezium/kafka</a></p></td> <td class="tableblock halign-left valign-top"><p class="tableblock"><code>docker pull quay.io/debezium/kafka</code></p></td> </tr> <tr> <td class="tableblock halign-left valign-top"><p class="tableblock"><a href="https://hub.docker.com/r/debezium/example-mariadb">debezium/example-mariadb</a></p></td> <td class="tableblock halign-left valign-top"><p class="tableblock"><code>docker pull quay.io/debezium/example-mariadb</code></p></td> </tr> <tr> <td class="tableblock halign-left valign-top"><p class="tableblock"><a href="https://hub.docker.com/r/debezium/example-mongodb">debezium/example-mongodb</a></p></td> <td class="tableblock halign-left valign-top"><p class="tableblock"><code>docker pull quay.io/debezium/example-mongodb</code></p></td> </tr> <tr> <td class="tableblock halign-left valign-top"><p class="tableblock"><a href="https://hub.docker.com/r/debezium/example-mysql">debezium/example-mysql</a></p></td> <td class="tableblock halign-left valign-top"><p class="tableblock"><code>docker pull quay.io/debezium/example-mysql</code></p></td> </tr> <tr> <td class="tableblock halign-left valign-top"><p class="tableblock"><a href="https://hub.docker.com/r/debezium/example-mysql-master">debezium/example-mysql-master</a></p></td> <td class="tableblock halign-left valign-top"><p class="tableblock"><code>docker pull quay.io/debezium/example-mysql-master</code></p></td> </tr> <tr> <td class="tableblock halign-left valign-top"><p class="tableblock"><a href="https://hub.docker.com/r/debezium/example-mysql-replica">debezium/example-mysql-replica</a></p></td> <td class="tableblock halign-left valign-top"><p class="tableblock"><code>docker pull quay.io/debezium/example-mysql-replica</code></p></td> </tr> <tr> <td class="tableblock halign-left valign-top"><p class="tableblock"><a href="https://hub.docker.com/r/debezium/example-postgres">debezium/example-postgres</a></p></td> <td class="tableblock halign-left valign-top"><p class="tableblock"><code>docker pull quay.io/debezium/example-postgres</code></p></td> </tr> <tr> <td class="tableblock halign-left valign-top"><p class="tableblock"><a href="https://hub.docker.com/r/debezium/mongo-initiator">debezium/mongo-initiator</a></p></td> <td class="tableblock halign-left valign-top"><p class="tableblock"><code>docker pull quay.io/debezium/mongo-initiator</code></p></td> </tr> <tr> <td class="tableblock halign-left valign-top"><p class="tableblock"><a href="https://hub.docker.com/r/debezium/operator">debezium/operator</a></p></td> <td class="tableblock halign-left valign-top"><p class="tableblock"><code>docker pull quay.io/debezium/operator</code></p></td> </tr> <tr> <td class="tableblock halign-left valign-top"><p class="tableblock"><a href="https://hub.docker.com/r/debezium/postgres">debezium/postgres</a></p></td> <td class="tableblock halign-left valign-top"><p class="tableblock"><code>docker pull quay.io/debezium/postgres</code></p></td> </tr> <tr> <td class="tableblock halign-left valign-top"><p class="tableblock"><a href="https://hub.docker.com/r/debezium/server">debezium/server</a></p></td> <td class="tableblock halign-left valign-top"><p class="tableblock"><code>docker pull quay.io/debezium/server</code></p></td> </tr> <tr> <td class="tableblock halign-left valign-top"><p class="tableblock"><a href="https://hub.docker.com/r/debezium/tooling">debezium/tooling</a></p></td> <td class="tableblock halign-left valign-top"><p class="tableblock"><code>docker pull quay.io/debezium/tooling</code></p></td> </tr> <tr> <td class="tableblock halign-left valign-top"><p class="tableblock"><a href="https://hub.docker.com/r/debezium/website-builder">debezium/website-builder</a></p></td> <td class="tableblock halign-left valign-top"><p class="tableblock"><code>docker pull quay.io/debezium/website-builder</code></p></td> </tr> <tr> <td class="tableblock halign-left valign-top"><p class="tableblock"><a href="https://hub.docker.com/r/debezium/zookeeper">debezium/zookeeper</a></p></td> <td class="tableblock halign-left valign-top"><p class="tableblock"><code>docker pull quay.io/debezium/zookeeper</code></p></td> </tr> </tbody> </table> <div class="paragraph"> <p>If you experience any issues or problems, please be sure to reach out to us on our <a href="https://groups.google.com/g/debezium">mailing list</a> or <a href="https://debezium.zulipchat.com/login/#narrow/stream/302529-users">Zulip chat</a>.</p> </div>]]></content><author><name>Chris Cranford</name></author><category term="debezium"/><category term="docker"/><category term="images"/><summary type="html"><![CDATA[The Debezium community is in the homestretch for the next major milestone, Debezium 3. We wanted to take this opportunity to remind the community of our plans regarding Debezium&#8217;s container images&#8230;&#8203;]]></summary></entry><entry><title type="html">Debezium 3.0.0.CR1 Released</title><link href="https://debezium.io/blog/2024/09/16/debezium-3-0-cr1-released/" rel="alternate" type="text/html" title="Debezium 3.0.0.CR1 Released"/><published>2024-09-16T00:00:00+00:00</published><updated>2024-09-16T00:00:00+00:00</updated><id>https://debezium.io/blog/2024/09/16/debezium-3-0-cr1-released</id><content type="html" xml:base="https://debezium.io/blog/2024/09/16/debezium-3-0-cr1-released/"><![CDATA[<div class="paragraph"> <p>The community is in the homestretch toward the next major milestone for Debezium, and we&#8217;re happy to announce the availability of Debezium <strong>3.0.0.CR1</strong>!</p> </div> <div class="paragraph"> <p>Beyond a number of bugfixes to connectors, this release also brings several improvements for MySQL, Oracle, and the Vitess connectors. Unless any major regressions show up, we can expect Debezium 3 in the not too distant future.</p> </div> <div class="paragraph"> <p></p> </div> <div class="sect1"> <h2 id="breaking-changes">Breaking changes</h2> <div class="sectionbody"> <div class="paragraph"> <p>The team aims to avoid any potential breaking changes between minor releases; however, such changes are sometimes inevitable.</p> </div> <div class="dlist"> <dl> <dt class="hdlist1">PostgreSQL</dt> <dd> <p>Vector data type names introduced for PostgreSQL were too database specific. In order to provide a more generic support for vector data types, the names were adjusted to support PostgreSQL and MySQL (<a href="https://issues.redhat.com/browse/DBZ-8183">DBZ-8183</a>).</p> </dd> <dt class="hdlist1">Oracle</dt> <dd> <p>Several deprecated configuration properties have been removed:</p> <div class="ulist"> <ul> <li> <p><code>log.mining.transaction.retention.hours</code> replaced by <code>log.mining.transaction.retention.ms</code></p> </li> <li> <p><code>log.mining.archive.destination.name</code> replaced by <code>archive.destination.name</code></p> </li> <li> <p><code>log.mining.archive.log.hours</code> replaced by <code>archive.log.hours</code></p> </li> </ul> </div> <div class="paragraph"> <p>Please be sure to update your Oracle connector configuration when using the deprecated configuration options to retain old behavior (<a href="https://issues.redhat.com/browse/DBZ-8181">DBZ-8181</a>).<br> <br> The default <code>log.mining.strategy</code> value has changed and is now <code>online_catalog</code>. As a vast majority of users typically use this strategy, and it generally performs better than <code>redo_log_catalog</code>, we felt this change made since in Debezium 3. If your deployments were previously relying on the default <code>redo_log_catalog</code> strategy, you will need to explicitly add <code>log.mining.strategy</code> to the connector configuration and specify the value <code>redo_log_catalog</code> when upgrading (<a href="https://issues.redhat.com/browse/DBZ-3656">DBZ-3656</a>).</p> </div> </dd> <dt class="hdlist1">SQL Server</dt> <dd> <p>The JMX signaling and notifications for SQL Server did not work correctly when a connector was configured with multiple databases spawning multiple tasks. To resolve this issue, it was necessary to change the naming of signalling and notification MBean names to make sure they are unique per task (<a href="https://issues.redhat.com/browse/DBZ-8137">DBZ-8137</a>).</p> </dd> </dl> </div> </div> </div> <div class="sect1"> <h2 id="new-features-and-improvements">New features and improvements</h2> <div class="sectionbody"> <div class="paragraph"> <p>Debezium 3.0.0.CR1 also introduces several improvements and features, lets take a look at each individually.</p> </div> <div class="sect2"> <h3 id="mysql_9">MySQL 9</h3> <div class="paragraph"> <p>Oracle unveiled the first innovation release of MySQL 9.0 on July 1st, 2024. We are pleased to announce that we&#8217;ve tested and verified that MySQL 9.0 works and is supported starting with Debezium 3.0 (<a href="https://issues.redhat.com/browse/DBZ-8030">DBZ-8030</a>). If you experience any issues or problems, please be sure to <a href="https://issues.redhat.com/projects/DBZ">open an issue</a>.</p> </div> </div> <div class="sect2"> <h3 id="mysql_vector_data_types">MySQL Vector data types</h3> <div class="paragraph"> <p>One of the newest features being added to relational databases is the introduction of vector data types. In addition to support for MySQL 9.0, Debezium 3 also introduces support for the new <code>VECTOR(n)</code> data type, which supports a list of floating-point values that can be expressed as a binary or list-formatted string. More information is available in the <a href="https://dev.mysql.com/doc/refman/9.0/en/vector.html">MySQL documentation</a> about the vector data type (<a href="https://issues.redhat.com/browse/DBZ-8157">DBZ-8157</a>).</p> </div> <div class="paragraph"> <p>In addition, the MySQL grammar has been updated to reflect support for the new MySQL 9.0 vector functions (<a href="https://issues.redhat.com/browse/DBZ-8210">DBZ-8210</a>). More information about these functions are also in the <a href="https://dev.mysql.com/doc/refman/9.0/en/vector-functions.html">MySQL documentation</a>.</p> </div> </div> <div class="sect2"> <h3 id="mariadb_11_4_3">MariaDB 11.4.3</h3> <div class="paragraph"> <p>Debezium 3 also introduces support for the most recent non-rolling release of MariaDB, 11.4.3 (<a href="https://issues.redhat.com/browse/DBZ-8226">DBZ-8226</a>). We are also closing monitoring the MariaDB 11.6 release cycle and plan to introduce vector data type support when MariaDB 11.6 becomes stable.</p> </div> </div> <div class="sect2"> <h3 id="oracle_offline_rac_node_flush_improvements">Oracle offline RAC node flush improvements</h3> <div class="paragraph"> <p>In recent improvements to the Oracle RAC node flush strategy, it was determined that a three-second delay was being forced when an Oracle RAC node was taken offline by the database administrator. Since an Oracle RAC node cannot perform any writes to the redo logs while offline, this three-second delay introduced an unnecessary amount of latency while the node remained offline.</p> </div> <div class="paragraph"> <p>In Debezium 3, the three-second delay is only imposed if a connection is active to an Oracle RAC node; however, the flush SQL operation was unsuccessful. This means that when database administrators take RAC nodes offline for maintenance, no latency overhead will be imposed by the connector (<a href="https://issues.redhat.com/browse/DBZ-8177">DBZ-8177</a>).</p> </div> </div> <div class="sect2"> <h3 id="vitess_inherit_shard_epoch">Vitess inherit shard epoch</h3> <div class="paragraph"> <p>A new Vitess connector configuration property has been added to control whether epochs of a new shard, after a re-shard operation, inherits epochs from its parent shard. This new configuration property, <code>vitess.inherit.epoch</code>, defaults to <code>false</code> and isn&#8217;t enabled by default (<a href="https://issues.redhat.com/browse/DBZ-8163">DBZ-8163</a>).</p> </div> </div> </div> </div> <div class="sect1"> <h2 id="other-changes">Other changes</h2> <div class="sectionbody"> <div class="paragraph"> <p>Altogether, <a href="https://issues.redhat.com/issues/?jql=project%20%3D%20DBZ%20AND%20fixVersion%20%3D%203.0.0.CR1%20ORDER%20BY%20issuetype%20DESC">45 issues</a> were fixed in this release. Here are a list of some additional noteworthy changes:</p> </div> <div class="ulist"> <ul> <li> <p>Make ORA-00600 - krvrdccs10 automatically retriable <a href="https://issues.redhat.com/browse/DBZ-5009">DBZ-5009</a></p> </li> <li> <p>Incremental snapshot fails with NPE if surrogate key doesn&#8217;t exist <a href="https://issues.redhat.com/browse/DBZ-7797">DBZ-7797</a></p> </li> <li> <p>MySQL 8.4 incompatibility due to removed SQL commands <a href="https://issues.redhat.com/browse/DBZ-7838">DBZ-7838</a></p> </li> <li> <p>Postgres connector - null value processing for "money" type column. <a href="https://issues.redhat.com/browse/DBZ-8027">DBZ-8027</a></p> </li> <li> <p>Using snapshot.include.collection.list with Oracle raises NullPointerException <a href="https://issues.redhat.com/browse/DBZ-8032">DBZ-8032</a></p> </li> <li> <p>Performance degradation when reconstructing (log.mining.stragtegy hybrid mode) <a href="https://issues.redhat.com/browse/DBZ-8071">DBZ-8071</a></p> </li> <li> <p>Documentation for signals provides incorrect data-collection format for some connectors <a href="https://issues.redhat.com/browse/DBZ-8090">DBZ-8090</a></p> </li> <li> <p>The source data type exceeds the debezium data type and cannot deserialize the object <a href="https://issues.redhat.com/browse/DBZ-8142">DBZ-8142</a></p> </li> <li> <p>Refactor engine signal support <a href="https://issues.redhat.com/browse/DBZ-8160">DBZ-8160</a></p> </li> <li> <p>Incorrect use of generic types in tests <a href="https://issues.redhat.com/browse/DBZ-8166">DBZ-8166</a></p> </li> <li> <p>Latest Informix JDBC Driver <a href="https://issues.redhat.com/browse/DBZ-8167">DBZ-8167</a></p> </li> <li> <p>Postgres JSONB Fields are not supported with Reselect Post Processor <a href="https://issues.redhat.com/browse/DBZ-8168">DBZ-8168</a></p> </li> <li> <p>upgrade Adobe s3mock to version 3.10.0 <a href="https://issues.redhat.com/browse/DBZ-8169">DBZ-8169</a></p> </li> <li> <p>Include Jackson libraries to JDBC connector Docker image distribution <a href="https://issues.redhat.com/browse/DBZ-8175">DBZ-8175</a></p> </li> <li> <p>Ehcache fails to start, throwing "Invaild XML Configuration" <a href="https://issues.redhat.com/browse/DBZ-8178">DBZ-8178</a></p> </li> <li> <p>Enable snapshot.database.errors.max.retriesEnable during Oracle tests <a href="https://issues.redhat.com/browse/DBZ-8184">DBZ-8184</a></p> </li> <li> <p>Change event for a logical decoding message doesn&#8217;t contain <code>transaction</code> field <a href="https://issues.redhat.com/browse/DBZ-8185">DBZ-8185</a></p> </li> <li> <p>Add MariaDB connector server distribution <a href="https://issues.redhat.com/browse/DBZ-8186">DBZ-8186</a></p> </li> <li> <p>NullPointerException (schemaUpdateCache is null) when restarting Oracle engine <a href="https://issues.redhat.com/browse/DBZ-8187">DBZ-8187</a></p> </li> <li> <p>XStream may fail to attach on retry if previous attempt failed <a href="https://issues.redhat.com/browse/DBZ-8188">DBZ-8188</a></p> </li> <li> <p>Truncate byte buffer should return a new array <a href="https://issues.redhat.com/browse/DBZ-8189">DBZ-8189</a></p> </li> <li> <p>Update Vitess example to Debezium 2.7/Vitess 19 <a href="https://issues.redhat.com/browse/DBZ-8196">DBZ-8196</a></p> </li> <li> <p>OracleConnectorIT test shouldGracefullySkipObjectBasedTables can timeout prematurely <a href="https://issues.redhat.com/browse/DBZ-8197">DBZ-8197</a></p> </li> <li> <p>Exclude Oracle 23 VECSYS tablespace from capture <a href="https://issues.redhat.com/browse/DBZ-8198">DBZ-8198</a></p> </li> <li> <p>AbstractProcessorTest uses an incorrect database name when run against Oracle 23 Free edition <a href="https://issues.redhat.com/browse/DBZ-8199">DBZ-8199</a></p> </li> <li> <p>Reduce log verbosity of OpenLogReplicator SCN confirmation <a href="https://issues.redhat.com/browse/DBZ-8201">DBZ-8201</a></p> </li> <li> <p>Support for older MongoDb versions <a href="https://issues.redhat.com/browse/DBZ-8202">DBZ-8202</a></p> </li> <li> <p>DDL statement couldn&#8217;t be parsed: REVOKE IF EXISTS <a href="https://issues.redhat.com/browse/DBZ-8209">DBZ-8209</a></p> </li> <li> <p>System testsuite fails with route name being too long <a href="https://issues.redhat.com/browse/DBZ-8213">DBZ-8213</a></p> </li> <li> <p>Oracle TableSchemaBuilder provides wrong column name in error message <a href="https://issues.redhat.com/browse/DBZ-8217">DBZ-8217</a></p> </li> <li> <p>Using ehcache in Kafka connect throws an XMLConfiguration parse exception <a href="https://issues.redhat.com/browse/DBZ-8219">DBZ-8219</a></p> </li> <li> <p>Implement separate source and sink connector sections in documentation navigation <a href="https://issues.redhat.com/browse/DBZ-8220">DBZ-8220</a></p> </li> <li> <p>OcpJdbcSinkConnectorIT fails <a href="https://issues.redhat.com/browse/DBZ-8228">DBZ-8228</a></p> </li> <li> <p>Container image does not install correct apicurio deps <a href="https://issues.redhat.com/browse/DBZ-8230">DBZ-8230</a></p> </li> <li> <p>Add information about helm chart installation to operator readme <a href="https://issues.redhat.com/browse/DBZ-8233">DBZ-8233</a></p> </li> </ul> </div> <div class="paragraph"> <p>A huge thank you to all contributors from the community who worked on this release: <a href="https://github.com/ajit97singh">Ajit</a>, <a href="https://github.com/Naros">Chris Cranford</a>, <a href="https://github.com/jcechace">Jakub Cechacek</a>, <a href="https://github.com/jpechane">Jiri Pechanec</a>, <a href="https://github.com/joschi">Jochen Schalanda</a>, <a href="https://github.com/nrkljo">Lars M. Johansson</a>, <a href="https://github.com/mfvitale">Mario Fiore Vitale</a>, <a href="https://github.com/nguymin4">Minh Son Nguyen</a>, <a href="https://github.com/shaer">Mohamed El Shaer</a>, <a href="https://github.com/obabec">Ondrej Babec</a>, <a href="https://github.com/zalmane">Oren Elias</a>, <a href="https://github.com/rk3rn3r">René Kerner</a>, <a href="https://github.com/roldanbob">Robert Roldan</a>, <a href="https://github.com/rkudryashov">Roman Kudryashov</a>, <a href="https://github.com/sullis">Sean C. Sullivan</a>, <a href="https://github.com/GitHubSergei">Sergei Kazakov</a>, <a href="https://github.com/SylvainMarty">Sylvain Marty</a>, <a href="https://github.com/twthorn">Thomas Thornton</a>, <a href="https://github.com/PlugaruT">Tudor Plugaru</a>, <a href="https://github.com/vjuranek">Vojtěch Juránek</a>, and <a href="https://github.com/moyq5">moyq5</a>!</p> </div> </div> </div>]]></content><author><name>Chris Cranford</name></author><category term="releases"/><category term="mongodb"/><category term="mysql"/><category term="mariadb"/><category term="postgres"/><category term="sqlserver"/><category term="cassandra"/><category term="oracle"/><category term="db2"/><category term="vitess"/><category term="outbox"/><category term="spanner"/><category term="jdbc"/><category term="informix"/><category term="ibmi"/><summary type="html"><![CDATA[The community is in the homestretch toward the next major milestone for Debezium, and we&#8217;re happy to announce the availability of Debezium 3.0.0.CR1! Beyond a number of bugfixes to connectors, this release also brings several improvements for MySQL, Oracle, and the Vitess connectors. Unless any major regressions show up, we can expect Debezium 3 in the not too distant future.]]></summary></entry><entry><title type="html">Debezium 2.7.2.Final Released</title><link href="https://debezium.io/blog/2024/09/05/debezium-2-7-2-final-released/" rel="alternate" type="text/html" title="Debezium 2.7.2.Final Released"/><published>2024-09-05T00:00:00+00:00</published><updated>2024-09-05T00:00:00+00:00</updated><id>https://debezium.io/blog/2024/09/05/debezium-2-7-2-final-released</id><content type="html" xml:base="https://debezium.io/blog/2024/09/05/debezium-2-7-2-final-released/"><![CDATA[<div class="paragraph"> <p>I am happy to announce the second maintenance release of the Debezium 2.7 release stream, <strong>2.7.2.Final</strong>. This maintenance release focuses on addressing stability and regressions, with some improvements such as support for <code>DECIMAL(p</code>) data types with Informix and fixing a regression with the <code>JsonConverter</code> and the <code>TruncateColumn</code> handler.</p> </div> <div class="paragraph"> <p></p> </div> <div class="paragraph"> <p>Let&#8217;s dive into these changes&#8230;&#8203;</p> </div> <div class="sect1"> <h2 id="breaking-changes">Breaking changes</h2> <div class="sectionbody"> <div class="paragraph"> <p>The team aims to avoid any potential breaking changes between minor releases; however, such changes are sometimes inevitable.</p> </div> <div class="dlist"> <dl> <dt class="hdlist1">Debezium Server Kafka Sink</dt> <dd> <p>The Debezium Server Kafka sink adapter could wait indefinitely when a Kafka broker becomes unavailable. A new configurable timeout has been added to the sink adapter to force the adapter to fail when the timeout is reached. The new option, <code>debezium.sink.kafka.wait.message.delivery.timeout.ms</code>, has a default value of 30 seconds. Please adjust this accordingly if the default is insufficient for your needs (<a href="https://issues.redhat.com/browse/DBZ-7575">DBZ-7575</a>).</p> </dd> <dt class="hdlist1">SQL Server</dt> <dd> <p>Normal JMX metrics are registered with a <code>taskId</code> attribute because SQL Server supports spawning a unique task per database mapping. Unfortunately, the JMX signal channel did not honor this and lead to some issues starting the JMX signal channel for each task. This has been fixed and the JMX signal channel&#8217;s MBean name now uses the <code>taskId</code> in its name to uniquely identify a signal channel for each database task when using a single connector to stream changes from multiple SQL Server databases (<a href="https://issues.redhat.com/browse/DBZ-8137">DBZ-8137</a>).</p> </dd> </dl> </div> </div> </div> <div class="sect1"> <h2 id="new-features-and-improvements">New features and improvements</h2> <div class="sectionbody"> <div class="paragraph"> <p>Debezium 2.7.2.Final also introduces a couple improvements and features, lets take a look at each individually.</p> </div> <div class="sect2"> <h3 id="informix_decimalp_data_type_support">Informix <code>DECIMAL(p)</code> data type support</h3> <div class="paragraph"> <p>The <code>DECIMAL</code> data type has seen a few improvements with Debezium for Informix. The data type can be defined with or without precision. When defined without precision, the connector interprets the column&#8217;s type as <code>DECIMAL(16)</code>. However, users can also define columns as <code>DECIMAL(p,s)</code>, where p is a precision up to 32 and s is the variable scale.</p> </div> <div class="paragraph"> <p>In order to represent the upper-bounds of such decimal numbers using <code>PRECISE</code> decimal handling mode, the Informix connector had to be adjusted to take advantage of the Debezium <code>VariableScaleDecimal</code> semantic type, which enables Debezium to retain full precision of such floating point numbers when serialized in a Kafka message (<a href="https://issues.redhat.com/browse/DBZ-8114">DBZ-8114</a>).</p> </div> <div class="paragraph"> <p>For more information on how <code>DECIMAL(p,s)</code> data types are serialized, please see the <a href="https://debezium.io/documentation/reference/2.7/connectors/informix.html#informix-decimal-types">Informix documentation</a>.</p> </div> </div> </div> </div> <div class="sect1"> <h2 id="important-fixes">Fixes and stability improvements</h2> <div class="sectionbody"> <div class="paragraph"> <p>Debezium 2.7.2.Final introduces several bug fixes and stability improvements.</p> </div> <div class="sect2"> <h3 id="column_truncation_now_respected_by_jsonconverter">Column truncation now respected by JsonConverter</h3> <div class="paragraph"> <p>In earlier versions of Debezium, the <code>column.truncate.*</code> functionality returned a sliced <code>ByteBuffer</code> based on the truncation configuration. While this worked when using Avro, the truncation was not honored if your connector configuration used the <code>JsonConverter</code> as it operated on the entire underlying array rather than the given <em>slice</em>.</p> </div> <div class="paragraph"> <p>With Debezium 2.7.2.Final, this has been fixed and the column truncation logic now explicitly creates a <code>ByteBuffer</code> based on a new array. This change allows the <code>JsonConverter</code> to respect the truncated column value during the serialization to Kafka (<a href="https://issues.redhat.com/browse/DBZ-8189">DBZ-8189</a>).</p> </div> </div> <div class="sect2"> <h3 id="snapshot_mode_schema_only_recovery_has_returned">Snapshot mode <code>schema_only_recovery</code> has returned</h3> <div class="paragraph"> <p>It was also reported that the <code>schema_only_recovery</code> snapshot mode was not functioning in Debezium 2.7. We have identified the issue and the schema-only recovery snapshot mode has returned as a viable choice for Debezium 2.7 once again.</p> </div> <div class="admonitionblock tip"> <table> <tr> <td class="icon"> <i class="fa icon-tip" title="Tip"></i> </td> <td class="content"> <div class="paragraph"> <p>A gentle reminder that <code>schema_only_recovery</code> and <code>schema_only</code> were deprecated in Debezium 2.7 and have been removed in Debezium 3.0. Please be sure to use the <code>recovery</code> or <code>no_data</code> snapshot modes respectively moving forward when upgrading from Debezium 2.7 to 3.0.</p> </div> </td> </tr> </table> </div> </div> <div class="sect2"> <h3 id="mariadb_missing_from_debezium_server">MariaDB missing from Debezium Server</h3> <div class="paragraph"> <p>Some of you may have noticed that with the addition of the new official MariaDB connector in Debezium 2.7, that the connector was absent from the Debezium Server distribution. You&#8217;ll be happy to know that the Debezium 2.7.2.Final builds will now contain the MariaDB connector in the distribution, so you will no longer need to manually add it. (<a href="https://issues.redhat.com/browse/DBZ-8186">DBZ-8186</a>).</p> </div> </div> <div class="sect2"> <h3 id="oracle_vecsys_tablespace_marked_as_built_in">Oracle <code>VECSYS</code> tablespace marked as built-in</h3> <div class="paragraph"> <p>If you&#8217;ve attempted to use Debezium with any of the latest Oracle 23ai images, you will have noticed a new tablespace has emerged called <code>VECSYS</code>. This tablespace includes a variety of system tables for storing metadata about the new Oracle 23 vector database and search features.</p> </div> <div class="paragraph"> <p>We have found that the <code>DBMS_METADATA.GET_DDL</code> function used to capture the table&#8217;s DDL structure is not compatible with several database objects in the <code>VECSYS</code> tablespace and will lead to connector issues if you don&#8217;t explicitly set <code>schema.history.internal.store.only.captured.tables.ddl</code> to <code>true</code>. To address this problem, the tablespace is marked as built-in, meaning it is no longer eligible for capture (<a href="https://issues.redhat.com/browse/DBZ-8198">DBZ-8198</a>).</p> </div> </div> </div> </div> <div class="sect1"> <h2 id="other-fixes">Other fixes</h2> <div class="sectionbody"> <div class="ulist"> <ul> <li> <p>Incremental snapshots don&#8217;t work with CloudEvent converter (<a href="https://issues.redhat.com/browse/DBZ-7601">DBZ-7601</a>)</p> </li> <li> <p>Incremental snapshot fails with NPE if surrogate key doesn&#8217;t exist (<a href="https://issues.redhat.com/browse/DBZ-7797">DBZ-7797</a>)</p> </li> <li> <p>Postgres connector - null value processing for "money" type column. (<a href="https://issues.redhat.com/browse/DBZ-8027">DBZ-8027</a>)</p> </li> <li> <p>Using snapshot.include.collection.list with Oracle raises NullPointerException (<a href="https://issues.redhat.com/browse/DBZ-8032">DBZ-8032</a>)</p> </li> <li> <p>Log additional details about abandoned transactions (<a href="https://issues.redhat.com/browse/DBZ-8044">DBZ-8044</a>)</p> </li> <li> <p>Performance degradation when reconstructing (log.mining.stragtegy hybrid mode) (<a href="https://issues.redhat.com/browse/DBZ-8071">DBZ-8071</a>)</p> </li> <li> <p>Documentation for signals provides incorrect data-collection format for some connectors (<a href="https://issues.redhat.com/browse/DBZ-8090">DBZ-8090</a>)</p> </li> <li> <p>ORA-00600: internal error code, arguments: [krvrdGetUID:2], [18446744073709551614], [], [], [], [], [], [], [], [], [], [] (<a href="https://issues.redhat.com/browse/DBZ-8125">DBZ-8125</a>)</p> </li> <li> <p>ConvertingFailureIT#shouldFailConversionTimeTypeWithConnectModeWhenFailMode fails randomly (<a href="https://issues.redhat.com/browse/DBZ-8128">DBZ-8128</a>)</p> </li> <li> <p>Unpredicatable ordering of table rows during insertion causing foreign key error (<a href="https://issues.redhat.com/browse/DBZ-8130">DBZ-8130</a>)</p> </li> <li> <p>schema_only crashes ibmi Connector (<a href="https://issues.redhat.com/browse/DBZ-8131">DBZ-8131</a>)</p> </li> <li> <p>Support larger database.server.id values [DBZ-8134](<a href="https://issues.redhat.com/browse/DBZ-8134" class="bare">https://issues.redhat.com/browse/DBZ-8134</a>)</p> </li> <li> <p>Add LogMiner start mining session retry attempt counter to logs (<a href="https://issues.redhat.com/browse/DBZ-8143">DBZ-8143</a>)</p> </li> <li> <p>Open redo thread consistency check can lead to ORA-01291 - missing logfile (<a href="https://issues.redhat.com/browse/DBZ-8144">DBZ-8144</a>)</p> </li> <li> <p>Reduce logging verbosity of XStream DML event data (<a href="https://issues.redhat.com/browse/DBZ-8148">DBZ-8148</a>)</p> </li> <li> <p>When stopping the Oracle rac node the Debezium server throws an expectations - ORA-12514: Cannot connect to database and retries (<a href="https://issues.redhat.com/browse/DBZ-8149">DBZ-8149</a>)</p> </li> <li> <p>Issue with Debezium Snapshot: DateTimeParseException with plugin pgoutput (<a href="https://issues.redhat.com/browse/DBZ-8150">DBZ-8150</a>)</p> </li> <li> <p>JDBC connector validation fails when using record_value with no primary.key.fields (<a href="https://issues.redhat.com/browse/DBZ-8151">DBZ-8151</a>)</p> </li> <li> <p>Taking RAC node offline and back online can lead to thread inconsistency (<a href="https://issues.redhat.com/browse/DBZ-8162">DBZ-8162</a>)</p> </li> <li> <p>Postgres JSONB Fields are not supported with Reselect Post Processor (<a href="https://issues.redhat.com/browse/DBZ-8168">DBZ-8168</a>)</p> </li> <li> <p>NullPointerException (schemaUpdateCache is null) when restarting Oracle engine (<a href="https://issues.redhat.com/browse/DBZ-8187">DBZ-8187</a>)</p> </li> <li> <p>XStream may fail to attach on retry if previous attempt failed (<a href="https://issues.redhat.com/browse/DBZ-8188">DBZ-8188</a>)</p> </li> <li> <p>Reduce log verbosity of OpenLogReplicator SCN confirmation (<a href="https://issues.redhat.com/browse/DBZ-8201">DBZ-8201</a>)</p> </li> </ul> </div> <div class="paragraph"> <p>In total there were <a href="https://issues.redhat.com/issues/?jql=project%20%3D%20DBZ%20and%20fixVersion%20%20in%20(2.7.2.Final)">31 issues</a> resolved in Debezium 2.7.2.Final. The list of changes can also be found in our <a href="https://debezium.io/releases/2.7">release notes</a>.</p> </div> <div class="paragraph"> <p>A big thank you to all the contributors from the community who worked diligently on this release: <a href="https://github.com/ashishbinu">Ashish Binu</a>, <a href="https://github.com/Naros">Chris Cranford</a>, <a href="https://github.com/jpechane">Jiri Pechanec</a>, <a href="https://github.com/joschi">Jochen Schalanda</a>, <a href="https://github.com/nrkljo">Lars M. Johansson</a>, <a href="https://github.com/mfvitale">Mario Fiore Vitale</a>, <a href="https://github.com/nguymin4">Minh Son Nguyen</a>, <a href="https://github.com/shaer">Mohamed El Shaer</a>, <a href="https://github.com/moyq5">moyq5</a>, <a href="https://github.com/roldanbob">Robert Roldan</a>, <a href="https://github.com/GitHubSergei">Sergei Kazakov</a>, <a href="https://github.com/twthorn">Thomas Thornton</a>, and <a href="https://github.com/vjuranek">Vojtech Juranek</a>!</p> </div> </div> </div>]]></content><author><name>Chris Cranford</name></author><category term="releases"/><category term="mongodb"/><category term="mysql"/><category term="mariadb"/><category term="postgres"/><category term="sqlserver"/><category term="cassandra"/><category term="oracle"/><category term="db2"/><category term="vitess"/><category term="outbox"/><category term="spanner"/><category term="jdbc"/><category term="informix"/><category term="ibmi"/><summary type="html"><![CDATA[I am happy to announce the second maintenance release of the Debezium 2.7 release stream, 2.7.2.Final. This maintenance release focuses on addressing stability and regressions, with some improvements such as support for DECIMAL(p) data types with Informix and fixing a regression with the JsonConverter and the TruncateColumn handler.]]></summary></entry><entry><title type="html">Debezium 3.0.0.Beta Released</title><link href="https://debezium.io/blog/2024/08/26/debezium-3.0-beta1-released/" rel="alternate" type="text/html" title="Debezium 3.0.0.Beta Released"/><published>2024-08-26T00:00:00+00:00</published><updated>2024-08-26T00:00:00+00:00</updated><id>https://debezium.io/blog/2024/08/26/debezium-3.0-beta1-released</id><content type="html" xml:base="https://debezium.io/blog/2024/08/26/debezium-3.0-beta1-released/"><![CDATA[<div class="paragraph"> <p>Even as the summer heat continues to rise, the Debezium team has some new, cool news to share. We&#8217;re pleased to announce the first beta preview of Debezium 3, <strong>3.0.0.beta1</strong>.</p> </div> <div class="paragraph"> <p>This release includes a host of new features and improvements, including detailed metrics for creates, updates, and deletes per table, replication slot creation timeout, support for <code>PgVector</code> data types with PostgreSQL, a new Oracle embedded buffer implementation based on Ehcache, and others. Let&#8217;s take a few moments and dive into these new features and how you can take advantage of them in Debezium 3!</p> </div> <div class="paragraph"> <p></p> </div> <div class="sect1"> <h2 id="breaking-changes">Breaking changes</h2> <div class="sectionbody"> <div class="paragraph"> <p>The team aims to avoid any potential breaking changes between minor releases; however, such changes are sometimes inevitable.</p> </div> <div class="dlist"> <dl> <dt class="hdlist1">Debezium Server Kafka Sink</dt> <dd> <p>The Debezium Server Kafka sink adapter could wait indefinitely when a Kafka broker becomes unavailable. A new configurable timeout has been added to the sink adapter to force the adapter to fail when the timeout is reached. The new option, <code>debezium.sink.kafka.wait.message.delivery.timeout.ms</code>, has a default value of 30 seconds. Please adjust this accordingly if the default is insufficient for your needs (<a href="https://issues.redhat.com/browse/DBZ-7575">DBZ-7575</a>).</p> </dd> <dt class="hdlist1">Debezium Server RabbitMQ sink</dt> <dd> <p>The Debezium Server RabbitMQ sink adapter was sending all changes to the same single stream. While this may be useful for some scenarios, this does not align well with other broker systems where each table is streamed to its own unique topic or stream. With Debezium 3, this logic has changed and each table will be streamed to its own unique stream by default. When setting <code>debezium.sink.rabbitmqstream.stream</code>, you can enable the legacy behavior of streaming all changes to the same stream (<a href="https://issues.redhat.com/browse/DBZ-8118">DBZ-8118</a>).</p> </dd> </dl> </div> </div> </div> <div class="sect1"> <h2 id="new-features-and-improvements">New features and improvements</h2> <div class="sectionbody"> <div class="paragraph"> <p>Debezium 3.0.0.Beta1 also introduces many improvements and features, lets take a look at each individually.</p> </div> <div class="sect2"> <h3 id="detailed_metrics_per_table">Detailed metrics per table</h3> <div class="paragraph"> <p>Debezium will now begin to track metrics based on the individual <em>create</em>, <em>update</em>, and <em>delete</em> operations performed per relational table. For some connectors such as PostgreSQL and Oracle, these new detailed metrics also track the <em>truncate</em> operations performed per relational table. This can be quite useful for situations where you need to detect specific mutation patterns or where you may want to integrate analytics or observability stacks where this detailed information could be valuable to identifying problems.</p> </div> <div class="paragraph"> <p>For users upgrading to Debezium 3, these new metrics are captured automatically. They are exposed using a map-based pattern of <code>Map&lt;String, Long&gt;</code> where the key is the table name and the value is the number of events observed. The new metrics names are <code>NumberOfCreateEventsSeen</code>, <code>NumberOfDeleteEventsSeen</code>, <code>NumberOfUpdateEventsSeen</code>, and <code>NumberOfTruncateEventsSeen</code> (<a href="https://issues.redhat.com/browse/DBZ-8035">DBZ-8035</a>).</p> </div> </div> <div class="sect2"> <h3 id="postgresql_replication_slot_creation_timeout">PostgreSQL replication slot creation timeout</h3> <div class="paragraph"> <p>When the PostgreSQL connector is first deployed, one of its first tasks is to create a replication slot in the database if it doesn&#8217;t already exist. The replication slot is pivotal to how the connector works and facilitates the capture and dispatch of changes to Debezium. Unfortunately, there are some database operations that will block the creation of replication slots, such as in-progress transactions, forcing the connector to block indefinitely while waiting for the transaction to conclude. For short-lived transactions, this isn&#8217;t generally a concern; however, for long-running transactions that&#8217;s an entirely different situation.</p> </div> <div class="paragraph"> <p>In order to improve this experience, a new internal option was added, <code>internal.create.slot.command.timeout</code>, which defaults to 90 seconds. If the creation of the replication slot does not complete within 90 seconds, it will retry up to <code>slot.max.retries</code>. Once the retries are exhausted, the connector will throw an unrecoverable error (<a href="https://issues.redhat.com/browse/DBZ-8073">DBZ-8073</a>).</p> </div> </div> <div class="sect2"> <h3 id="support_for_postgresql_pgvector_data_types">Support for PostgreSQL <code>PgVector</code> data types</h3> <div class="paragraph"> <p>The <code>pgvector</code> extension introduces vector search functionality for PostgreSQL. There are three data types this extension introduces: <code>vector</code>, <code>halfvec</code>, and <code>sparsevec</code>.</p> </div> <div class="paragraph"> <p>In Debezium 3, all three data types will be streamed like any other data type. Each data type is emitted based on the following semantic mappings:</p> </div> <div class="ulist"> <ul> <li> <p><code>vector</code> as an <code>ARRAY</code> of numeric values</p> </li> <li> <p><code>halfvec</code> as an <code>ARRAY</code> of numeric values</p> </li> <li> <p><code>sparsevec</code> as a <code>Struct</code> with number of dimensions and map of index to values</p> </li> </ul> </div> <div class="paragraph"> <p>There is no additional configuration required after enabling the <code>pgvector</code> extension in your database. Please see the documentation for more details on the semantic mappings (<a href="https://issues.redhat.com/browse/DBZ-8121">DBZ-8121</a>).</p> </div> </div> <div class="sect2"> <h3 id="oracle_ehcache_transaction_buffer_implementation">Oracle Ehcache transaction buffer implementation</h3> <div class="paragraph"> <p>Debezium 3 introduces as new Oracle connector transaction buffer implementation, based on Ehcache to provide off-heap storage of transaction processing and event data. This new implementation adds to the existing Java Heap, Infinispan Embedded, and Infinispan Remote buffer types.</p> </div> <div class="paragraph"> <p>To begin taking advantage of the Ehcache implementation, the <code>log.mining.buffer.type</code> must be set to <code>ehcache</code>. By default, the buffer type is <code>memory</code> to use the JVM&#8217;s heap for optimal performance.</p> </div> <div class="paragraph"> <p>In order to for the Ehcache library to start successfully, several additional configurations must be provided to explicitly configure the caches maintained by the cache manager. These new configuration options are:</p> </div> <div class="ulist"> <ul> <li> <p>log.mining.buffer.ehcache.global.config</p> </li> <li> <p>log.mining.buffer.ehcache.transactions.config</p> </li> <li> <p>log.mining.buffer.ehcache.processedtransactions.config</p> </li> <li> <p>log.mining.buffer.ehcache.schemachanges.config</p> </li> <li> <p>log.mining.buffer.ehcache.events.config</p> </li> </ul> </div> <div class="paragraph"> <p>Debezium creates the Ehcache configuration using XML, so each of these configurations provide XML snippets.</p> </div> <div class="paragraph"> <p>The <em>global</em> configuration is optional, and allows you to provide details about persistence and other Ehcache attributes, excluding specifying <code>&lt;cache&gt;</code> or <code>&lt;default-serializers&gt;</code> tags, which are handled separately. The other individual cache configurations are meant to supply the inner XML bits of a <code>&lt;cache&gt;</code> configuration tag, excluding its <code>&lt;key-type&gt;</code> and <code>&lt;value-type&gt;</code>, which are managed directly by Debezium.</p> </div> <div class="listingblock"> <div class="title">An example configuration</div> <div class="content"> <pre class="CodeRay highlight"><code data-lang="json">{
  <span class="key"><span class="delimiter">&quot;</span><span class="content">log.mining.buffer.type</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">ehcache</span><span class="delimiter">&quot;</span></span>,
  <span class="key"><span class="delimiter">&quot;</span><span class="content">log.mining.buffer.ehcache.global.config</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">&lt;persistence directory=</span><span class="char">\&quot;</span><span class="content">./data</span><span class="char">\&quot;</span><span class="content">/&gt;</span><span class="delimiter">&quot;</span></span>,
  <span class="key"><span class="delimiter">&quot;</span><span class="content">log.mining.buffer.ehcache.transactions.config</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">&lt;resources&gt;&lt;heap unit=</span><span class="char">\&quot;</span><span class="content">entries</span><span class="char">\&quot;</span><span class="content">&gt;256&lt;/heap&gt;&lt;disk unit=</span><span class="char">\&quot;</span><span class="content">B</span><span class="char">\&quot;</span><span class="content">&gt;10485760&lt;/disk&gt;&lt;/resources&gt;</span><span class="delimiter">&quot;</span></span>,
  <span class="key"><span class="delimiter">&quot;</span><span class="content">log.mining.buffer.ehcache.processedtransactions.config</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">&lt;resources&gt;&lt;heap unit=</span><span class="char">\&quot;</span><span class="content">entries</span><span class="char">\&quot;</span><span class="content">&gt;256&lt;/heap&gt;&lt;disk unit=</span><span class="char">\&quot;</span><span class="content">B</span><span class="char">\&quot;</span><span class="content">&gt;10485760&lt;/disk&gt;&lt;/resources&gt;</span><span class="delimiter">&quot;</span></span>,
  <span class="key"><span class="delimiter">&quot;</span><span class="content">log.mining.buffer.ehcache.schemachanges.config</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">&lt;resources&gt;&lt;heap unit=</span><span class="char">\&quot;</span><span class="content">entries</span><span class="char">\&quot;</span><span class="content">&gt;256&lt;/heap&gt;&lt;disk unit=</span><span class="char">\&quot;</span><span class="content">B</span><span class="char">\&quot;</span><span class="content">&gt;10485760&lt;/disk&gt;&lt;/resources&gt;</span><span class="delimiter">&quot;</span></span>,
  <span class="key"><span class="delimiter">&quot;</span><span class="content">log.mining.buffer.ehcache.events.config</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">&lt;resources&gt;&lt;heap unit=</span><span class="char">\&quot;</span><span class="content">entries</span><span class="char">\&quot;</span><span class="content">&gt;256&lt;/heap&gt;&lt;disk unit=</span><span class="char">\&quot;</span><span class="content">B</span><span class="char">\&quot;</span><span class="content">&gt;10485760&lt;/disk&gt;&lt;/resources&gt;</span><span class="delimiter">&quot;</span></span>
}</code></pre> </div> </div> <div class="paragraph"> <p>In this example, Ehcache will maintain a combination of heap and off-heap storage for the caches, maintaining at most 256 entries in heap at all times and flushing to disk. The disk caches will be stored at the relative path <code>./data</code>. This implies that you will need a persistent storage volume available when using disk-based caches.</p> </div> <div class="paragraph"> <p>This is a new feature and is experimental, so we would love your feedback on how we can improve this (<a href="https://issues.redhat.com/browse/DBZ-7758">DBZ-7758</a>).</p> </div> </div> <div class="sect2"> <h3 id="transformation_to_decode_postgresql_logical_messages">Transformation to decode PostgreSQL logical messages</h3> <div class="paragraph"> <p>PostgreSQL is unique in that you can implement the Outbox pattern without creating an outbox table, by writing logical messages directly into the WAL using <code>pg_logical_emit_message</code>. The unfortunate part is that this data is then sent to Kafka as a series of bytes, which may not always be ideal for consumers who may be looking for structured messages.</p> </div> <div class="paragraph"> <p>Debezium 3 introduces a new PostgreSQL-specific transform called <code>DecodeLogicalDecodingMessageContent</code>. This transform is specifically meant to convert the <code>pg_logical_emit_message</code> event bytes to a structured event payload that consumer applications are capable of understanding.</p> </div> <div class="paragraph"> <p>Given the following configuration:</p> </div> <div class="listingblock"> <div class="content"> <pre class="CodeRay highlight"><code data-lang="json">{
  <span class="key"><span class="delimiter">&quot;</span><span class="content">transforms</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">decode</span><span class="delimiter">&quot;</span></span>,
  <span class="key"><span class="delimiter">&quot;</span><span class="content">transforms.decode.type</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">io.debezium.connector.postgresql.transforms.DecodeLogicalDecodingMessageContent</span><span class="delimiter">&quot;</span></span>
}</code></pre> </div> </div> <div class="paragraph"> <p>The event&#8217;s <code>value</code> of an event written using <code>pg_logical_emit_message</code> before the transform would be:</p> </div> <div class="listingblock"> <div class="content"> <pre class="CodeRay highlight"><code data-lang="json">{
  <span class="key"><span class="delimiter">&quot;</span><span class="content">op</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">m</span><span class="delimiter">&quot;</span></span>,
  <span class="key"><span class="delimiter">&quot;</span><span class="content">ts_ms</span><span class="delimiter">&quot;</span></span>: <span class="integer">1723115240065</span>,
  <span class="key"><span class="delimiter">&quot;</span><span class="content">source</span><span class="delimiter">&quot;</span></span>: {
    <span class="error">.</span><span class="error">.</span><span class="error">.</span>
  },
  <span class="key"><span class="delimiter">&quot;</span><span class="content">message</span><span class="delimiter">&quot;</span></span>: {
    <span class="key"><span class="delimiter">&quot;</span><span class="content">prefix</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">test-prefix</span><span class="delimiter">&quot;</span></span>,
    <span class="key"><span class="delimiter">&quot;</span><span class="content">content</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">eyJpZCI6IDEsICJpdGVtIjogIkRlYmV6aXVtIGluIEFjdGlvbiIsICJzdGF0dXMiOiAiRU5URVJFRCIsICJxdWFudGl0eSI6IDIsICJ0b3RhbFByaWNlIjogMzkuOTh9</span><span class="delimiter">&quot;</span></span>
  }
}</code></pre> </div> </div> <div class="paragraph"> <p>After applying the transformation, the event&#8217;s <code>value</code> now looks like:</p> </div> <div class="listingblock"> <div class="content"> <pre class="CodeRay highlight"><code data-lang="json">{
  <span class="key"><span class="delimiter">&quot;</span><span class="content">op</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">c</span><span class="delimiter">&quot;</span></span>,
  <span class="key"><span class="delimiter">&quot;</span><span class="content">ts_ms</span><span class="delimiter">&quot;</span></span>: <span class="integer">1723115415729</span>,
  <span class="key"><span class="delimiter">&quot;</span><span class="content">source</span><span class="delimiter">&quot;</span></span>: {
    <span class="error">.</span><span class="error">.</span><span class="error">.</span>
  },
  <span class="key"><span class="delimiter">&quot;</span><span class="content">after</span><span class="delimiter">&quot;</span></span>: {
        <span class="key"><span class="delimiter">&quot;</span><span class="content">id</span><span class="delimiter">&quot;</span></span>: <span class="integer">1</span>,
        <span class="key"><span class="delimiter">&quot;</span><span class="content">item</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">Debezium in Action</span><span class="delimiter">&quot;</span></span>,
        <span class="key"><span class="delimiter">&quot;</span><span class="content">status</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">ENTERED</span><span class="delimiter">&quot;</span></span>,
        <span class="key"><span class="delimiter">&quot;</span><span class="content">quantity</span><span class="delimiter">&quot;</span></span>: <span class="integer">2</span>,
        <span class="key"><span class="delimiter">&quot;</span><span class="content">totalPrice</span><span class="delimiter">&quot;</span></span>: <span class="float">39.98</span>
  }
}</code></pre> </div> </div> <div class="paragraph"> <p>So you can safely implement the Outbox pattern without the physical outbox table! (<a href="https://issues.redhat.com/browse/DBZ-8103">DBZ-8103</a>).</p> </div> </div> </div> </div> <div class="sect1"> <h2 id="other-changes">Other changes</h2> <div class="sectionbody"> <div class="paragraph"> <p>Altogether, <a href="https://issues.redhat.com/issues/?jql=project%20%3D%20DBZ%20AND%20fixVersion%20%3D%203.0.0.Beta1%20ORDER%20BY%20issuetype%20DESC">48 issues</a> were fixed in this release. Here are a list of some additional noteworthy changes:</p> </div> <div class="ulist"> <ul> <li> <p>MySQL has deprecated mysql_native_password usage <a href="https://issues.redhat.com/browse/DBZ-7049">DBZ-7049</a></p> </li> <li> <p>Upgrade to Apicurio 2.5.8 or higher <a href="https://issues.redhat.com/browse/DBZ-7357">DBZ-7357</a></p> </li> <li> <p>Incremental snapshots don&#8217;t work with CloudEvent converter <a href="https://issues.redhat.com/browse/DBZ-7601">DBZ-7601</a></p> </li> <li> <p>Snapshot retrying logic falls into infinite retry loop <a href="https://issues.redhat.com/browse/DBZ-7860">DBZ-7860</a></p> </li> <li> <p>Move Debezium Conductor repository under Debezium Organisation <a href="https://issues.redhat.com/browse/DBZ-7973">DBZ-7973</a></p> </li> <li> <p>Log additional details about abandoned transactions <a href="https://issues.redhat.com/browse/DBZ-8044">DBZ-8044</a></p> </li> <li> <p>ConverterBuilder doesn&#8217;t pass Headers to be manipulated <a href="https://issues.redhat.com/browse/DBZ-8082">DBZ-8082</a></p> </li> <li> <p>Bump Debezium Server to Quarkus 3.8.5 <a href="https://issues.redhat.com/browse/DBZ-8095">DBZ-8095</a></p> </li> <li> <p>Primary Key Update/ Snapshot Race Condition <a href="https://issues.redhat.com/browse/DBZ-8113">DBZ-8113</a></p> </li> <li> <p>Support DECIMAL(p) Floating Point <a href="https://issues.redhat.com/browse/DBZ-8114">DBZ-8114</a></p> </li> <li> <p>Recalculating mining range upper bounds causes getScnFromTimestamp to fail <a href="https://issues.redhat.com/browse/DBZ-8119">DBZ-8119</a></p> </li> <li> <p>Update Oracle connector doc to describe options for restricting access permissions for the Debezium LogMiner user <a href="https://issues.redhat.com/browse/DBZ-8124">DBZ-8124</a></p> </li> <li> <p>ORA-00600: internal error code, arguments: [krvrdGetUID:2], [18446744073709551614], [], [], [], [], [], [], [], [], [], [] <a href="https://issues.redhat.com/browse/DBZ-8125">DBZ-8125</a></p> </li> <li> <p>Use SQLSTATE to handle exceptions for replication slot creation command timeout <a href="https://issues.redhat.com/browse/DBZ-8127">DBZ-8127</a></p> </li> <li> <p>ibmi Connector does not take custom properties into account anymore <a href="https://issues.redhat.com/browse/DBZ-8129">DBZ-8129</a></p> </li> <li> <p>Unpredicatable ordering of table rows during insertion causing foreign key error <a href="https://issues.redhat.com/browse/DBZ-8130">DBZ-8130</a></p> </li> <li> <p>schema_only crashes ibmi Connector <a href="https://issues.redhat.com/browse/DBZ-8131">DBZ-8131</a></p> </li> <li> <p>Support larger database.server.id values <a href="https://issues.redhat.com/browse/DBZ-8134">DBZ-8134</a></p> </li> <li> <p>Implement in process signal channel <a href="https://issues.redhat.com/browse/DBZ-8135">DBZ-8135</a></p> </li> <li> <p>Re-add check to test for if assembly profile is active <a href="https://issues.redhat.com/browse/DBZ-8138">DBZ-8138</a></p> </li> <li> <p>Validate log position method missing gtid info from SourceInfo <a href="https://issues.redhat.com/browse/DBZ-8140">DBZ-8140</a></p> </li> <li> <p>Add LogMiner start mining session retry attempt counter to logs <a href="https://issues.redhat.com/browse/DBZ-8143">DBZ-8143</a></p> </li> <li> <p>Open redo thread consistency check can lead to ORA-01291 - missing logfile <a href="https://issues.redhat.com/browse/DBZ-8144">DBZ-8144</a></p> </li> <li> <p>SchemaOnlyRecoverySnapshotter not registered as an SPI service implementation <a href="https://issues.redhat.com/browse/DBZ-8147">DBZ-8147</a></p> </li> <li> <p>Reduce logging verbosity of XStream DML event data <a href="https://issues.redhat.com/browse/DBZ-8148">DBZ-8148</a></p> </li> <li> <p>When stopping the Oracle rac node the Debezium server throws an expections - ORA-12514: Cannot connect to database and retries <a href="https://issues.redhat.com/browse/DBZ-8149">DBZ-8149</a></p> </li> <li> <p>Issue with Debezium Snapshot: DateTimeParseException with plugin pgoutput <a href="https://issues.redhat.com/browse/DBZ-8150">DBZ-8150</a></p> </li> <li> <p>JDBC connector validation fails when using record_value with no primary.key.fields <a href="https://issues.redhat.com/browse/DBZ-8151">DBZ-8151</a></p> </li> <li> <p>Vitess Connector Epoch should support parallelism &amp; shard changes <a href="https://issues.redhat.com/browse/DBZ-8154">DBZ-8154</a></p> </li> <li> <p>Add an option for <code>publication.autocreate.mode</code> to create a publication with no tables <a href="https://issues.redhat.com/browse/DBZ-8156">DBZ-8156</a></p> </li> <li> <p>Taking RAC node offline and back online can lead to thread inconsistency <a href="https://issues.redhat.com/browse/DBZ-8162">DBZ-8162</a></p> </li> <li> <p>Upgrade Outbox Extension to Quarkus 3.14.0 <a href="https://issues.redhat.com/browse/DBZ-8164">DBZ-8164</a></p> </li> </ul> </div> <div class="paragraph"> <p>A huge thank you to all contributors from the community who worked on this release: <a href="https://github.com/ashishbinu">Ashish Binu</a>, <a href="https://github.com/Bue-von-hon">Bue Von Hun</a>, <a href="https://github.com/Naros">Chris Cranford</a>, <a href="https://github.com/harveyyue">Harvey Yue</a>, <a href="https://github.com/jcechace">Jakub Cechacek</a>, <a href="https://github.com/jpechane">Jiri Pechanec</a>, <a href="https://github.com/nrkljo">Lars M. Johansson</a>, <a href="https://github.com/mfvitale">Mario Fiore Vitale</a>, <a href="https://github.com/obabec">Ondrej Babec</a>, <a href="https://github.com/rajdangwal">Rajendra Dangwal</a>, <a href="https://github.com/rk3rn3r">René Kerner</a>, <a href="https://github.com/roldanbob">Robert Roldan</a>, <a href="https://github.com/rkudryashov">Roman Kudryashov</a>, <a href="https://github.com/ryanvanhuuksloot">Ryan van Huuksloot</a>, <a href="https://github.com/twthorn">Thomas Thornton</a>, <a href="https://github.com/PlugaruT">Tudor Plugaru</a>, <a href="https://github.com/vjuranek">Vojtech Juranek</a>, and <a href="https://github.com/LucasZhanye">张展业</a>!</p> </div> </div> </div>]]></content><author><name>Chris Cranford</name></author><category term="releases"/><category term="mongodb"/><category term="mysql"/><category term="mariadb"/><category term="postgres"/><category term="sqlserver"/><category term="cassandra"/><category term="oracle"/><category term="db2"/><category term="vitess"/><category term="outbox"/><category term="spanner"/><category term="jdbc"/><category term="informix"/><category term="ibmi"/><summary type="html"><![CDATA[Even as the summer heat continues to rise, the Debezium team has some new, cool news to share. We&#8217;re pleased to announce the first beta preview of Debezium 3, 3.0.0.beta1. This release includes a host of new features and improvements, including detailed metrics for creates, updates, and deletes per table, replication slot creation timeout, support for PgVector data types with PostgreSQL, a new Oracle embedded buffer implementation based on Ehcache, and others. Let&#8217;s take a few moments and dive into these new features and how you can take advantage of them in Debezium 3!]]></summary></entry><entry><title type="html">Debezium 2.7.1.Final Released</title><link href="https://debezium.io/blog/2024/08/08/debezium-2-7-1-final-released/" rel="alternate" type="text/html" title="Debezium 2.7.1.Final Released"/><published>2024-08-08T00:00:00+00:00</published><updated>2024-08-08T00:00:00+00:00</updated><id>https://debezium.io/blog/2024/08/08/debezium-2-7-1-final-released</id><content type="html" xml:base="https://debezium.io/blog/2024/08/08/debezium-2-7-1-final-released/"><![CDATA[<div class="paragraph"> <p>I am pleased to announce the first maintenance release of Debezium 2.7, <strong>2.7.1.Final</strong>. This maintenance release focuses on addressing a number of stability issues, including improvements to ad-hoc snapshots, closing of transformations in the embedded engine, improvements to the Oracle LogMiner implementation, Vitess epoch calculations, and more&#8230;&#8203;</p> </div> <div class="paragraph"> <p>Let&#8217;s dive into these changes&#8230;&#8203;</p> </div> <div class="paragraph"> <p></p> </div> <div class="sect1"> <h2 id="important-fixes">Fixes and stability improvements</h2> <div class="sectionbody"> <div class="paragraph"> <p>Debezium 2.7.1.Final introduces several new bug fixes and stability improvements, lets take a look at a few of them.</p> </div> <div class="sect2"> <h3 id="mariadb_is_now_included_in_debezium_container_images">MariaDB is now included in Debezium container images</h3> <div class="paragraph"> <p>In Debezium 2.7.0.Final, we mistakenly missed including the new Debezium for MariaDB connector in the container images, which necessitated users to manually install the MariaDB connector. This has been fixed and Debezium 2.7.1.Final&#8217;s container images now include all connectors like they did previously (<a href="https://issues.redhat.com/browse/DBZ-8008">DBZ-8008</a>).</p> </div> </div> <div class="sect2"> <h3 id="support_for_mariadb_rename_table">Support for MariaDB <code>RENAME TABLE</code></h3> <div class="paragraph"> <p>In Debezium 2.7 with the separation of MariaDB and MySQL into their unique connectors, each also use a unique grammar to parse SQL statements. A regression was identified that the new MariaDB grammar did not support the SQL syntax for <code>RENAME TABLE</code> (<a href="https://issues.redhat.com/browse/DBZ-8066">DBZ-8066</a>). This has been fixed and is fully supported in both MySQL and MariaDB.</p> </div> </div> <div class="sect2"> <h3 id="jdbc_sink_partition_rebalance_fixed">JDBC sink partition rebalance fixed</h3> <div class="paragraph"> <p>In prior versions of the Debezium JDBC sink, users may have noticed several strange messages in their connector logs that may resemble the following output:</p> </div> <div class="exampleblock"> <div class="content"> <div class="paragraph"> <p>Ignoring invalid task provided offset topicXYZ-1 OffsetAndMetadata{offset=4966, leaderEpoch=null, metadata=''}&#8201;&#8212;&#8201;partition not assigned, assignment=[topicXYZ-1] (org.apache.kafka.connect.runtime.WorkerSinkTask:434)</p> </div> </div> </div> <div class="paragraph"> <p>Thanks to a user report (<a href="https://issues.redhat.com/browse/DBZ-7946">DBZ-7946</a>), it was identified that the JDBC sink connector was not properly handling the rebalance of partitions across multiple tasks. This regression has been fixed in <strong>2.7.1.Final</strong>, and when a partition rebalance occurs, the partition will be closed by the task that no longer will manage the partition; ergo, the above messages will no longer be written to the connector logs.</p> </div> </div> <div class="sect2"> <h3 id="ad_hoc_snapshot_improvements">Ad-hoc snapshot improvements</h3> <div class="paragraph"> <p>In Debezium 2.7, users may have noticed that if you picked the <code>insert_delete</code> watermark strategy for handling signal table entries, that the connector would eventually fail with a <code>StackOverflowError</code> (<a href="https://issues.redhat.com/browse/DBZ-8011">DBZ-8011</a>). With Debezium 2.7.1.Final or later, this regression has been fixed and users can once again use the <code>insert_delete</code> watermark strategy.</p> </div> <div class="paragraph"> <p>In addition, there was also a report where sending an ad-hoc snapshot signal that contained a regular expression that matches no database tables would cause the ad-hoc snapshot process to fail with an <code>"Unexpected result ."</code> error (<a href="https://issues.redhat.com/browse/DBZ-8050">DBZ-8050</a>). This has also been fixed so the ad-hoc snapshot will gracefully skip the signal as no matching tables were found.</p> </div> <div class="paragraph"> <p>Finally, it was also identified that ad-hoc blocking snapshots could lead to a <code>CommunicationsException</code> due to how the connection was being managed by the initial and blocking snapshot code paths (<a href="https://issues.redhat.com/browse/DBZ-8058">DBZ-8058</a>). This has been fixed in Debezium 2.7.1.Final by having the blocking snapshot validate and re-open the connection if required.</p> </div> </div> <div class="sect2"> <h3 id="embedded_engine_now_closes_transformations">Embedded engine now closes transformations</h3> <div class="paragraph"> <p>The new asynchronous embedded engine was recently released by the Debezium team and continues to improve across releases. As a part of our continuous improvements, it was identified that single message transforms did not have their <code>close()</code> method being called. This could easily lead to resource leaks depending on what the transformation does.</p> </div> <div class="paragraph"> <p>This release introduces a fix to automatically close transformations to avoid this problem (<a href="https://issues.redhat.com/browse/DBZ-8106">DBZ-8106</a>).</p> </div> </div> <div class="sect2"> <h3 id="oracle_connector_could_produce_a_nullpointerexception">Oracle connector could produce a NullPointerException</h3> <div class="paragraph"> <p>A change was added to the Debezium Oracle connector (<a href="https://issues.redhat.com/browse/DBZ-8055">DBZ-8055</a>) that to address several race concerns with Oracle LogMiner and capturing changes. Unfortunately, that change introduced a corner case where the connector would recalculate the upper mining range, and in such cases would lead to a <code>NullPointerException</code>.</p> </div> <div class="paragraph"> <p>A new fix (<a href="https://issues.redhat.com/browse/DBZ-8119">DBZ-8119</a>) was included in Debezium 2.7.1.Final to correct the problem. Oracle connector users are recommended to upgrade to 2.7.1.Final and to skip 2.7.0.Final to avoid this regression.</p> </div> </div> <div class="sect2"> <h3 id="vitess_epoch_calculations_fixed">Vitess epoch calculations fixed</h3> <div class="paragraph"> <p>It was identified that there were some corner cases where the transaction epoch value was being reset when a transaction ID was unavailable (<a href="https://issues.redhat.com/browse/DBZ-8087">DBZ-8087</a>). This is unexpected behavior as the transaction epoch should monotonically increase, and the resetting to zero broke that expectation. A fix has been added to avoid the reset and to restore the expected transaction epoch behavior.</p> </div> </div> </div> </div> <div class="sect1"> <h2 id="other-fixes">Other fixes</h2> <div class="sectionbody"> <div class="ulist"> <ul> <li> <p>Document new MariaDB connector <a href="https://issues.redhat.com/browse/DBZ-7786">DBZ-7786</a></p> </li> <li> <p>Clarify that Oracle connector does not read from physical standby <a href="https://issues.redhat.com/browse/DBZ-7895">DBZ-7895</a></p> </li> <li> <p>Issue with Hybrid mode and DDL change <a href="https://issues.redhat.com/browse/DBZ-7991">DBZ-7991</a></p> </li> <li> <p>Incorrect offset/history property mapping generated <a href="https://issues.redhat.com/browse/DBZ-8007">DBZ-8007</a></p> </li> <li> <p>Bump Infinispan to 14.0.29.Final <a href="https://issues.redhat.com/browse/DBZ-8010">DBZ-8010</a></p> </li> <li> <p>JDBC primary.key.fields cannot be empty when i set insert.mode to upsert and primary.key.mode record_value <a href="https://issues.redhat.com/browse/DBZ-8018">DBZ-8018</a></p> </li> <li> <p>Unable to acquire buffer lock, buffer queue is likely full <a href="https://issues.redhat.com/browse/DBZ-8022">DBZ-8022</a></p> </li> <li> <p>ORA-65090: operation only allowed in a container database when connecting to a non-CDB database <a href="https://issues.redhat.com/browse/DBZ-8023">DBZ-8023</a></p> </li> <li> <p>Add disclaimer that PostProcessors and CustomConverters are Debezium source connectors only <a href="https://issues.redhat.com/browse/DBZ-8031">DBZ-8031</a></p> </li> <li> <p>Added type to Prometheus JMX exporter <a href="https://issues.redhat.com/browse/DBZ-8036">DBZ-8036</a></p> </li> <li> <p>Add <code>kafka.producer</code> metrics to debezium-server jmx exporter config <a href="https://issues.redhat.com/browse/DBZ-8037">DBZ-8037</a></p> </li> <li> <p>Oracle connector inconsistency in redo log switches <a href="https://issues.redhat.com/browse/DBZ-8055">DBZ-8055</a></p> </li> <li> <p>Oracle histogram metrics are no longer printed in logs correctly <a href="https://issues.redhat.com/browse/DBZ-8068">DBZ-8068</a></p> </li> <li> <p>In hybrid log.mining.strategy reconstruction logs should be set to DEBUG <a href="https://issues.redhat.com/browse/DBZ-8070">DBZ-8070</a></p> </li> <li> <p>Support capturing BLOB column types during snapshot for MySQL/MariaDB <a href="https://issues.redhat.com/browse/DBZ-8076">DBZ-8076</a></p> </li> <li> <p>Conditionalize reference to the MySQL default value in description of <code>schema.history.internal.store.only.captured.databases.ddl</code> <a href="https://issues.redhat.com/browse/DBZ-8081">DBZ-8081</a></p> </li> <li> <p>After changing the column datatype from int to float the Debezium fails to round it and i get a null value for this field in the stream <a href="https://issues.redhat.com/browse/DBZ-8089">DBZ-8089</a></p> </li> <li> <p>MySQL and MariaDB keyword YES cannot be parsed as a column name <a href="https://issues.redhat.com/browse/DBZ-8092">DBZ-8092</a></p> </li> <li> <p>Update third-party LICENSE with LGPL forMariaDB Connector/J <a href="https://issues.redhat.com/browse/DBZ-8099">DBZ-8099</a></p> </li> <li> <p>NotificationIT tests seemingly seem to fail due to stepping on one another <a href="https://issues.redhat.com/browse/DBZ-8100">DBZ-8100</a></p> </li> <li> <p>ORA-26928 - Unable to communicate with XStream apply coordinator process should be retriable <a href="https://issues.redhat.com/browse/DBZ-8102">DBZ-8102</a></p> </li> <li> <p>Converters documentation uses incorrect examples <a href="https://issues.redhat.com/browse/DBZ-8104">DBZ-8104</a></p> </li> <li> <p>Remove reference to`additional condition` signal parameter from ad hoc snapshots doc <a href="https://issues.redhat.com/browse/DBZ-8107">DBZ-8107</a></p> </li> <li> <p>Don&#8217;t close connection after loading timescale metadata in TimescaleDb SMT <a href="https://issues.redhat.com/browse/DBZ-8109">DBZ-8109</a></p> </li> <li> <p>Primary Key Update/ Snapshot Race Condition <a href="https://issues.redhat.com/browse/DBZ-8113">DBZ-8113</a></p> </li> <li> <p>Docs: connect-log4j.properties instead log4j.properties <a href="https://issues.redhat.com/browse/DBZ-8117">DBZ-8117</a></p> </li> <li> <p>TimescaleDbDatabaseTest.shouldTransformCompressedChunks is failing <a href="https://issues.redhat.com/browse/DBZ-8123">DBZ-8123</a></p> </li> <li> <p>Update Oracle connector doc to describe options for restricting access permissions for the Debezium LogMiner user <a href="https://issues.redhat.com/browse/DBZ-8124">DBZ-8124</a></p> </li> </ul> </div> <div class="paragraph"> <p>In total there were <a href="https://issues.redhat.com/issues/?jql=project%20%3D%20DBZ%20and%20fixVersion%20%20in%20(2.7.1.Final)">37 issues</a> resolved in Debezium 2.7.1.Final. The list of changes can also be found in our <a href="https://debezium.io/releases/2.7">release notes</a>.</p> </div> <div class="paragraph"> <p>A big thank you to all the contributors from the community who worked diligently on this release: <a href="https://github.com/andreas-ibm">Andreas Martens</a>, <a href="https://github.com/jchipmunk">Andrey Pustovetov</a>, <a href="https://github.com/ani-sha">Anisha Mohanty</a>, <a href="https://github.com/bpaquet">Bertrand Paquet</a>, <a href="https://github.com/Naros">Chris Cranford</a>, <a href="https://github.com/cjmencias">Christian Jacob Mencias</a>, <a href="https://github.com/DLT1412">Duc Le Tu</a>, <a href="https://github.com/gaurav7261">Gaurav Miglani</a>, <a href="https://github.com/gunnarmorling">Gunnar Morling</a>, <a href="https://github.com/harveyyue">Harvey Yue</a>, <a href="https://github.com/HenkvanDyk">Henk van Dyk</a>, <a href="https://github.com/blcksrx">Hossein Torabi</a>, <a href="https://github.com/nicholas-fwang">Inki Hwang</a>, <a href="https://github.com/jcechace">Jakub Cechacek</a>, <a href="https://github.com/jpechane">Jiri Pechanec</a>, <a href="https://github.com/Naros">M. Gökhan Akgül</a>, <a href="https://github.com/mfvitale">Mario Fiore Vitale</a>, <a href="https://github.com/michal-k-gl">Michal Pioun</a>, <a href="https://github.com/mimaison">Mickael Maison</a>, <a href="https://github.com/nguymin4">Minh Son Nguyen</a>, <a href="https://github.com/obabec">Ondrej Babec</a>, <a href="https://github.com/missingcharacter">Ricardo Rosales</a>, <a href="https://github.com/roldanbob">Robert Roldan</a>, <a href="https://github.com/rkudryashov">Roman Kudryashov</a>, <a href="https://github.com/ryanvanhuuksloot">Ryan van Huuksloot</a>, <a href="https://github.com/joontube">Seongjoon Jeong</a>, <a href="https://github.com/twthorn">Thomas Thornton</a>, <a href="https://github.com/blcksrx">Hossein Torabi</a>, <a href="https://github.com/ramanenka">Vadzim Ramanenka</a>, <a href="https://github.com/vjuranek">Vojtech Juranek</a>, and <a href="https://github.com/j2gg0s">Yanjie Wang</a>!</p> </div> </div> </div>]]></content><author><name>Chris Cranford</name></author><category term="releases"/><category term="mongodb"/><category term="mysql"/><category term="mariadb"/><category term="postgres"/><category term="sqlserver"/><category term="cassandra"/><category term="oracle"/><category term="db2"/><category term="vitess"/><category term="outbox"/><category term="spanner"/><category term="jdbc"/><category term="informix"/><category term="ibmi"/><summary type="html"><![CDATA[I am pleased to announce the first maintenance release of Debezium 2.7, 2.7.1.Final. This maintenance release focuses on addressing a number of stability issues, including improvements to ad-hoc snapshots, closing of transformations in the embedded engine, improvements to the Oracle LogMiner implementation, Vitess epoch calculations, and more&#8230;&#8203; Let&#8217;s dive into these changes&#8230;&#8203;]]></summary></entry><entry><title type="html">Status of Debezium UI</title><link href="https://debezium.io/blog/2024/08/05/Debezium-ui-update/" rel="alternate" type="text/html" title="Status of Debezium UI"/><published>2024-08-05T00:00:00+00:00</published><updated>2024-08-05T00:00:00+00:00</updated><id>https://debezium.io/blog/2024/08/05/Debezium-ui-update</id><content type="html" xml:base="https://debezium.io/blog/2024/08/05/Debezium-ui-update/"><![CDATA[<div id="preamble"> <div class="sectionbody"> <div class="paragraph"> <p>Hello everyone, Jakub here. You may have noticed that there wasn&#8217;t much happening around Debezium UI lately. This, however, would be only partially true. We own you an explanation in this regard, so please bear with me.</p> </div> <div class="paragraph"> <p>Let&#8217;s start with the status of the <strong>current</strong> UI project. It became increasing clear that while UI for Debezium is an important part of our vision, developing a UI strictly tied to Kafka Connect is not the right direction. It was thus decided to freeze the development of the <strong>current</strong> web UI project. There were two main reasons for this decision:</p> </div> <div class="olist arabic"> <ol class="arabic"> <li> <p>The team doesn&#8217;t have the bandwidth (nor the desire) to develop a general purpose Kafka connector UI that would be on par with some of the existing offerings (e.g. Lenses). So our UI would only ever be able to work with Debezium connectors specifically.</p> </li> <li> <p>Debezium Server is gaining popularity and we would like to offer a user friendly way of managing this flavour of Debezium as well. Unfortunately, the deployment model of Debezium Server is very different from deploying Debezium as a connector.</p> </li> </ol> </div> </div> </div> <div class="sect1"> <h2 id="whats_next">What&#8217;s Next?</h2> <div class="sectionbody"> <div class="paragraph"> <p>As the previous paragraph mentioned the <strong>current</strong> UI, it&#8217;s probably not a suprise that we did not give up on the idea. Part of the decision was to explore a possibility of creating a new UI which, while still focused exclusively on Debezium, would gradually support multiple deployment models. The idea is to start with Debezium Server deployed on Kubernetes, followed by bare metal deployment of Debezium Server. At some point in the future we would like to cycle back to Kafka Connect and support also the deployment and operation of Debezium as Kafka Connect connectors.</p> </div> <div class="imageblock centered-image"> <img src="/assets/images/2024-08-05-debezium-ui-update/architecture.png" class="responsive-image" alt="Architecture"> </div> </div> </div> <div class="sect1"> <h2 id="designing_the_new_ui">Designing the New UI</h2> <div class="sectionbody"> <div class="paragraph"> <p>One of the goals we defined for ourselves when designing the new platform was to simplify the understanding of what Debezium does. For this reason, we are going to abstract away from the underlying deployment model. Instead of focusing on servers and connectors, we want to allow our users to think about Debezium in terms of data. Thus the new generation of the UI should operate with data pipelines&#8201;&#8212;&#8201;you define the source, the destination, and any data transformations.</p> </div> <div class="paragraph"> <p>These can then be composed into a deployable pipeline. Depending on the target environment (Kafka Connect, Kubernetes, bare metal), an appropriate deployment will be used.</p> </div> <div class="imageblock centered-image"> <img src="/assets/images/2024-08-05-debezium-ui-update/wireframe.png" class="responsive-image" alt="Initial Wireframe Design"> </div> <div class="paragraph"> <p>When pipeline is deployed to a Kubernetes or a bare metal machine</p> </div> <div class="ulist"> <ul> <li> <p>The Source is the configuration of the Debezium Source connector</p> </li> <li> <p>Transformations are the usual SMTs</p> </li> <li> <p>The Destination coresponds to the configuration of Debezium Server&#8217;s Sink.</p> </li> </ul> </div> <div class="paragraph"> <p>When pipeline is deployed to Kafka Connect</p> </div> <div class="ulist"> <ul> <li> <p>The Source is the configuration of the Debezium Source connector</p> </li> <li> <p>Transformations are the usual SMTs</p> </li> <li> <p>The destination is always a Kafka topic</p> </li> </ul> </div> <div class="paragraph"> <p>In the future, we could also allow our JDBC and MongoDB sink connectors to be used as destinations, allowing for truly end-to-end defined pipelines when Kafka Connect is targeted.</p> </div> </div> </div> <div class="sect1"> <h2 id="where_do_we_stand_right_now">Where Do We Stand Right Now</h2> <div class="sectionbody"> <div class="paragraph"> <p>We are at the begining of this journey. Nevetheless, there is a rough PoC prototype ready for you to <a href="https://github.com/debezium/debezium-platform-conductor/tree/main?tab=readme-ov-file#running-the-compose-kind-kafka-example">examine</a>. As already briefly mentioned, initially the plan is to target only Kubernetes as supported deployment environment, more specifically Debezium Server on Kubernetes. This choice allows us to take an advantage of our Debezium Operator.</p> </div> <div class="imageblock centered-image"> <img src="/assets/images/2024-08-05-debezium-ui-update/screenshot_list_destionations.png" class="responsive-image" alt="Screenshot: Destination types list"> </div> <div class="paragraph"> <p>We intend to introduce configuration and feature support gradually. Thus the configuration is deliberately opinionated and simplistic&#8201;&#8212;&#8201;currently all pipelines can only use ephemeral storage. In this early version, you must also set all configuration properties as simple key-value pairs. We intend to change this in the future, and as a next step, you can look forward to auto-completion of property names, and ultimately, fully specialized forms will be rendered.</p> </div> <div class="imageblock centered-image"> <img src="/assets/images/2024-08-05-debezium-ui-update/screenshot_create_source.png" class="responsive-image" alt="Screenshot: Create new source"> </div> <div class="paragraph"> <p>You can review the current status of the codebase on GitHub:</p> </div> <div class="ulist"> <ul> <li> <p><a href="https://github.com/debezium/debezium-platform-conductor/">Debezium Platform Conductor (Backend)</a></p> </li> <li> <p><a href="https://github.com/debezium/debezium-platform-stage/">Debezium Platform Stage (Frontend)</a></p> </li> </ul> </div> </div> </div> <div class="sect1"> <h2 id="we_need_your_help">We need your help!</h2> <div class="sectionbody"> <div class="paragraph"> <p>At the end of this short report, we would like to ask you to try this early PoC and let us know your opinion. We would especially appreciate if you could let as know your answers to the following questions:</p> </div> <div class="ulist"> <ul> <li> <p>What features are a must for you?</p> </li> <li> <p>What features would you consider nice to have?</p> </li> <li> <p>What is your visual impression?</p> </li> </ul> </div> <div class="paragraph"> <p>Thank you and expect to hear from us soon with more updates to come!</p> </div> </div> </div>]]></content><author><name>Čecháček Jakub</name></author><category term="debezium"/><category term="ui"/><category term="features"/><category term="kubernetes"/><category term="operator"/><category term="debezium-server"/><summary type="html"><![CDATA[Hello everyone, Jakub here. You may have noticed that there wasn&#8217;t much happening around Debezium UI lately. This, however, would be only partially true. We own you an explanation in this regard, so please bear with me. Let&#8217;s start with the status of the current UI project. It became increasing clear that while UI for Debezium is an important part of our vision, developing a UI strictly tied to Kafka Connect is not the right direction. It was thus decided to freeze the development of the current web UI project. There were two main reasons for this decision: The team doesn&#8217;t have the bandwidth (nor the desire) to develop a general purpose Kafka connector UI that would be on par with some of the existing offerings (e.g. Lenses). So our UI would only ever be able to work with Debezium connectors specifically. Debezium Server is gaining popularity and we would like to offer a user friendly way of managing this flavour of Debezium as well. Unfortunately, the deployment model of Debezium Server is very different from deploying Debezium as a connector. What&#8217;s Next? As the previous paragraph mentioned the current UI, it&#8217;s probably not a suprise that we did not give up on the idea. Part of the decision was to explore a possibility of creating a new UI which, while still focused exclusively on Debezium, would gradually support multiple deployment models. The idea is to start with Debezium Server deployed on Kubernetes, followed by bare metal deployment of Debezium Server. At some point in the future we would like to cycle back to Kafka Connect and support also the deployment and operation of Debezium as Kafka Connect connectors. Designing the New UI One of the goals we defined for ourselves when designing the new platform was to simplify the understanding of what Debezium does. For this reason, we are going to abstract away from the underlying deployment model. Instead of focusing on servers and connectors, we want to allow our users to think about Debezium in terms of data. Thus the new generation of the UI should operate with data pipelines&#8201;&#8212;&#8201;you define the source, the destination, and any data transformations. These can then be composed into a deployable pipeline. Depending on the target environment (Kafka Connect, Kubernetes, bare metal), an appropriate deployment will be used. When pipeline is deployed to a Kubernetes or a bare metal machine The Source is the configuration of the Debezium Source connector Transformations are the usual SMTs The Destination coresponds to the configuration of Debezium Server&#8217;s Sink. When pipeline is deployed to Kafka Connect The Source is the configuration of the Debezium Source connector Transformations are the usual SMTs The destination is always a Kafka topic In the future, we could also allow our JDBC and MongoDB sink connectors to be used as destinations, allowing for truly end-to-end defined pipelines when Kafka Connect is targeted. Where Do We Stand Right Now We are at the begining of this journey. Nevetheless, there is a rough PoC prototype ready for you to examine. As already briefly mentioned, initially the plan is to target only Kubernetes as supported deployment environment, more specifically Debezium Server on Kubernetes. This choice allows us to take an advantage of our Debezium Operator. We intend to introduce configuration and feature support gradually. Thus the configuration is deliberately opinionated and simplistic&#8201;&#8212;&#8201;currently all pipelines can only use ephemeral storage. In this early version, you must also set all configuration properties as simple key-value pairs. We intend to change this in the future, and as a next step, you can look forward to auto-completion of property names, and ultimately, fully specialized forms will be rendered. You can review the current status of the codebase on GitHub: Debezium Platform Conductor (Backend) Debezium Platform Stage (Frontend) We need your help! At the end of this short report, we would like to ask you to try this early PoC and let us know your opinion. We would especially appreciate if you could let as know your answers to the following questions: What features are a must for you? What features would you consider nice to have? What is your visual impression? Thank you and expect to hear from us soon with more updates to come!]]></summary></entry><entry><title type="html">Debezium 3.0.0.Alpha2 Released</title><link href="https://debezium.io/blog/2024/08/02/debezium-3.0-alpha2-released/" rel="alternate" type="text/html" title="Debezium 3.0.0.Alpha2 Released"/><published>2024-08-02T00:00:00+00:00</published><updated>2024-08-02T00:00:00+00:00</updated><id>https://debezium.io/blog/2024/08/02/debezium-3.0-alpha2-released</id><content type="html" xml:base="https://debezium.io/blog/2024/08/02/debezium-3.0-alpha2-released/"><![CDATA[<div class="paragraph"> <p>As the summer temperatures continue to rise, the Debezium community is pleased to announce Debezium <strong>3.0.0.Alpha2</strong> is now available for testing.</p> </div> <div class="paragraph"> <p>This release includes a host of new features and improvements, including being built on top of Kafka 3.8, the relocation of the JDBC sink connector, custom converters support in Debezium Server, and several improvements to our community-led connectors.</p> </div> <div class="paragraph"> <p></p> </div> <div class="sect1"> <h2 id="breaking-changes">Breaking changes</h2> <div class="sectionbody"> <div class="paragraph"> <p>With any new major release of software, there is often several breaking changes. The Debezium <strong>3.0.0.Alpha2</strong> release is no exception, so let&#8217;s discuss the major changes you should be aware about.</p> </div> <div class="sect2"> <h3 id="built_on_kafka_3_8">Built on Kafka 3.8</h3> <div class="paragraph"> <p>This release moves to Kafka 3.8 as our baseline for testing and building Debezium. Kafka 3.8 changed a number of internal APIs that needed to be adapted for Debezium&#8217;s use (<a href="https://issues.redhat.com/browse/DBZ-8105">DBZ-8105</a>).</p> </div> <div class="paragraph"> <p>For most users, this change has no impact; however, if you are extending Debezium, it&#8217;s important to be aware of these changes.</p> </div> </div> </div> </div> <div class="sect1"> <h2 id="new-features-and-improvements">New features and improvements</h2> <div class="sectionbody"> <div class="paragraph"> <p>The upgrade to Debezium <strong>3.0.0.Alpha2</strong> introduces a number of new improvements to several components:</p> </div> <div class="sect2"> <h3 id="new-features-jdbc">JDBC Sink</h3> <div class="sect3"> <h4 id="relocation_of_jdbc_sink_repository">Relocation of JDBC sink repository</h4> <div class="paragraph"> <p>The JDBC sink repository has been relocated from <a href="https://github.com/debezium/debezium-connector-jdbc">debezium-connector-jdbc</a> to <a href="https://github.com/debezium/debezium">debezium</a> main repository (<a href="https://issues.redhat.com/browse/DBZ-8008">DBZ-8008</a>). With the introduction of the MongoDB sink connector in Debezium 3.0.0.Alpha1, this allows the team to easily share common contracts across our sink connectors.</p> </div> <div class="paragraph"> <p>Moving forward, to raise pull requests for the JDBC sink, please use the main Debezium repository, as the old repository will be archived and placed into read-only mode after Debezium 2.7.1.Final this week.</p> </div> </div> </div> <div class="sect2"> <h3 id="new-features-server">Debezium Server</h3> <div class="sect3"> <h4 id="custom_converter_types_support">Custom converter types support</h4> <div class="paragraph"> <p>In prior releases of Debezium Server, there were a finite number of converters that could be used for headers, keys, and values. These included <code>Json</code>, <code>JsonByteArray</code>, <code>CloudEvents</code>, <code>Avro</code>, <code>Protobuf</code>, <code>Binary</code>, and <code>SimpleString</code>. While these often satisfied a vast majority of use cases, it&#8217;s not uncommon that someone may have a unique requirement specific to their environment that is outside these options.</p> </div> <div class="paragraph"> <p>In this release, a new <code>ClientProvided</code> converter option has been added, which allows for extending the header, key, and value converters with a custom, user-supplied implementation (<a href="https://issues.redhat.com/browse/DBZ-8040">DBZ-8040</a>).</p> </div> </div> </div> <div class="sect2"> <h3 id="new-features-spanner">Google Spanner</h3> <div class="sect3"> <h4 id="support_for_32_bit_floats">Support for 32-bit floats</h4> <div class="paragraph"> <p>The Google Spanner database introduced support for a 32-bit float data type. The Debezium Google Spanner connector has been adjusted to support this new data type (<a href="https://issues.redhat.com/browse/DBZ-8043">DBZ-8043</a>).</p> </div> </div> </div> <div class="sect2"> <h3 id="new-features-vitess">Vitess</h3> <div class="sect3"> <h4 id="empty_shard_support">Empty shard support</h4> <div class="paragraph"> <p>In Vitess, it is possible for a keyspace to have shards that have no tablets. Debezium for Vitess has improved working with this use case, and now gracefully handles such a keyspace without fault (<a href="https://issues.redhat.com/browse/DBZ-8053">DBZ-8053</a>).</p> </div> </div> </div> </div> </div> <div class="sect1"> <h2 id="other-changes">Other changes</h2> <div class="sectionbody"> <div class="ulist"> <ul> <li> <p>Embedded Infinispan tests fail to start with Java 23 <a href="https://issues.redhat.com/browse/DBZ-7840">DBZ-7840</a></p> </li> <li> <p>Clarify that Oracle connector does not read from physical standby <a href="https://issues.redhat.com/browse/DBZ-7895">DBZ-7895</a></p> </li> <li> <p>Bump Infinispan to 14.0.29.Final <a href="https://issues.redhat.com/browse/DBZ-8010">DBZ-8010</a></p> </li> <li> <p>StackOverflow exception on incremental snapshot <a href="https://issues.redhat.com/browse/DBZ-8011">DBZ-8011</a></p> </li> <li> <p>Write a blog post about async engine <a href="https://issues.redhat.com/browse/DBZ-8013">DBZ-8013</a></p> </li> <li> <p>Test offset/history store configurations <a href="https://issues.redhat.com/browse/DBZ-8015">DBZ-8015</a></p> </li> <li> <p>JDBC primary.key.fields cannot be empty when i set insert.mode to upsert and primary.key.mode record_value <a href="https://issues.redhat.com/browse/DBZ-8018">DBZ-8018</a></p> </li> <li> <p>Unable to acquire buffer lock, buffer queue is likely full <a href="https://issues.redhat.com/browse/DBZ-8022">DBZ-8022</a></p> </li> <li> <p>Add Status ObservedGeneration to Operator <a href="https://issues.redhat.com/browse/DBZ-8025">DBZ-8025</a></p> </li> <li> <p>Release process sets incorrect images for k8s for the next development version <a href="https://issues.redhat.com/browse/DBZ-8041">DBZ-8041</a></p> </li> <li> <p>Use recreate as (default) rollout strategy for deployments <a href="https://issues.redhat.com/browse/DBZ-8047">DBZ-8047</a></p> </li> <li> <p>"Unexpected input: ." when snapshot incremental empty Database <a href="https://issues.redhat.com/browse/DBZ-8050">DBZ-8050</a></p> </li> <li> <p>Debezium Operator Using RollingUpdate Strategy <a href="https://issues.redhat.com/browse/DBZ-8051">DBZ-8051</a></p> </li> <li> <p>Debezium Operator Using RollingUpdate Strategy <a href="https://issues.redhat.com/browse/DBZ-8052">DBZ-8052</a></p> </li> <li> <p>Refactor LogMining implementation to allow alternative cache implementations <a href="https://issues.redhat.com/browse/DBZ-8054">DBZ-8054</a></p> </li> <li> <p>Oracle connector inconsistency in redo log switches <a href="https://issues.redhat.com/browse/DBZ-8055">DBZ-8055</a></p> </li> <li> <p>Blocking snapshot can fail due to CommunicationsException <a href="https://issues.redhat.com/browse/DBZ-8058">DBZ-8058</a></p> </li> <li> <p>FakeDNS not working with JDK version &gt; 18 <a href="https://issues.redhat.com/browse/DBZ-8059">DBZ-8059</a></p> </li> <li> <p>Debezium Operator with a provided Service Account doesn&#8217;t spin up deployment <a href="https://issues.redhat.com/browse/DBZ-8061">DBZ-8061</a></p> </li> <li> <p>Upgrade postgres server version to 15 <a href="https://issues.redhat.com/browse/DBZ-8062">DBZ-8062</a></p> </li> <li> <p>Standard Webhooks signatures for HTTP sink <a href="https://issues.redhat.com/browse/DBZ-8063">DBZ-8063</a></p> </li> <li> <p>ParsingException (MySQL/MariaDB): rename table syntax <a href="https://issues.redhat.com/browse/DBZ-8066">DBZ-8066</a></p> </li> <li> <p>Disable DebeziumResourceNoTopicCreationIT - no longer compatible with Java 21 <a href="https://issues.redhat.com/browse/DBZ-8067">DBZ-8067</a></p> </li> <li> <p>Oracle histogram metrics are no longer printed in logs correctly <a href="https://issues.redhat.com/browse/DBZ-8068">DBZ-8068</a></p> </li> <li> <p>Vitess-connector should provide a topic naming strategy that supports separate connectors per-table <a href="https://issues.redhat.com/browse/DBZ-8069">DBZ-8069</a></p> </li> <li> <p>In hybrid log.mining.strategy reconstruction logs should be set to DEBUG <a href="https://issues.redhat.com/browse/DBZ-8070">DBZ-8070</a></p> </li> <li> <p>Speed-up PostgresShutdownIT <a href="https://issues.redhat.com/browse/DBZ-8075">DBZ-8075</a></p> </li> <li> <p>Support capturing BLOB column types during snapshot for MySQL/MariaDB <a href="https://issues.redhat.com/browse/DBZ-8076">DBZ-8076</a></p> </li> <li> <p>Standard Webhooks auth secret config value is not marked as PASSWORD_PATTERN <a href="https://issues.redhat.com/browse/DBZ-8078">DBZ-8078</a></p> </li> <li> <p>Vitess transaction Epoch should not reset to zero when tx ID is missing <a href="https://issues.redhat.com/browse/DBZ-8087">DBZ-8087</a></p> </li> <li> <p>Add MariaDB to debezium/connect image <a href="https://issues.redhat.com/browse/DBZ-8088">DBZ-8088</a></p> </li> <li> <p>After changing the column datatype from int to float the Debezium fails to round it and i get a null value for this field in the stream <a href="https://issues.redhat.com/browse/DBZ-8089">DBZ-8089</a></p> </li> <li> <p>MySQL and MariaDB keyword YES cannot be parsed as a column name <a href="https://issues.redhat.com/browse/DBZ-8092">DBZ-8092</a></p> </li> <li> <p>Update third-party LICENSE with LGPL forMariaDB Connector/J <a href="https://issues.redhat.com/browse/DBZ-8099">DBZ-8099</a></p> </li> <li> <p>NotificationIT tests seemingly seem to fail due to stepping on one another <a href="https://issues.redhat.com/browse/DBZ-8100">DBZ-8100</a></p> </li> <li> <p>ORA-26928 - Unable to communicate with XStream apply coordinator process should be retriable <a href="https://issues.redhat.com/browse/DBZ-8102">DBZ-8102</a></p> </li> <li> <p>Transformations are not closed in emebdded engine <a href="https://issues.redhat.com/browse/DBZ-8106">DBZ-8106</a></p> </li> <li> <p>Rabbitmq native stream Failed <a href="https://issues.redhat.com/browse/DBZ-8108">DBZ-8108</a></p> </li> <li> <p>Don&#8217;t close connection after loading timescale metadata in TimescaleDb SMT <a href="https://issues.redhat.com/browse/DBZ-8109">DBZ-8109</a></p> </li> </ul> </div> <div class="paragraph"> <p>In total, <a href="https://issues.redhat.com/issues/?jql=project%20%3D%20DBZ%20and%20fixVersion%20%20in%20(3.0.0.Alpha2)">43 issues</a> were resolved in Debezium 3.0.0.Alpha2. The list of changes can also be found in our <a href="https://debezium.io/releases/3.0">release notes</a>.</p> </div> <div class="paragraph"> <p>A big thank you to all the contributors from the community who worked diligently on this release: <a href="https://github.com/jchipmunk">Andrey Pustovetov</a>, <a href="https://github.com/ani-sha">Anisha Mohanty</a>, <a href="https://github.com/arawind">Aravind</a>, <a href="https://github.com/bpaquet">Bertrand Paquet</a>, <a href="https://github.com/Naros">Chris Cranford</a>, <a href="https://github.com/cjmencias">Christian Jacob Mencias</a>, <a href="https://github.com/DLT1412">Duc Le Tu</a>, <a href="https://github.com/ganesh-bankar">Ganesh Bankar</a>, <a href="https://github.com/gaurav7261">Gaurav Miglani</a>, <a href="https://github.com/gunnarmorling">Gunnar Morling</a>, <a href="https://github.com/harveyyue">Harvey Yue</a>, <a href="https://github.com/HenkvanDyk">Henk van Dyk</a>, <a href="https://github.com/blcksrx">Hossein Torabi</a>, <a href="https://github.com/nicholas-fwang">Inki Hwang</a>, <a href="https://github.com/jcechace">Jakub Cechacek</a>, <a href="https://github.com/jeremy-l-ford">Jeremy Ford</a>, <a href="https://github.com/jpechane">Jiri Pechanec</a>, <a href="https://github.com/Naros">M. Gökhan Akgül</a>, <a href="https://github.com/mfvitale">Mario Fiore Vitale</a>, <a href="https://github.com/michal-k-gl">Michal Pioun</a>, <a href="https://github.com/mimaison">Mickael Maison</a>, <a href="https://github.com/nguymin4">Minh Son Nguyen</a>, <a href="https://github.com/obabec">Ondrej Babec</a>, <a href="https://github.com/roldanbob">Robert Roldan</a>, <a href="https://github.com/rkudryashov">Roman Kudryashov</a>, <a href="https://github.com/ryanvanhuuksloot">Ryan van Huuksloot</a>, <a href="https://github.com/joontube">Seongjoon Jeong</a>, <a href="https://github.com/twthorn">Thomas Thornton</a>, <a href="https://github.com/TimoWilhelm">Timo Wilhelm</a>, <a href="https://github.com/blcksrx">Hossein Torabi</a>, <a href="https://github.com/ramanenka">Vadzim Ramanenka</a>, <a href="https://github.com/vjuranek">Vojtech Juranek</a>, <a href="https://github.com/j2gg0s">Yanjie Wang</a>, and <a href="https://github.com/LucasZhanye">张展业</a>!</p> </div> </div> </div> <div class="sect1"> <h2 id="whats-next">What&#8217;s next &amp; Outlook</h2> <div class="sectionbody"> <div class="paragraph"> <p>We are about half-way through the Debezium 3.0 release cycle, with many more new features still in the works. As we continue to work through these features, we will continue to update Debezium 2.7 with bug fixes and various improvements. You can expect the first maintenance release 2.7.1.Final for Debezium later this week.</p> </div> <div class="paragraph"> <p>Please check out our <a href="https://debezium.io/roadmap">road map</a> for more details, and get involved in the conversation. You can contact us on the <a href="https://groups.google.com/g/debezium">mailing list</a> or <a href="https://debezium.zulipchat.com/login/#narrow/stream/302529-users">Zulip chat</a> if you have any questions or suggestions about anything Debezuim.</p> </div> <div class="paragraph"> <p>Until next time, stay cool and safe&#8230;&#8203;</p> </div> </div> </div>]]></content><author><name>Chris Cranford</name></author><category term="releases"/><category term="mongodb"/><category term="mysql"/><category term="mariadb"/><category term="postgres"/><category term="sqlserver"/><category term="cassandra"/><category term="oracle"/><category term="db2"/><category term="vitess"/><category term="outbox"/><category term="spanner"/><category term="jdbc"/><category term="informix"/><category term="ibmi"/><summary type="html"><![CDATA[As the summer temperatures continue to rise, the Debezium community is pleased to announce Debezium 3.0.0.Alpha2 is now available for testing. This release includes a host of new features and improvements, including being built on top of Kafka 3.8, the relocation of the JDBC sink connector, custom converters support in Debezium Server, and several improvements to our community-led connectors.]]></summary></entry><entry><title type="html">Debezium 3.0.0.Alpha1 Released</title><link href="https://debezium.io/blog/2024/07/11/debezium-3.0-alpha1-released/" rel="alternate" type="text/html" title="Debezium 3.0.0.Alpha1 Released"/><published>2024-07-11T00:00:00+00:00</published><updated>2024-07-11T00:00:00+00:00</updated><id>https://debezium.io/blog/2024/07/11/debezium-3.0-alpha1-released</id><content type="html" xml:base="https://debezium.io/blog/2024/07/11/debezium-3.0-alpha1-released/"><![CDATA[<div class="paragraph"> <p>We are happy to announce the first pre-release of Debezium 3, <strong>3.0.0.Alpha1</strong>. This release, albeit smaller than our normal pre-releases, is highly focused on a few key points, such as testing the release process with Java 17/21; however, it also includes several new features. Let&#8217;s take a moment and talk about the upcoming breaking changes in-depth and the new features you will find.</p> </div> <div class="paragraph"> <p></p> </div> <div class="sect1"> <h2 id="breaking-changes">Breaking changes</h2> <div class="sectionbody"> <div class="paragraph"> <p>With any new major release of software, there is often several breaking changes. The Debezium <strong>3.0.0.Alpha1</strong> release is no exception, so lets discuss the major changes you should be aware about.</p> </div> <div class="sect2"> <h3 id="java_and_maven_requirements_changed">Java and Maven requirements changed</h3> <div class="paragraph"> <p>This release also shifts the Java requirements needed to both build and run Debezium. In addition, this release also requires a later version of Maven for building Debezium from source.</p> </div> <div class="paragraph"> <p>If you intend to build Debezium from source for any reason, all Debezium projects require using Java 21 to build and Maven 3.9.8. This includes the main repository, community-led repositories, Debezium Server, Operator, etc. If you attempt to build Debezium from source using a version of Java that is less-than Java 21, the build will report a Java version error, instructing you to use Java 21 or higher.</p> </div> <div class="paragraph"> <p>All Debezium connectors require a baseline of <strong>Java 17</strong> for runtime. This means if you are not building from source but simply deploying the connectors on runtimes such as Kafka Connect, then <strong>Java 17</strong> is sufficient.</p> </div> <div class="paragraph"> <p>If you are using Debezium Server, Debezium Operator, or the Debezium Quarkus Outbox Extension, these components all require <strong>Java 21</strong> for both runtime and build-time.</p> </div> <div class="paragraph"> <p>Please see the following chart from an at-a-glance view of the Java and Maven requirements</p> </div> <table class="tableblock frame-all grid-all stretch"> <caption class="title">Table 1. Requirements by component</caption> <colgroup> <col style="width: 25%;"> <col style="width: 25%;"> <col style="width: 25%;"> <col style="width: 25%;"> </colgroup> <thead> <tr> <th class="tableblock halign-left valign-top">Component</th> <th class="tableblock halign-left valign-top">Java (Runtime)</th> <th class="tableblock halign-left valign-top">Java (Building)</th> <th class="tableblock halign-left valign-top">Maven (Building)</th> </tr> </thead> <tbody> <tr> <td class="tableblock halign-left valign-top"><p class="tableblock">Debezium Server</p></td> <td class="tableblock halign-left valign-top"><p class="tableblock">Java 21+</p></td> <td class="tableblock halign-left valign-top"><p class="tableblock">Java 21+</p></td> <td class="tableblock halign-left valign-top"><p class="tableblock">3.9.8+</p></td> </tr> <tr> <td class="tableblock halign-left valign-top"><p class="tableblock">Debezium Operator</p></td> <td class="tableblock halign-left valign-top"><p class="tableblock">Java 21+</p></td> <td class="tableblock halign-left valign-top"><p class="tableblock">Java 21+</p></td> <td class="tableblock halign-left valign-top"><p class="tableblock">3.9.8+</p></td> </tr> <tr> <td class="tableblock halign-left valign-top"><p class="tableblock">Debezium Quarkus Outbox Extension</p></td> <td class="tableblock halign-left valign-top"><p class="tableblock">Java 21+</p></td> <td class="tableblock halign-left valign-top"><p class="tableblock">Java 21+</p></td> <td class="tableblock halign-left valign-top"><p class="tableblock">3.9.8+</p></td> </tr> <tr> <td class="tableblock halign-left valign-top"><p class="tableblock">Debezium Connectors<br> <em>Embedded Engine or Kafka Connect</em></p></td> <td class="tableblock halign-left valign-top"><p class="tableblock">Java 17+</p></td> <td class="tableblock halign-left valign-top"><p class="tableblock">Java 21+</p></td> <td class="tableblock halign-left valign-top"><p class="tableblock">3.9.8+</p></td> </tr> </tbody> </table> </div> </div> </div> <div class="sect1"> <h2 id="new-features-and-improvements">New features and improvements</h2> <div class="sectionbody"> <div class="paragraph"> <p>The upgrade to Debezium <strong>3.0.0.Alpha1</strong> introduces several new features and improvements in several components:</p> </div> <div class="sect2"> <h3 id="new-features-mongodb">MongoDB</h3> <div class="sect3"> <h4 id="mongodb_sink_connector">MongoDB Sink Connector</h4> <div class="paragraph"> <p>Debezium introduced its first sink-based connector in Debezium 2.2, just over a year ago and we&#8217;re pleased to announce the inclusion of another sink-based connector for MongoDB as a part of Debezium 3.</p> </div> <div class="paragraph"> <p>Unlike the JDBC sink relational connector that requires an additional plug-in to be installed to use it, the MongoDB sink connector is bundled alongside the MongoDB source connector in the same artifact. So if you have already installed or use the MongoDB source connector and are using Debezium 3 or later, you also have the MongoDB sink connector.</p> </div> <div class="paragraph"> <p>The configuration to get started with the MongoDB is quite straightforward, here&#8217;s an example:</p> </div> <div class="listingblock"> <div class="content"> <pre class="CodeRay highlight"><code data-lang="json">{
  <span class="key"><span class="delimiter">&quot;</span><span class="content">connector.class</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">io.debezium.connector.mongodb.MongoDbSinkConnector</span><span class="delimiter">&quot;</span></span>,
  <span class="key"><span class="delimiter">&quot;</span><span class="content">connection.string</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">...</span><span class="delimiter">&quot;</span></span>,
  <span class="key"><span class="delimiter">&quot;</span><span class="content">topics</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">topic1,topic2</span><span class="delimiter">&quot;</span></span>,
  <span class="key"><span class="delimiter">&quot;</span><span class="content">sink.database</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">targetdb</span><span class="delimiter">&quot;</span></span>,
}</code></pre> </div> </div> <div class="paragraph"> <p>The <code>connection.string</code> and <code>sink.database</code> configuration properties are mandatory. These define the details for connecting to the target MongoDB database and the name of the target database where the changes will be written.</p> </div> <div class="paragraph"> <p>Additionally, the <code>topics</code> configuration property is mandatory by Kafka Connect, and it describes a comma-separated list of regular expressions for the topics that the sink connector will observe.</p> </div> <div class="admonitionblock note"> <table> <tr> <td class="icon"> <i class="fa icon-note" title="Note"></i> </td> <td class="content"> <div class="paragraph"> <p>Documentation for this connector is still a work-in-progress, so if you have any questions or problems, don&#8217;t hesitate to reach out to the team on our Zulip chat or Mailing List.</p> </div> </td> </tr> </table> </div> </div> </div> </div> </div> <div class="sect1"> <h2 id="other-changes">Other changes</h2> <div class="sectionbody"> <div class="ulist"> <ul> <li> <p>Debezium postgres jdbc sink not handling infinity values <a href="https://issues.redhat.com/browse/DBZ-7920">DBZ-7920</a></p> </li> <li> <p>JdbcSinkTask doesn&#8217;t clear offsets on stop <a href="https://issues.redhat.com/browse/DBZ-7946">DBZ-7946</a></p> </li> <li> <p>ibmi as400 connector config isn&#8217;t prefixed with "database." <a href="https://issues.redhat.com/browse/DBZ-7955">DBZ-7955</a></p> </li> <li> <p>Duplicate downstream annotation comments incorrectly refer to Db2 connector <a href="https://issues.redhat.com/browse/DBZ-7968">DBZ-7968</a></p> </li> <li> <p>Issue with Hybrid mode and DDL change <a href="https://issues.redhat.com/browse/DBZ-7991">DBZ-7991</a></p> </li> <li> <p>Extends process of finding Bundle path <a href="https://issues.redhat.com/browse/DBZ-7992">DBZ-7992</a></p> </li> <li> <p>Incorrect offset/history property mapping generatated <a href="https://issues.redhat.com/browse/DBZ-8007">DBZ-8007</a></p> </li> <li> <p>Debezium Server Operator on minikube with java.lang.NullPointerException': java.lang.NullPointerException <a href="https://issues.redhat.com/browse/DBZ-8019">DBZ-8019</a></p> </li> <li> <p>ORA-65090: operation only allowed in a container database when connecting to a non-CDB database <a href="https://issues.redhat.com/browse/DBZ-8023">DBZ-8023</a></p> </li> <li> <p>Added type to Prometheus JMX exporter <a href="https://issues.redhat.com/browse/DBZ-8036">DBZ-8036</a></p> </li> <li> <p>Add <code>kafka.producer</code> metrics to debezium-server jmx exporter config <a href="https://issues.redhat.com/browse/DBZ-8037">DBZ-8037</a></p> </li> <li> <p>Support FLOAT32 type in debezium-connector-spanner <a href="https://issues.redhat.com/browse/DBZ-8043">DBZ-8043</a></p> </li> </ul> </div> <div class="paragraph"> <p>In total, <a href="https://issues.redhat.com/issues/?jql=project%20%3D%20DBZ%20and%20fixVersion%20%20in%20(3.0.0.Alpha1)">20 issues</a> were resolved in Debezium 3.0.0.Alpha1. The list of changes can also be found in our <a href="https://debezium.io/releases/3.0">release notes</a>.</p> </div> <div class="paragraph"> <p>A big thank you to all the contributors from the community who worked diligently on this release: <a href="https://github.com/andreas-ibm">Andreas Martens</a>, <a href="https://github.com/arawind">Aravind</a>, <a href="https://github.com/Naros">Chris Cranford</a>, <a href="https://github.com/jcechace">Jakub Cechacek</a>, <a href="https://github.com/jpechane">Jiri Pechanec</a>, <a href="https://github.com/mfvitale">Mario Fiore Vitale</a>, <a href="https://github.com/obabec">Ondrej Babec</a>, <a href="https://github.com/rk3rn3r">René Kerner</a>, <a href="https://github.com/missingcharacter">Ricardo Rosales</a>, <a href="https://github.com/roldanbob">Robert Roldan</a>, <a href="https://github.com/ryanvanhuuksloot">Ryan van Huuksloot</a>, and <a href="https://github.com/ShuranZhang">Shuran Zhang</a>!</p> </div> </div> </div> <div class="sect1"> <h2 id="whats-next">What&#8217;s next &amp; Outlook</h2> <div class="sectionbody"> <div class="paragraph"> <p>With Debezium 2.7.0.Final released, we&#8217;re actively looking at the reports from the community and addressing any critical bugs or regressions that were not identified throughout development. If you believe you&#8217;ve spotted a bug or regression, please log a <a href="https://issues.redhat.com/projects/DBZ">Jira issue</a> so that these can be tracked and addressed. Of course, contributions for these are much appreciated, if you have the bandwidth.</p> </div> <div class="paragraph"> <p>While this pre-release is smaller than we generally prefer, it&#8217;s focus was primarily on the inclusion of the MongoDB sink connector and the move to Java 17/21. There are still many features in the pipeline that will be coming in a future build of Debezium, including but not limited to:</p> </div> <div class="ulist"> <ul> <li> <p>Kafka 3.1+ as baseline</p> </li> <li> <p>New off-heap Oracle cache implementations based on EhCache &amp; Hazelcast</p> </li> <li> <p>Exactly-once semantics support for other relational connectors</p> </li> <li> <p>and more</p> </li> </ul> </div> <div class="paragraph"> <p>This list represents a quick glance view at just what&#8217;s at the top of our queue, and is subject to change. If you&#8217;d like to get involved in the conversation about Debezium 3.0 and the next evolution of the project, contact us on the <a href="https://groups.google.com/g/debezium">mailing list</a> or <a href="https://debezium.zulipchat.com/login/#narrow/stream/302529-users">Zulip chat</a>. As always, please review our <a href="https://debezium.io/roadmap">road map</a> for more details.</p> </div> <div class="paragraph"> <p>For now, that&#8217;s it from our side, enjoy the summer and be safe! Until next time&#8230;&#8203;</p> </div> </div> </div>]]></content><author><name>Chris Cranford</name></author><category term="releases"/><category term="mongodb"/><category term="mysql"/><category term="mariadb"/><category term="postgres"/><category term="sqlserver"/><category term="cassandra"/><category term="oracle"/><category term="db2"/><category term="vitess"/><category term="outbox"/><category term="spanner"/><category term="jdbc"/><category term="informix"/><category term="ibmi"/><summary type="html"><![CDATA[We are happy to announce the first pre-release of Debezium 3, 3.0.0.Alpha1. This release, albeit smaller than our normal pre-releases, is highly focused on a few key points, such as testing the release process with Java 17/21; however, it also includes several new features. Let&#8217;s take a moment and talk about the upcoming breaking changes in-depth and the new features you will find.]]></summary></entry><entry><title type="html">Debezium asynchronous engine</title><link href="https://debezium.io/blog/2024/07/08/async-embedded-engine/" rel="alternate" type="text/html" title="Debezium asynchronous engine"/><published>2024-07-08T00:00:00+00:00</published><updated>2024-07-08T00:00:00+00:00</updated><id>https://debezium.io/blog/2024/07/08/async-embedded-engine</id><content type="html" xml:base="https://debezium.io/blog/2024/07/08/async-embedded-engine/"><![CDATA[<div class="paragraph"> <p>Debezium provides a way to run the connectors directly within Debezium from the very beginning of the project. The way how it was provided has changed over the time and it still evolves. This article will describe another evolution step in this regard - new implementation of Debezium engine.</p> </div> <div class="paragraph"> <p></p> </div> <div class="sect1"> <h2 id="a_bit_of_history">A bit of history</h2> <div class="sectionbody"> <div class="paragraph"> <p>The capability to run the connector directly within Debezium was not present from the first Debezium commit, but was <a href="https://github.com/debezium/debezium/commit/2da5b37f767393847f2ee25a1465e501b5633473">added</a> really very early in the Debezium development as part of <a href="https://issues.redhat.com/browse/DBZ-1">DBZ-1</a>. This <code>EmbeddedEngine</code> was used mostly for testing. However, over the time it has evolved into a full-fledged runtime platform for the connectors, with the support for storing offsets, schema history etc. Later on, a public API for <code>DebeziumEngine</code> was defined ( <a href="https://issues.redhat.com/browse/DBZ-234">DBZ-234</a>). The interface decoupled the user-facing API from the implementation and provided the ability to replace the implementation by a different one. Shortly after introducing the Debezium engine API, a new Debezium server was created as part of <a href="https://issues.redhat.com/browse/DBZ-651">DBZ-651</a>. While <code>EmbeddedEngine</code> had to be wrapped into another application which would consume the records, the Debezium server provided a way to run Debezium outside the Kafka Connect cluster without such a wrapper. The Debezium server provided several sinks, so the users could use the server out-of-the-box without any further coding, but the Debezium server is still powered by the Debezium engine. As the popularity of the Debezium server increased, more and more sinks were added. This resulted in the separating Debezium server into <a href="https://github.com/debezium/debezium-server/">separate GitHub project</a>. The separation of the Debezium server repository happened relatively recently (<a href="https://issues.redhat.com/browse/DBZ-6049">DBZ-6049</a>). The latest addition to the Debezium server evolution was implementation of <a href="https://github.com/debezium/debezium-operator">Debezium operator</a>. It allows seamless deployment and management of the Debezium server on the Kubernetes clusters. You can check <a href="https://debezium.io/blog/2023/10/19/Debezium-Operator-Takes-off-to-the-Clouds/">this blog post</a> for more details.</p> </div> <div class="paragraph"> <p>To sum-up, currently, if the user wants to run Debezium connectors outside the Kafka Connect cluster, there are three options. Users can embed the Debezium engine directly into their application or users can use a standalone Debezium server or, when run on the Kubernetes cluster, users can deploy the Debezium server via Debezium operator. However, no matter which deployment method the users use, all the hard work is done by <code>DebeziumEngine</code> implementation after all.</p> </div> </div> </div> <div class="sect1"> <h2 id="embeddedengine_limitations"><code>EmbeddedEngine</code> limitations</h2> <div class="sectionbody"> <div class="paragraph"> <p>As described in the previous section, if you decide to run Debezium outside the Kafka Connect cluster, the most important part (in terms of performance, sustainability etc.) is <code>DebeziumEngine</code> implementation. Up until recently, the only available implementation of <code>DebeziumEngine</code> was <a href="https://github.com/debezium/debezium/blob/2.7/debezium-embedded/src/main/java/io/debezium/embedded/EmbeddedEngine.java#L86"><code>EmbeddedEngine</code></a>. As also mentioned, <code>EmbeddedEngine</code> was originally implemented as a testing framework to make testing of the connectors easy, without the need to start the whole Kafka cluster. As such, <code>EmbeddedEngine</code> was not designed for the best performance or even production use. During the time, various improvements were done, but some original designs and code structure remained more or less the same.</p> </div> <div class="paragraph"> <p>The main limitation of the <code>EmbeddedEngine</code> is that it can run only one task. Therefore, if you have a connector which supports execution of multiple tasks (SQL server connector), you cannot use multiple tasks in <code>EmbeddedEngine</code> and still have to run everything in one task. Moreover, all the records are processed in a single thread. This means that the chain of single message transforms (SMTs), serialization as well as processing by the user handler is happening in a synchronous manner, as depicted on the figure below.</p> </div> <div class="imageblock centered-image"> <img src="/assets/images/2024-07-08-async-embedded-engine/synchronous_processing.png" class="responsive-image" alt="Synchronous record processing in EmbeddedEngine"> </div> <div class="paragraph"> <p>Once the whole pipeline is finished for the one record in the batch, only after that another record is processed. This mimics the behavior of Kafka Connect, which also does the source record processing in a serial manner.</p> </div> <div class="paragraph"> <p>From our performance tests as well as from the users reports on the Zulip chat, it seems that especially serialization is often a performance bottleneck. Naturally, one can immediately suggest running at least parts of the workloads, like serialization, in parallel. This would however require substantial changes in <code>EmbeddedEngine</code>. Current code structure of <code>EmbeddedEngine</code> was also far from perfect. Doing any changes e.g. in the retry mechanism was quite challenging and error prone. This led us to a decision to implement the <code>DebeziumEngine</code> API from scratch and create a new implementation of Debezium engine. Besides starting on a green field, it also gave us the comfort of testing the new engine only with a smaller part of the test suite and switching to new engine implementation gradually, always having an option to switch back to <code>EmbeddedEngine</code> as a backup. As a result <a href="https://github.com/debezium/debezium/blob/2.7/debezium-embedded/src/main/java/io/debezium/embedded/async/AsyncEmbeddedEngine.java#L89"><code>AsyncEmbeddedEngine</code></a> was created.</p> </div> </div> </div> <div class="sect1"> <h2 id="asynchronous_embedded_engine">Asynchronous embedded engine</h2> <div class="sectionbody"> <div class="paragraph"> <p><a href="https://github.com/debezium/debezium/blob/2.7/debezium-embedded/src/main/java/io/debezium/embedded/async/AsyncEmbeddedEngine.java#L89"><code>AsyncEmbeddedEngine</code></a> is a new implementation of the <code>DebeziumEngine</code> interface. It addresses the main shortcomings of <code>EmbeddedEngine</code> as outlined in the previous section. Asynchronous engine allows connectors to execute multiple tasks. Most importantly, as the name suggests, aims to run record processing in parallel.</p> </div> <div class="sect2"> <h3 id="architecture">Architecture</h3> <div class="paragraph"> <p>From the high-level perspective there are two thread pools, a smaller one for managing tasks and bigger one for processing records. The size of the task thread pool corresponds to the number of configured tasks - each task has its own dedicated thread. The size of the record processing thread pool is also configurable, however, threads from this thread pool are shared across all the running tasks.</p> </div> <div class="paragraph"> <p>Records in an asynchronous engine are processed in parallel. To which extent the processing is parallelized depends on configuration. <code>DebeziumEngine</code> API offers two possibilities how to consume the changes: either via <a href="https://github.com/debezium/debezium/blob/2.7/debezium-api/src/main/java/io/debezium/engine/DebeziumEngine.java#L159"><code>ChangeConsumer</code></a> or via <a href="https://github.com/debezium/debezium/blob/2.7/debezium-api/src/main/java/io/debezium/engine/DebeziumEngine.java#L191"><code>java.util.function.Consumer</code></a> function. In the first case <code>ChangeConsumer</code> expects the whole batch of records as we can run in parallel only SMT chain and serialization. Once all the records in the batch are processed, the whole batch is passed to the user-defined <code>ChangeConsumer</code>.</p> </div> <div class="imageblock centered-image"> <img src="/assets/images/2024-07-08-async-embedded-engine/parallel_processing_batch.png" class="responsive-image" alt="Parallel processing of the whole batch"> </div> <div class="paragraph"> <p>In the later case, when user provides only consumer function which processes just one record, we can run in parallel the whole record processing pipeline:</p> </div> <div class="imageblock centered-image"> <img src="/assets/images/2024-07-08-async-embedded-engine/parallel_processing_async.png" class="responsive-image" alt="Asynchronous parallel processing"> </div> <div class="paragraph"> <p>Pipelines can be processed in the same order as the original batch of the source records provided by the connector task or they can be processed completely asynchronously. Asynchronous processing of the whole pipeline means that the records could be sent to the sink in a different order than the changes were done in the source database. However, in some cases the order doesn&#8217;t matter (e.g. bulk inserts of distinct data) and what matters is speed of processing. Such use cases should be addressed by this setup.</p> </div> <div class="paragraph"> <p>This was a very high level overview of the asynchronous engine, which is required to fully understand configuration options described in the next section. If you are interested in more details, please see <a href="https://github.com/debezium/debezium-design-documents/blob/main/DDD-7.md">Design document for asynchronous engine</a>. And of course the most precise and up-to-date source of information is <a href="https://github.com/debezium/debezium/tree/main/debezium-embedded/src/main/java/io/debezium/embedded/async">the source code</a>.</p> </div> </div> <div class="sect2"> <h3 id="usage">Usage</h3> <div class="paragraph"> <p>As <code>AsyncEmbeddedEngine</code> implements the same interface as <code>EmbeddedEngine</code>, the usage is also the same:</p> </div> <div class="listingblock"> <div class="content"> <pre class="CodeRay highlight"><code data-lang="java">DebeziumEngine&lt;<span class="predefined-type">ChangeEvent</span>&lt;<span class="predefined-type">String</span>, <span class="predefined-type">String</span>&gt;&gt; engine = DebeziumEngine
            .create(KeyValueHeaderChangeEventFormat.of(Json.class, Json.class, Json.class), <span class="string"><span class="delimiter">&quot;</span><span class="content">io.debezium.embedded.async.ConvertingAsyncEngineBuilderFactory</span><span class="delimiter">&quot;</span></span>)
            .using(props)
            .notifying(record -&gt; {
                <span class="predefined-type">System</span>.out.println(<span class="string"><span class="delimiter">&quot;</span><span class="content">Key = '</span><span class="delimiter">&quot;</span></span> + record.key() + <span class="string"><span class="delimiter">&quot;</span><span class="content">' value = '</span><span class="delimiter">&quot;</span></span> + record.value() + <span class="string"><span class="delimiter">&quot;</span><span class="content">'</span><span class="delimiter">&quot;</span></span>);
            }).build();

<span class="predefined-type">ExecutorService</span> executor = <span class="predefined-type">Executors</span>.newSingleThreadExecutor();
executor.execute(engine);</code></pre> </div> </div> <div class="paragraph"> <p>If you want to use <code>AsyncEmbeddedEngine</code>, for now you have to use <code>create(KeyValueHeaderChangeEventFormat&lt;K, V, H&gt; format, String builderFactory)</code> method with <code>io.debezium.embedded.async.ConvertingAsyncEngineBuilderFactory</code> as the builder factory. Other shortcut builder methods still point to <code>EmbeddedEngine</code>.</p> </div> <div class="paragraph"> <p>Once you are done and want to terminate the engine, you call <code>engine.close()</code> as in the case of <code>EmbeddedEngine</code>. The main difference here is that once the <code>AsyncEmbeddedEngine</code> is closed, it cannot be started again and has to be re-created. The reason for this is to prevent possible resource leaks when the engine is being stopped and started from different threads in parallel (you can find more details in the design document and <a href="https://issues.redhat.com/browse/DBZ-2534">DBZ-2534</a>).</p> </div> </div> <div class="sect2"> <h3 id="configuration_options">Configuration options</h3> <div class="paragraph"> <p>Compared to <code>EmbeddedEngine</code>, <code>AsyncEmbeddedEngine</code> provides only a few additional configuration options, mostly related to thread management:</p> </div> <div class="ulist"> <ul> <li> <p><code>record.processing.threads</code> - The size of the thread pool for record processing.</p> </li> <li> <p><code>record.processing.order</code> - Determines how the records should be produced, either <code>ORDERED</code> or <code>UNORDERED</code>.</p> </li> <li> <p><code>record.processing.with.serial.consumer</code> - Specifies whether the default <code>ChangeConsumer</code> should be created from the provided <code>Consumer</code>.</p> </li> <li> <p><code>record.processing.shutdown.timeout.ms</code> - Maximum time in milliseconds to wait for processing submitted records after a task shutdown is called.</p> </li> <li> <p><code>task.management.timeout.ms</code> - Time limit engine waits for a task’s lifecycle management operations (starting and stopping) to complete.</p> </li> </ul> </div> <div class="paragraph"> <p><code>record.processing.threads</code> is quite clear, it&#8217;s the size of the shared thread pool used for processing records. You can use the <code>AVAILABLE_CORES</code> placeholder to use all available cores on the given machine.</p> </div> <div class="paragraph"> <p><code>record.processing.order</code> - as described above, the records can be processed in the same order as the changes happened in the database or in a completely asynchronous manner which results in out-of-order delivery of the records to the sink. Which method is used is determined by this option. Please note that this option has any effect only in the case when user handler is provided as a <code>Consumer</code> function. As explained in the previous section, <code>ChangeConsumer</code> expects the whole batch of records and therefore the Debezium engine cannot ensure processing of individual records in parallel and setting it to <code>UNORDERED</code> processing has no sense in this case.</p> </div> <div class="paragraph"> <p><code>record.processing.with.serial.consumer</code> determines, if the default <code>ChangeConsumer</code> should be created from user provided <code>Consumer</code> function. This is basically an option for backward compatibility with the <code>EmbeddedEngine</code>. In case of <code>EmbeddedEngine</code> is always used <code>ChangeConsumer</code> and if the user provides the <code>Consumer</code> function interested, <code>EmbeddedEngine</code> creates default <code>ChangeConsumer</code>. When you enable this option, <code>AsyncEmbeddedEngine</code> does the same and creates the same <code>ChangeConsumer</code> as <code>EmbeddedEngine</code>, so you can get completely the same behavior as in case of <code>EmbeddedEngine</code>.</p> </div> <div class="paragraph"> <p><code>record.processing.shutdown.timeout.ms</code> specifies for how long the engine should wait for processing of submitted records. Once shutdown is called, no other records are submitted for processing, but you may want to wait for records already being processed. As processing of the records in general should be fast, this can be some smaller value (from dozen milliseconds to units of seconds).</p> </div> <div class="paragraph"> <p><code>task.management.timeout.ms</code> determines the timeout for the task to start or stop. If the timeout is exceeded, the thread running the task is forcefully killed. When this timeout is exceeded during the startup and task is killed, all other tasks are killed as well. Either all the tasks have to start or none of them. Compared to <code>record.processing.shutdown.timeout.ms</code>, starting of the tasks can be quite time consuming (creating connections to the database etc.), so in this case the timeout should be substantially higher than timeout for record processing (possibly in terms of minutes).</p> </div> </div> <div class="sect2"> <h3 id="debezium_server_usage">Debezium server usage</h3> <div class="paragraph"> <p>Starting Debezium 2.6.0.Alpha2, Debezium server was <a href="https://github.com/debezium/debezium-server/commit/aa58bc511596ac09f63d77c77fd5c8900afaed48">switched</a> to use <code>AsyncEmbeddedEngine</code>. Thus, if you use Debezium server 2.6.0.Alpha2 or later, you already use the asynchronous engine. As the Debezium engine currently uses only <code>ChangeConsumer</code> for processing CDC records, all constraints related to usage of <code>ChangeConsumer</code> mentioned above (impossibility to process records out of order) applies to the Debezium server as well. This can change in the future, but at the moment we don&#8217;t see any demand for it.</p> </div> </div> </div> </div> <div class="sect1"> <h2 id="deprecation_of_embeddedengine">Deprecation of <code>EmbeddedEngine</code></h2> <div class="sectionbody"> <div class="paragraph"> <p>As of Debezium 2.7.0.Final, <code>EmbeddedEngine</code> was deprecated (<a href="https://issues.redhat.com/browse/DBZ-7976">DBZ-7976</a>). We will keep it for about next 6 months. During this time we are going to migrate rest of our test suite to asynchronous engine (<a href="https://issues.redhat.com/browse/DBZ-7977">DBZ-7977</a>) and then remove <code>EmbeddedEngine</code> in Debezium 3.1.0.Final (<a href="https://issues.redhat.com/browse/DBZ-8029">DBZ-8029</a>). If you use the <code>DebeziumEngine</code> API, the migration should be very straightforward. The only thing you need to do if you use the converting wrapper is to switch from <code>ConvertingEngineBuilderFactory</code> to <code>ConvertingAsyncEngineBuilderFactory</code>, as described in the previous chapter. However, we would strongly recommend switching to the asynchronous engine sooner rather than later and eventually let us know if you spot any issue, so that we have sufficient time to fix any such issue before final removal of <code>EmbeddedEngine</code>.</p> </div> </div> </div> <div class="sect1"> <h2 id="future_steps_and_outlook">Future steps and outlook</h2> <div class="sectionbody"> <div class="paragraph"> <p>Besides the aforementioned removal of <code>EmbeddedEngine</code>, are we done with the changes or do we plan any further changes? Sure we plan to continue with the improvements! So what can you look for?</p> </div> <div class="paragraph"> <p>With Debezium 3.0 we will switch to Java 21 for building Debezium and in the future releases Java 21 will become Debezium base line. With this, we would like to switch to Java <a href="https://docs.oracle.com/en/java/javase/21/core/virtual-threads.html">virtual threads</a>. This may bring even more speedup and eventually also simplify the code a little bit. We will evaluate this option based on the results of our internal performance tests.</p> </div> <div class="paragraph"> <p>Speaking about performance tests, one may ask why at least some performance comparison is not mentioned in this blog post. We of course did some performance tests, we do have a some <a href="https://github.com/debezium/debezium/tree/main/debezium-microbenchmark-engine/src/main/java/io/debezium/performance/engine">JMH benchmarks</a> (PRs with improvements are welcome!) and also did some end-to-end performance tests. You can find some JMH results e.g. under <a href="https://github.com/debezium/debezium/pull/5494">this pull request</a>, which also compares the results with <code>EmbeddedEngine</code>. On the other hand, we are fully aware of complexity and trickiness of performance testing and we believe having some solid results requires still some more work. It would deserve its own blog post anyway. After all, even with very solid performance results, the reality of your deployment may still be different, so what really matters is your performance tests, done on your hardware, your production network setup etc. If you do so, we would be more than happy to hear the results.</p> </div> <div class="paragraph"> <p>As for other things, we may add more implementations of <a href="https://github.com/debezium/debezium/blob/main/debezium-embedded/src/main/java/io/debezium/embedded/async/RecordProcessor.java">RecordProcessor</a>s, e.g. one suggested by <a href="https://github.com/jeremy-l-ford">Jeremy Ford</a> in <a href="https://github.com/debezium/debezium-design-documents/pull/8#issuecomment-1859321629">the discussion</a> under the asynchronous engine DDD.</p> </div> <div class="paragraph"> <p>In the longer term, we would like to add support for gRPC and Protocol Buffers. It should give us a two-fold advantage: Debezium engine should be able to coordinate execution of multiple tasks across different machines and also would be able to receive CDC records from them in the unified format. Ability to run multiple tasks (for connectors which allow it) on separate machines/containers is crucial especially in environments like Kubernetes, where you ideally want to run each task in a separate container. Defining Protocol Buffers format would allow Debezium to work with all kinds of connectors, written even in different languages and running on a large variety of devices, even on the edge, allowing the Debezium engine to become the heart of any CDC solution.</p> </div> <div class="paragraph"> <p>These are plans for which you can look forward to in the short and long term future. What we are looking for in the near future is your feedback on the new asynchronous engine. If you have any, please share it via common means on either Debezium <a href="https://debezium.zulipchat.com/">Zulip chat</a> or <a href="https://groups.google.com/forum/#!forum/debezium">mailing list</a>.</p> </div> </div> </div>]]></content><author><name>Vojtěch Juránek</name></author><category term="machine-learning"/><category term="flink"/><category term="spark"/><category term="online-learning"/><category term="examples"/><category term="apache-kafka"/><summary type="html"><![CDATA[Debezium provides a way to run the connectors directly within Debezium from the very beginning of the project. The way how it was provided has changed over the time and it still evolves. This article will describe another evolution step in this regard - new implementation of Debezium engine.]]></summary></entry><entry><title type="html">Debezium 2.7.0.Final Released</title><link href="https://debezium.io/blog/2024/07/01/debezium-2-7-final-released/" rel="alternate" type="text/html" title="Debezium 2.7.0.Final Released"/><published>2024-07-01T00:00:00+00:00</published><updated>2024-07-01T00:00:00+00:00</updated><id>https://debezium.io/blog/2024/07/01/debezium-2-7-final-released</id><content type="html" xml:base="https://debezium.io/blog/2024/07/01/debezium-2-7-final-released/"><![CDATA[<div class="paragraph"> <p>As the team leaps into Q3, we&#8217;re happy to announce the fruits of our Q2 work, Debezium <strong>2.7.0.Final</strong> is now generally available. This release includes changes for <a href="https://issues.redhat.com/issues/?jql=project%20%3D%20DBZ%20and%20fixVersion%20%20in%20(2.7.0.Alpha1%2C%202.7.0.Alpha2%2C%202.7.0.Beta1%2C%202.7.0.CR1%2C%202.7.0.Final)">140 issues</a> with contributions from over <strong>51</strong> contributors. Let&#8217;s take a moment and review all the changes.</p> </div> <div class="paragraph"> <p></p> </div> <div class="sect1"> <h2 id="breaking-changes">Breaking changes</h2> <div class="sectionbody"> <div class="paragraph"> <p>The upgrade to Debezium <strong>2.7.0.Final</strong> includes a total of <strong>5</strong> unique breaking changes:</p> </div> <div class="dlist"> <dl> <dt class="hdlist1">Core</dt> <dd> <div class="ulist"> <ul> <li> <p>Debezium snapshot artifacts were originally deployed to <code>oss.sontatype.org</code>, the now legacy Sonatype infrastructure. This has changed and artifact snapshots are now found at <code>s01.oss.sonatype.org</code>, the new Sonatype infrastructure (<a href="https://issues.redhat.com/browse/DBZ-7641">DBZ-7641</a>).</p> </li> <li> <p>Under certain circumstances, JDBC queries were observed in a persistent hung state, such as database communication errors. A configurable timeout property called <code>query.timeout.ms</code> was introduced as a way to mitigate the problem for users who experienced this issue. This option defaults to <code>600000</code> milliseconds (600 seconds), but can be changed to a value of <code>0</code> to disable timeout handling (<a href="https://issues.redhat.com/browse/DBZ-7616">DBZ-7616</a>).</p> </li> </ul> </div> </dd> <dt class="hdlist1">Oracle</dt> <dd> <div class="ulist"> <ul> <li> <p>Tables that use <code>NUMERIC</code> data types with zero scale were ignored by the <code>decimal.handling.mode</code> when set to <code>double</code> or <code>string</code>. This has been fixed and such columns will now be correctly emitted according to the configured decimal handling mode. This can cause issues with upgrades for deployments using strict schema registry compatibility rules (<a href="https://issues.redhat.com/browse/DBZ-7882">DBZ-7882</a>).</p> </li> </ul> </div> </dd> <dt class="hdlist1">PostgreSQL</dt> <dd> <div class="ulist"> <ul> <li> <p>PostgreSQL 10 and 11 have been in end-of-life (EoL) mode for some time now. Support for these versions are now considered best-effort, meaning we no longer explicitly test Debezium against these database versions. Any regressions will not be proactively fixed by the core team; however, community contributions will continue to be accepted for regressions (<a href="https://issues.redhat.com/browse/DBZ-7128">DBZ-7128</a>).</p> </li> </ul> </div> </dd> <dt class="hdlist1">SQL Server</dt> <dd> <div class="ulist"> <ul> <li> <p>In older versions of Debezium, the SQL Server connector would process all transactions available during a poll iteration. This could lead to memory concerns with large traffic. The <code>max.iteration.transactions</code> configuration property already exists to solve this corner case for users, but it defaulted to <code>0</code>, meaning that the connector would process all transactions by default. This configuration&#8217;s default value has changed and is now <code>500</code> to provide more seamless integration for the default configuration use cases (<a href="https://issues.redhat.com/browse/DBZ-7750">DBZ-7750</a>).</p> </li> </ul> </div> </dd> </dl> </div> </div> </div> <div class="sect1"> <h2 id="new-features-and-improvements">New features and improvements</h2> <div class="sectionbody"> <div class="paragraph"> <p>The upgrade to Debezium <strong>2.7.0.Final</strong> introduces many new features and improvements in several components:</p> </div> <table class="tableblock frame-all grid-all stretch"> <colgroup> <col style="width: 20%;"> <col style="width: 20%;"> <col style="width: 20%;"> <col style="width: 20%;"> <col style="width: 20%;"> </colgroup> <tbody> <tr> <td class="tableblock halign-center valign-top"><p class="tableblock"><a href="#new-features-core">Core</a><br> <a href="#new-features-db2">Db2</a><br> <a href="#new-features-jdbc">JDBC</a></p></td> <td class="tableblock halign-center valign-top"><p class="tableblock"><a href="#new-features-mariadb">MariaDB</a><br> <a href="#new-features-mongodb">MongoDB</a><br> <a href="#new-features-mysql">MySQL</a></p></td> <td class="tableblock halign-center valign-top"><p class="tableblock"><a href="#new-features-oracle">Oracle</a><br> <a href="#new-features-postgres">PostgreSQL</a><br> <a href="#new-features-sqlserver">SQL Server</a></p></td> <td class="tableblock halign-center valign-top"><p class="tableblock"><a href="#new-features-cassandra">Cassandra</a><br> <a href="#new-features-vitess">Vitess</a></p></td> <td class="tableblock halign-center valign-top"><p class="tableblock"><a href="#new-features-server">Debezium Server</a><br> <a href="#new-features-operator">Kubernetes Operator</a></p></td> </tr> </tbody> </table> <div class="sect2"> <h3 id="new-features-core">Core</h3> <div class="sect3"> <h4 id="transaction_metadata_encoded_ordering">Transaction metadata encoded ordering</h4> <div class="paragraph"> <p>In some pipelines, ordering is critical for consuming applications. There are certain scenarios that can impact this aspect of your data pipeline, such as when Kafka re-partition occur. This leads to problems that can be error-prone trying to reconstruct the ordering after-the-fact.</p> </div> <div class="paragraph"> <p>Now when Transaction Metadata is enabled, these metadata events will also encode their transaction order, so that in the event that a Kafka re-partition or other scenarios occur that alter the ordering semantics, consumers can simply use the new encoded ordering field instead for deterministic ordering of transactions (<a href="https://issues.redhat.com/browse/DBZ-7698">DBZ-7698</a>).</p> </div> </div> <div class="sect3"> <h4 id="blocking_incremental_snapshot_improvements">Blocking incremental snapshot improvements</h4> <div class="paragraph"> <p>There are some use cases where incremental snapshot signals require escaping certain characters in the fully-qualified table name. This caused some problems with blocking snapshots because the process to resolve what tables to snapshot used a slightly different mechanism. In Debezium 2.7, we&#8217;ve unified this approach, and you can now use escaped table names with blocking snapshots where applicable (<a href="https://issues.redhat.com/browse/DBZ-7718">DBZ-7718</a>).</p> </div> </div> <div class="sect3"> <h4 id="optional_delay_between_snapshot_streaming">Optional delay between snapshot &amp; streaming</h4> <div class="paragraph"> <p>Debezium 2.7 ships with a new global configuration option, <code>streaming.delay.ms</code>. This new option causes the connector to perform a delay before it starts the streaming phase (<a href="https://issues.redhat.com/browse/DBZ-7902">DBZ-7902</a>).</p> </div> <div class="paragraph"> <p>For some deployment use cases, you may want to guarantee that at least one offset flush interval has happened before the streaming phase begins. In such use cases, uses should guarantee that both properties, <code>streaming.delay.ms</code> and <code>offset.flush.interval.ms</code> are aligned.</p> </div> <div class="paragraph"> <p>By default, Debezium will not perform a delay and immediately transitions to the streaming phase to remain consistent with prior version behavior.</p> </div> </div> <div class="sect3"> <h4 id="truncating_array_fields">Truncating array fields</h4> <div class="paragraph"> <p>The <code>column.truncate.to.<em>length</em>.chars</code> configuration property is improved, supporting a combination of string and now, array field types (<a href="https://issues.redhat.com/browse/DBZ-7925">DBZ-7925</a>).</p> </div> </div> </div> <div class="sect2"> <h3 id="new-features-db2">Db2</h3> <div class="sect3"> <h4 id="support_db2_on_zos">Support Db2 on z/OS</h4> <div class="paragraph"> <p>Debezium 2.7 introduces incubating support for using the Db2 connector on the z/OS platform. For the Db2 connector to work with z/OS, several configuration options are required to toggle the connector to work with the z/OS platform database (<a href="https://issues.redhat.com/browse/DBZ-4812">DBZ-4812</a>).</p> </div> <div class="listingblock"> <div class="title">New connector properties</div> <div class="content"> <pre class="CodeRay highlight"><code data-lang="json">{
  <span class="error">.</span><span class="error">.</span><span class="error">.</span>,
  <span class="key"><span class="delimiter">&quot;</span><span class="content">db2.platform</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">ZOS</span><span class="delimiter">&quot;</span></span>,
  <span class="key"><span class="delimiter">&quot;</span><span class="content">cdc.control.schema</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">ASNCDC</span><span class="delimiter">&quot;</span></span>,
  <span class="key"><span class="delimiter">&quot;</span><span class="content">cdc.change.tables.schema</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">ASNCDC</span><span class="delimiter">&quot;</span></span>
}</code></pre> </div> </div> <div class="paragraph"> <p>The primary toggle to run in z/OS mode is done using the <code>db2.platform</code>, which defaults to <code>LUW</code> for running on Linux, Unix, and Windows. Setting this configuration option to <code>ZOS</code> enables z/OS.</p> </div> <div class="paragraph"> <p>In addition, we have also added the <code>cdc.control.schema</code> and <code>cdc.change.tables.schema</code> connector configuration properties. These were previously hardcoded as <code>ASNCDC</code>, and while this remains the default, if your installation uses different schemas, this is now possible.</p> </div> <div class="admonitionblock note"> <table> <tr> <td class="icon"> <i class="fa icon-note" title="Note"></i> </td> <td class="content"> <div class="paragraph"> <p>For existing Db2 connectors for Linux, Unix, and Windows, no configuration changes are required when upgrading. The <code>db2.platform</code> is only required for z/OS and the schema properties only if you put these objects in a different schema than <code>ASNCDC</code>.</p> </div> </td> </tr> </table> </div> </div> </div> <div class="sect2"> <h3 id="new-features-jdbc">JDBC</h3> <div class="sect3"> <h4 id="mariadb_dialect_support">MariaDB dialect support</h4> <div class="paragraph"> <p>While MariaDB and MySQL often share a lot of similar syntax, unfortunately there are corner cases where these two vary slightly that introduces incompatibilities. One such incompatibility was found with now the Debezium JDBC sink constructed <em>upsert</em> statements, which could not be executed when using a MariaDB target database.</p> </div> <div class="paragraph"> <p>Debezium 2.7 officially introduces MariaDB dialect support for the JDBC sink connector, enabling users to configure the JDBC sink to write changes from Kafka topics to a MariaDB target (<a href="https://issues.redhat.com/browse/DBZ-7874">DBZ-7874</a>). In general, no special configuration should be necessary as both Hibernate and Debezium should detect the target is MariaDB and use the correct dialects.</p> </div> <div class="admonitionblock note"> <table> <tr> <td class="icon"> <i class="fa icon-note" title="Note"></i> </td> <td class="content"> <div class="paragraph"> <p>If you find the dialect resolution does not resolve to MariaDB, you can enforce its use by setting the connector configuration <code>hibernate.dialect</code> with the fully qualified class name <code>org.hibernate.dialect.MariaDBDialect</code>.</p> </div> </td> </tr> </table> </div> </div> </div> <div class="sect2"> <h3 id="new-features-mariadb">MariaDB</h3> <div class="sect3"> <h4 id="new_mariadb_standalone_connector">New MariaDB standalone connector</h4> <div class="paragraph"> <p>Debezium 2.5 introduced official support for MariaDB as part of the existing MySQL connector. The next step in that evolution is here, with a new standalone connector implementation for MariaDB (<a href="https://issues.redhat.com/browse/DBZ-7693">DBZ-7693</a>).</p> </div> <div class="paragraph"> <p>There are few things worth noting here:</p> </div> <div class="ulist"> <ul> <li> <p>MariaDB and MySQL both have a common shared dependency on a new abstract connector called <code>debezium-connector-binlog</code>, which provides the common framework for both binlog-based connectors.</p> </li> <li> <p>Each standalone connector now specifically is tailored only to its target database, so MySQL users should use MySQL and MariaDB users should use MariaDB. As a result, the <code>connection.adapter</code> configuration option has been removed, and the <code>jdbc.protocol</code> configuration option is now only specific to certain MySQL use cases and not used by MariaDB.</p> </li> </ul> </div> <div class="paragraph"> <p>The documentation for this connector is still a work-in-progress and will be added in the future. For the moment, you can refer to the MySQL connector documentation for most things related to MariaDB.</p> </div> </div> <div class="sect3"> <h4 id="snapshot_row_count_estimates_can_be_disabled">Snapshot row count estimates can be disabled</h4> <div class="paragraph"> <p>In some circumstances, users may find that the query that generates the row count estimates for MySQL and MariaDB can have some performance impacts in some environments.</p> </div> <div class="paragraph"> <p>If you determine this query performs poorly, or the calculation is of no interest, it can be safely disabled by setting the log level for <code>io.debezium.connector.binlog.BinlogSnapshotChangeEventSource.RowEstimate</code> to <code>WARN</code> (<a href="https://issues.redhat.com/browse/DBZ-7640">DBZ-7640</a>).</p> </div> <div class="paragraph"> <p>If you are deploying on Kafka Connect, be sure to adjust the Kafka Connect log4j configuration. If you are deploying using Debezium Server, be sure to adjust the log configuration in <code>application.properties</code> based on the <a href="https://quarkus.io/guides/logging">Quarkus documentation</a>.</p> </div> </div> </div> <div class="sect2"> <h3 id="new-features-mongodb">MongoDB</h3> <div class="sect3"> <h4 id="support_predicate_conditions_for_mongodb_incremental_snapshots">Support predicate conditions for MongoDB incremental snapshots</h4> <div class="paragraph"> <p>The incremental snapshot process is an instrumental part in various recovery situations to collect whole or part of the data set from a source table or collection. Relational connectors have long supported the idea of supplying an <code>additional-conditions</code> value on the incremental snapshot signal to restrict the data set, providing for targeted resynchronization of specific rows of data.</p> </div> <div class="paragraph"> <p>We&#8217;re happy to announce that this is now possible with MongoDB (<a href="https://issues.redhat.com/browse/DBZ-7138">DBZ-7138</a>). Unlike relational databases, the <code>additional-conditions</code> should be supplied in JSON format. It will be applied to the specified collection using the <code>find</code> operation to obtain the subset list of documents that are to be incrementally snapshotted.</p> </div> </div> <div class="sect3"> <h4 id="extractnewdocumentstate_includes_document_id_for_mongodb_deletes">ExtractNewDocumentState includes document id for MongoDB deletes</h4> <div class="paragraph"> <p>In prior release of the MongoDB <code>ExtractNewDocumentState</code> single message transformation, a delete event did not provide the identifier as part of the payload. This reduced the meaningfulness of delete events as consumers were supplied with insufficient data to act on these events. This behavior has been improved, and the delete event now includes an <code>_id</code> attribute in the payload (<a href="https://issues.redhat.com/browse/DBZ-7695">DBZ-7695</a>).</p> </div> </div> <div class="sect3"> <h4 id="collection_scoped_change_streams">Collection-scoped change streams</h4> <div class="paragraph"> <p>In previous iterations of the Debezium MongoDB connector, change streams could be opened against the deployment and database scopes, which was not always ideal for restrictive permission environments. Debezium 2.7 introduces a new change stream mode where the connector can operate on a single collection scope, allowing for such granular permissive configurations (<a href="https://issues.redhat.com/browse/DBZ-7760">DBZ-7760</a>).</p> </div> <div class="paragraph"> <p>A new capture scope value has been added called <code>collection</code>, which can be set using <code>capture.scope</code>. This is useful if the connector is deployed to only capture changes for a single collection in MongoDB.</p> </div> <div class="paragraph"> <p>Please see the <a href="https://debezium.io/documentation/reference/2.7/connectors/mongodb.html#mongodb-property-capture-scope">documentation</a> about limitations of this new, incubating feature.</p> </div> </div> </div> <div class="sect2"> <h3 id="new-features-mysql">MySQL</h3> <div class="sect3"> <h4 id="snapshot_row_count_estimates_can_be_disabled_2">Snapshot row count estimates can be disabled</h4> <div class="paragraph"> <p>In some circumstances, users may find that the query that generates the row count estimates for MySQL and MariaDB can have some performance impacts in some environments.</p> </div> <div class="paragraph"> <p>If you determine this query performs poorly, or the calculation is of no interest, it can be safely disabled by setting the log level for <code>io.debezium.connector.binlog.BinlogSnapshotChangeEventSource.RowEstimate</code> to <code>WARN</code> (<a href="https://issues.redhat.com/browse/DBZ-7640">DBZ-7640</a>).</p> </div> <div class="paragraph"> <p>If you are deploying on Kafka Connect, be sure to adjust the Kafka Connect log4j configuration. If you are deploying using Debezium Server, be sure to adjust the log configuration in <code>application.properties</code> based on the <a href="https://quarkus.io/guides/logging">Quarkus documentation</a>.</p> </div> </div> </div> <div class="sect2"> <h3 id="new-features-oracle">Oracle</h3> <div class="sect3"> <h4 id="new_oracle_rawtostring_custom_converter">New Oracle "RawToString" custom converter</h4> <div class="paragraph"> <p>While Oracle recommends that users avoid using <code>RAW</code>-based columns, these columns are still widely used in standard Oracle tables for backward compatibility reasons. But there are also business use cases where it makes sense to continue to use <code>RAW</code> columns rather than other data types.</p> </div> <div class="paragraph"> <p>Debezium 2.7 introduces a new custom converter specifically for Oracle called <code>RawToStringConverter</code> (<a href="https://issues.redhat.com/browse/DBZ-7753">DBZ-7753</a>). This custom converter is designed to allow you to quickly convert the byte-array contents of the <code>RAW</code> column to a string-based field using a <code>STRING</code> schema type. This can be useful for situations where you use a <code>RAW</code> column to store character data that doesn&#8217;t require the collation overhead of <code>VARCHAR2</code>, but you still have the need for this field to be sent to consumers as string-based data.</p> </div> <div class="paragraph"> <p>To get started with this custom converter, please see the <a href="https://debezium.io/documentation/reference/2.7/connectors/oracle.html#_raw_to_string">documentation</a> for more details.</p> </div> </div> <div class="sect3"> <h4 id="improved_nls_character_set_support_for_oracle">Improved NLS character-set support for Oracle</h4> <div class="paragraph"> <p>When installing the Debezium 2.7 Oracle connector, you may notice a new dependency, <code>orai18n.jar</code>. This dependency is being automatically distributed to provide extended character-set support for certain dialects (<a href="https://issues.redhat.com/browse/DBZ-7761">DBZ-7761</a>).</p> </div> </div> <div class="sect3"> <h4 id="oracle_row_id_included_in_change_events">Oracle ROW_ID included in change events</h4> <div class="paragraph"> <p>While <code>ROW_ID</code> is not unique across all rows of a table for the table&#8217;s lifespan, it can be used in certain situations when the lifecycle of the table and rows are managed in a very strict way. At the community&#8217;s request, we&#8217;ve added a new <code>row_id</code> field to the Oracle connector&#8217;s change event source information block (<a href="https://issues.redhat.com/browse/DBZ-4332">DBZ-4332</a>). This new field will be populated with the <code>ROW_ID</code> value under the following conditions:</p> </div> <div class="ulist"> <ul> <li> <p>Only populated from streaming events for inserts, updates, and deletes.</p> </li> <li> <p>Snapshot evnets will not contain a <code>row_id</code> value.</p> </li> <li> <p>Only provided by the LogMiner and XStream streaming adapters, OpenLogReplicator is not supported.</p> </li> </ul> </div> <div class="paragraph"> <p>Any event that does not match the criteria will not include a <code>row_id</code> field as its marked as <em>optional</em>.</p> </div> </div> <div class="sect3"> <h4 id="oracle_flush_table_with_custom_schema_names">Oracle flush table with custom schema names</h4> <div class="paragraph"> <p>In prior versions of Debezium, the Oracle connector was strictly designed to create the LogMiner flush table in the default tablespace of the connector user account. This wasn&#8217;t always useful in situations where the user&#8217;s default tablespace may not be the ideal destination and the DBA would prefer that table to exist in a separate tablespace.</p> </div> <div class="paragraph"> <p>Previously, users would need to modify the user account or use a new user with the correct tablespace to have the table created in the right tablespace location. With Debezium 2.7, this is no longer required, and you can safely include the name of the target schema/tablespace in the configuration (<a href="https://issues.redhat.com/browse/DBZ-7819">DBZ-7819</a>).</p> </div> <div class="listingblock"> <div class="title">Example using a custom schema name</div> <div class="content"> <pre class="CodeRay highlight"><code>log.mining.flush.table.name=THE_OTHER_SCHEMA.LOG_MINING_FLUSH_TABLE</code></pre> </div> </div> <div class="paragraph"> <p>The schema name is optional and if not supplied, the connector continues to use the same legacy behavior of creating the flush table and checking for its existence in the user&#8217;s default tablespace.</p> </div> </div> <div class="sect3"> <h4 id="oracle_query_filter_with_large_numbers_of_tables">Oracle query filter with large numbers of tables</h4> <div class="paragraph"> <p>The Debezium Oracle connector can support thousands of tables in a single connector deployment with ease; however, you may have found you wanted to customize the query filter using the <code>IN</code> mode. This mode is used in situations where you may have a high volume of changes for other tables and you want to filter that dataset out at the database level before the changes are passed to Debezium for processing.</p> </div> <div class="paragraph"> <p>In earlier versions, users may have noticed that setting <code>log.mining.query.filter.mode</code> with a value of <code>in</code> and where your table include list contained more than 1000 elements generated a SQL error. Oracle does not permit more than 1000 elements within an in-clause; however, Debezium 2.7 addresses this limitation by using a disjunction between multiple buckets of 1000 item in-clause lists (<a href="https://issues.redhat.com/browse/DBZ-7847">DBZ-7847</a>).</p> </div> </div> </div> <div class="sect2"> <h3 id="new-features-postgres">PostgreSQL</h3> <div class="sect3"> <h4 id="postresql_arrays_with_the_jdbc_sink">PostreSQL Arrays with the JDBC sink</h4> <div class="paragraph"> <p>The JDBC sink connector supports the use of mapping source columns to Kafka ARRAY-based payload field types. With Debezium 2.7, you can now serialize ARRAY-based fields to a target PostgreSQL database, with no change in configuration. The new support should be completely transparent (<a href="https://issues.redhat.com/browse/DBZ-7752">DBZ-7752</a>).</p> </div> </div> <div class="sect3"> <h4 id="read_only_incremental_snapshots">Read-only incremental snapshots</h4> <div class="paragraph"> <p>An incremental snapshot is feature of Debezium to capture all or a subset of historical data from one or more tables in your source database using an ad-hoc signal to start the snapshot. This process normally requires writing to the signal database table to maintain open/close watermarks in the transaction log for deduplication with the change stream that overlaps with the incremental snapshot stream.</p> </div> <div class="paragraph"> <p>Debezium has supported read-only incremental snapshots with other database vendors such as MySQL and MariaDB; however, Debezium 2.7 introduces support for read-only incremental snapshots with PostgreSQL. If you would like information, please check out the <a href="https://github.com/debezium/debezium-design-documents/blob/main/DDD-8.md">design proposal</a>.</p> </div> <div class="paragraph"> <p>This process works by using the <code>pg_current_snapshot</code> function to obtain information about what transactions are currently active in the database, which is only available on PostgreSQL 13. This means that to utilize read-only incremental snapshots, you must be using PostgreSQL 13 or later.</p> </div> <div class="paragraph"> <p>In order to activate read-only incremental snapshots on PostgreSQL 13 or later, you simply need to add the <code>read.only</code> connector configuration property set to <code>true</code> in the connector configuration. The incremental snapshot implementation will choose to use the read-only implementation when this is set to <code>true</code>, similar to the same behavior for MySQL and MariaDB (<a href="https://issues.redhat.com/browse/DBZ-7917">DBZ-7917</a>).</p> </div> </div> </div> <div class="sect2"> <h3 id="new-features-sqlserver">SQL Server</h3> <div class="sect3"> <h4 id="heartbeat_action_query_now_supported">Heartbeat action query now supported</h4> <div class="paragraph"> <p>The <code>heartbeat.action.query</code> connector configuration property enables the connector to perform a write operation to the source database on an interval defined by <code>heartbeat.interval.ms</code>. The write operation is meant to produce a change event that is captured by the connector, and is sent to Kafka or the target system.</p> </div> <div class="paragraph"> <p>In an active database that is capturing changes regularly, you do not need to worry setting <code>heartbeat.action.query</code>, as the constant stream of changes is sufficient to keep the offsets synchronized with the read position in the transaction logs. However, if the connector is capturing changes from a source that has a higher volume of changes to non-captured tables than to captured tables, this can be useful to keep the read position in the offsets synchronized with the lower capture activity.</p> </div> <div class="paragraph"> <p>In Debezium 2.7, we&#8217;ve added support for this property for SQL Server (<a href="https://issues.redhat.com/browse/DBZ-7801">DBZ-7801</a>). For additional details, please see the SQL Server <a href="https://debezium.io/documentation/reference/2.7/connectors/sqlserver.html#sqlserver-property-heartbeat-action-query">documentation</a>.</p> </div> </div> </div> <div class="sect2"> <h3 id="new-features-cassandra">Cassandra</h3> <div class="sect3"> <h4 id="cassandra_performance_improvement">Cassandra performance improvement</h4> <div class="paragraph"> <p>The Cassandra connector also saw some changes in Debezium 2.7, specifically to performance optimizations. The implementation of the <code>KafkaRecordEmitter</code> relied on a thread-synchronization block that reduced the throughput. In addition, the implementation also performed some unnecessary flushing which also impacted performance. This code has been rewritten to improve both throughput and reduce the unnecessary flush calls (<a href="https://issues.redhat.com/browse/DBZ-7722">DBZ-7722</a>).</p> </div> </div> </div> <div class="sect2"> <h3 id="new-features-vitess">Vitess</h3> <div class="sect3"> <h4 id="improved_temporal_support_in_vitess">Improved temporal support in Vitess</h4> <div class="paragraph"> <p>Debezium relational connectors rely on a configuration option, <code>time.precision.mode</code>, to control how temporal values are added to change events. In some cases, you may want to use modes that align with Kafka types, using the <code>connect</code> mode. In other cases, you may prefer to avoid precision loss by using the default, <code>adaptive_milliseconds</code> mode.</p> </div> <div class="paragraph"> <p>The Debezium for Vitess connector has traditionally not followed this model, and instead has emitted temporal values as string-based types. While this helps avoid the loss of precision problem when using the <code>connect</code> mode, this adds unnecessary overhead on consumers to parse and manipulate these values.</p> </div> <div class="paragraph"> <p>In Debezium 2.7, Vitess aligns this behavior with other relational connectors, using the <code>time.precision.mode</code> to control how temporal values are sent (<a href="https://issues.redhat.com/browse/DBZ-7773">DBZ-7773</a>). By default, it will use the <code>adaptive_milliseconds</code> mode, but you can customize this to use <code>connect</code> mode if you prefer. The emission of string-based temporal values has been removed.</p> </div> </div> <div class="sect3"> <h4 id="support_heartbeat_events">Support heartbeat events</h4> <div class="paragraph"> <p>Debezium provides a mechanism to write to the database periodically to emit synchronizing events for offsets using the <code>heartbeat.action.query</code> connector configuration property. For Vitess, this is unnecessary since the Vitess/VStream provides this out of the box with the <a href="https://vitess.io/docs/17.0/reference/vreplication/vstream/#heartbeatinterval">HeartbeatInterval</a> flag.</p> </div> <div class="paragraph"> <p>Debezium 2.7 uses the <code>HeartbeatInterval</code> VStream flag, only requiring users to set the <code>heartbeat.interval.ms</code> in the connector configuration. As the heartbeat flag is observed in the VStream, a heartbeat event will be emitted based on that interval (<a href="https://issues.redhat.com/browse/DBZ-7962">DBZ-7962</a>)</p> </div> </div> </div> <div class="sect2"> <h3 id="new-features-server">Debezium Server</h3> <div class="sect3"> <h4 id="nats_authentication_with_jwtseed">NATS authentication with JWT/seed</h4> <div class="paragraph"> <p>The Debezium Server NATs streaming sink adapter was improved, supporting JWT/seed based authentication (<a href="https://issues.redhat.com/browse/DBZ-7829">DBZ-7829</a>). To get started using the JWT/seed-based authentication, supply the following necessary values in the configuration:</p> </div> <div class="listingblock"> <div class="title">JWT authentication example</div> <div class="content"> <pre class="CodeRay highlight"><code>debezium.sink.nats-jetstream.auth.jwt=&lt;your_jwt_token&gt;</code></pre> </div> </div> <div class="listingblock"> <div class="title">Seed authentication example</div> <div class="content"> <pre class="CodeRay highlight"><code>debezium.sink.nats-jetstream.auth.seed=&lt;your_nkey_seed&gt;</code></pre> </div> </div> <div class="paragraph"> <p>For this and more, please see the NATS documentation for details about JWT and NKey seed based authentication.</p> </div> </div> <div class="sect3"> <h4 id="nats_jetstream_sink_authentication_improvements">NATS JetStream sink authentication improvements</h4> <div class="paragraph"> <p>The Debezium Server NATS JetStream sink also includes improvements to support authentication and encryption in Debezium 2.7. Several new configuration properties are now supported to pass keystore details to the sink adapter (<a href="https://issues.redhat.com/browse/DBZ-7922">DBZ-7922</a>).</p> </div> <div class="listingblock"> <div class="title">New configuration properties</div> <div class="content"> <pre class="CodeRay highlight"><code data-lang="properties">...
debezium.sink.nats-jetstream.auth.tls.keystore=&lt;path-to-keystore-file&gt;
debezium.sink.nats-jetstream.auth.tls.keystore.password=secret-password
debezium.sink.nats-jetstream.auth.tls.password=&lt;tls-password&gt;</code></pre> </div> </div> <div class="paragraph"> <p>To get started using the new authentication and encryption features, simply include the above three configurations into your Debezium Server configuration with appropriate values.</p> </div> </div> <div class="sect3"> <h4 id="jmx_exporter_added">JMX Exporter added</h4> <div class="paragraph"> <p>The JMX Exporter agent has been added as part of the Debezium Server container image. This should enable users to easily fetch connector metrics while running Debezium Server out of the box (<a href="https://issues.redhat.com/browse/DBZ-7913">DBZ-7913</a>).</p> </div> <div class="paragraph"> <p>To enable the JMX Exporter, simply specify the <code>JMX_EXPORTER_PORT</code> environment variable when creating a container based on <code>debezium/debezium-server:2.7</code> or later, and making sure that the agent&#8217;s port is accessible to the outside world on the container.</p> </div> <div class="admonitionblock note"> <table> <tr> <td class="icon"> <i class="fa icon-note" title="Note"></i> </td> <td class="content"> <div class="paragraph"> <p>The JMX Exporter uses the configuration in <code>config/metrics.yml</code> by default. If this configuration is insufficient, you will need to explicitly mount a custom file with the desired configuration to override the container&#8217;s file.</p> </div> </td> </tr> </table> </div> </div> </div> <div class="sect2"> <h3 id="new-features-operator">Kubernetes Operator</h3> <div class="sect3"> <h4 id="install_debezium_operator_with_helm_chart">Install Debezium Operator with Helm Chart</h4> <div class="paragraph"> <p>To improve the deployment of the Debezium Operator, it can be installed with a helm chart at <a href="https://charts.debezium.io" class="bare">https://charts.debezium.io</a>. This avoids the overly complicated deployment model of installing the operator into separate namespaces, minimizing the complexities for managing multiple Debezium Server deployments on Kubernetes.</p> </div> </div> <div class="sect3"> <h4 id="enabling_jmx_exporter_with_debezium_operator">Enabling JMX Exporter with Debezium Operator</h4> <div class="paragraph"> <p>If you are deploying Debezium Server on Kubernetes using the Debezium Operator, the new JMX Exporter feature in Debezium Server can be enabled directly through the operator custom resource (<a href="https://issues.redhat.com/browse/DBZ-7914">DBZ-7914</a>). To get started using the exporter with the operator, new configuration operations were added:</p> </div> <div class="listingblock"> <div class="content"> <pre class="CodeRay highlight"><code data-lang="yml"><span class="key">runtime</span>:
  <span class="key">metrics</span>:
    <span class="key">jmxExporter</span>:
      <span class="key">enabled</span>: <span class="string"><span class="content">true</span></span>
      <span class="key">configFrom</span>:
        <span class="key">key1</span>: <span class="string"><span class="content">value1</span></span>
        <span class="key">key2</span>: <span class="string"><span class="content">value2</span></span></code></pre> </div> </div> <div class="paragraph"> <p>In the custom resource, the <code>jmxExporter.enabled</code> toggles the exporter on or off. Additionally, the metrics configuration can be supplied using key/value pairs in the <code>jmxExporter.configFrom</code> section.</p> </div> </div> <div class="sect3"> <h4 id="stopping_debezium_server_when_scaled_to_zero">Stopping Debezium Server when scaled to zero</h4> <div class="paragraph"> <p>Debezium Server is stopped when scaling the replicas to zero using the annotation, <code>debezium.io/stop=true</code> (<a href="https://issues.redhat.com/browse/DBZ-7953">DBZ-7953</a>).</p> </div> </div> </div> </div> </div> <div class="sect1"> <h2 id="other-changes">Other changes</h2> <div class="sectionbody"> <div class="paragraph"> <p>In total, <a href="https://issues.redhat.com/issues/?jql=project%20%3D%20DBZ%20and%20fixVersion%20%20in%20(2.7.0.Alpha1%2C%202.7.0.Alpha2%2C%202.7.0.Beta1%2C%202.7.0.CR1%2C%202.7.0.Final)">140 issues</a> were resolved in Debezium 2.7. The list of changes can also be found in our <a href="https://debezium.io/releases/2.7">release notes</a>. A big thank you to all the contributors from the community who worked diligently on this release: Ashwin Murali Krishnan, <a href="https://github.com/acristu">Alexandru Cristu</a>, <a href="https://github.com/samssh">Amirmohammad Sadat Shokouhi</a>, <a href="https://github.com/jchipmunk">Andrey Pustovetov</a>, <a href="https://github.com/adasari">Anil Dasari</a>, <a href="https://github.com/ani-sha">Anisha Mohanty</a>, <a href="https://github.com/ankurg03">Ankur Gupta</a>, <a href="https://github.com/aristofanisl">Aristofanis Lekkos</a>, <a href="https://github.com/bpaquet">Bertrand Paquet</a>, <a href="https://github.com/cjho0316">Choi Jang Ho</a>, <a href="https://github.com/Naros">Chris Cranford</a>, <a href="https://github.com/chrisrecalis">Chris Recalis</a>, <a href="https://github.com/chungeun-choi">Chungeun Choi</a>, <a href="https://github.com/calmera">Daan Gerits</a>, <a href="https://github.com/DLT1412">Duc Le Tu</a>, <a href="https://github.com/gaurav7261">Gaurav Miglani</a>, <a href="https://github.com/ilyasahsan123">Ilyas Ahsan</a>, <a href="https://github.com/ismailsimsek">Ismail Simsek</a>, <a href="https://github.com/jcechace">Jakub Cechacek</a>, <a href="https://github.com/novotnyJiri">Jiri Novotny</a>, <a href="https://github.com/jpechane">Jiri Pechanec</a>, <a href="https://github.com/joschi">Jochen Schalanda</a>, <a href="https://github.com/zeldanerd24">Kevin Rothenberger</a>, <a href="https://github.com/nrkljo">Lars M. Johansson</a>, <a href="https://github.com/methodmissing">Lourens Naudé</a>, <a href="https://github.com/Maithem">Maithem</a>, <a href="https://github.com/mfvitale">Mario Fiore Vitale</a>, <a href="https://github.com/markbanierink">Mark Banierink</a>, <a href="https://github.com/MartinMedek">Martin Medek</a>, <a href="https://github.com/augi">Michal Augustýn</a>, <a href="https://github.com/michal-k-gl">Michal Pioun</a>, <a href="https://github.com/obabec">Ondrej Babec</a>, <a href="https://github.com/ppiastucki-vgw">Piotr Piastucki</a>, <a href="https://github.com/PradeepNain">Pradeep Nain</a>, <a href="https://github.com/rajdangwal">Rajendra Dangwal</a>, <a href="https://github.com/roldanbob">Robert Roldan</a>, <a href="https://github.com/rmoff">Robin Moffatt</a>, <a href="https://github.com/rkudryashov">Roman Kudryashov</a>, <a href="https://github.com/sullis">Sean C. Sullivan</a>, <a href="https://github.com/selman-genc-alg">Selman Genç</a>, <a href="https://github.com/joontube">Seongjoon Jeong</a>, Indra Shukla, <a href="https://github.com/SylvainMarty">Sylvain Marty</a>, <a href="https://github.com/twthorn">Thomas Thornton</a>, <a href="https://github.com/TomaszGaweda">Tomasz Gawęda</a>, <a href="https://github.com/ramanenka">Vadzim Ramanenka</a>, <a href="https://github.com/vjuranek">Vojtech Juranek</a>, <a href="https://github.com/vjuranek">Vojtěch Juránek</a>, <a href="https://github.com/einar-rt">einar-rt</a>, <a href="https://github.com/ismailsimsek">ismail simsek</a>, <a href="https://github.com/leoloel">leoloel</a>, and Mathijs van den Worm!</p> </div> </div> </div> <div class="sect1"> <h2 id="whats-next">What&#8217;s next &amp; Outlook</h2> <div class="sectionbody"> <div class="paragraph"> <p>With the release of Debezium 2.7, the team is now switching gears and heavily focusing on the next major milestone, <strong>Debezium 3.0</strong>. This next major release includes a variety of changes, including but not limited to:</p> </div> <div class="ulist"> <ul> <li> <p>Java 17 as baseline</p> </li> <li> <p>Kafka 3.1+ as baseline</p> </li> <li> <p>New off-heap Oracle cache implementations based on EhCache &amp; Hazelcast</p> </li> <li> <p>Exactly-once semantics support for other relational connectors</p> </li> <li> <p>Sink connector for MongoDB</p> </li> <li> <p>and more</p> </li> </ul> </div> <div class="paragraph"> <p>This list represents a quick glance view at just what&#8217;s at the top of our queue, and is subject to change. If you&#8217;d like to get involved in the conversation about Debezium 3.0 and the next evolution of the project, contact us on the <a href="https://groups.google.com/g/debezium">mailing list</a> or <a href="https://debezium.zulipchat.com/login/#narrow/stream/302529-users">Zulip chat</a>. As always, please review our <a href="https://debezium.io/roadmap">road map</a> for more details.</p> </div> <div class="paragraph"> <p>As summer is in full swing and holiday plans are starting for many, be safe. Until next time&#8230;&#8203;</p> </div> </div> </div>]]></content><author><name>Chris Cranford</name></author><category term="releases"/><category term="mongodb"/><category term="mysql"/><category term="mariadb"/><category term="postgres"/><category term="sqlserver"/><category term="cassandra"/><category term="oracle"/><category term="db2"/><category term="vitess"/><category term="outbox"/><category term="spanner"/><category term="jdbc"/><category term="informix"/><category term="ibmi"/><summary type="html"><![CDATA[As the team leaps into Q3, we&#8217;re happy to announce the fruits of our Q2 work, Debezium 2.7.0.Final is now generally available. This release includes changes for 140 issues with contributions from over 51 contributors. Let&#8217;s take a moment and review all the changes.]]></summary></entry><entry><title type="html">Debezium 2.7.0.Beta1 Released</title><link href="https://debezium.io/blog/2024/06/06/debezium-2-7-beta1-released/" rel="alternate" type="text/html" title="Debezium 2.7.0.Beta1 Released"/><published>2024-06-06T00:00:00+00:00</published><updated>2024-06-06T00:00:00+00:00</updated><id>https://debezium.io/blog/2024/06/06/debezium-2-7-beta1-released</id><content type="html" xml:base="https://debezium.io/blog/2024/06/06/debezium-2-7-beta1-released/"><![CDATA[<div class="paragraph"> <p>Although half of 2024 is nearly behind us, the team is pleased to announce the first beta preview release for Debezium, <strong>2.7.0.Beta1</strong>.</p> </div> <div class="paragraph"> <p>This release includes incubating support for Db2 on z/OS, authentication and encryption with NATS JetStream, improvements for the MariaDB JDBC sink dialect, JMX Exporter with Debezium Server images, configurable metrics in Debezium Operator, and more.</p> </div> <div class="paragraph"> <p>Let&#8217;s walk through all the highlights and discuss these in more depth&#8230;&#8203;</p> </div> <div class="paragraph"> <p></p> </div> <div class="sect1"> <h2 id="breaking-changes">Breaking changes</h2> <div class="sectionbody"> <div class="paragraph"> <p>The team aims to avoid any potential breaking changes between minor releases; however, such changes are sometimes inevitable.</p> </div> <div class="dlist"> <dl> <dt class="hdlist1">Snapshot Artifacts</dt> <dd> <p>Debezium snapshots were previously published to <code>oss.sonatype.org</code>. Sonatype has retired this repository and replaced it with <code>s01.oss.sonatype.org</code> (<a href="https://issues.redhat.com/browse/DBZ-7641">DBZ-7641</a>). If you wish to fetch Debezium snapshot artifacts, be sure to migrate your scripts and resources to use the new infrastructure.</p> </dd> <dt class="hdlist1">Oracle</dt> <dd> <p>In previous versions, <code>NUMERIC</code> data types with zero-scale ignored <code>decimal.handling.mode</code>, which prevented these values from being emitted as <code>FLOAT64</code> (double) or <code>STRING</code> based types when using a non-default decimal handling mode configuration. We have adjusted the behavior so that zero-scale numeric data types honor the decimal handling mode (<a href="https://issues.redhat.com/browse/DBZ-7882">DBZ-7882</a>).</p> </dd> </dl> </div> <div class="admonitionblock note"> <table> <tr> <td class="icon"> <i class="fa icon-note" title="Note"></i> </td> <td class="content"> <div class="paragraph"> <p>If you use strict compatibility with schema registries, this will lead to incompatible schema concerns, and you&#8217;ll need to adjust the compatibility settings in the schema registry.</p> </div> </td> </tr> </table> </div> </div> </div> <div class="sect1"> <h2 id="new-features-and-improvements">New features and improvements</h2> <div class="sectionbody"> <div class="paragraph"> <p>Debezium 2.7.0.Beta1 also introduces many improvements and features, lets take a look at each individually.</p> </div> <div class="sect2"> <h3 id="support_db2_on_zos">Support Db2 on z/OS</h3> <div class="paragraph"> <p>Debezium 2.7 introduces incubating support for using the Db2 connector on the z/OS platform. For the Db2 connector to work with z/OS, several configuration options are required to toggle the connector to work with the z/OS platform database (<a href="https://issues.redhat.com/browse/DBZ-4812">DBZ-4812</a>).</p> </div> <div class="listingblock"> <div class="title">New connector properties</div> <div class="content"> <pre class="CodeRay highlight"><code data-lang="json">{
  <span class="error">.</span><span class="error">.</span><span class="error">.</span>,
  <span class="key"><span class="delimiter">&quot;</span><span class="content">db2.platform</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">ZOS</span><span class="delimiter">&quot;</span></span>,
  <span class="key"><span class="delimiter">&quot;</span><span class="content">cdc.control.schema</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">ASNCDC</span><span class="delimiter">&quot;</span></span>,
  <span class="key"><span class="delimiter">&quot;</span><span class="content">cdc.change.tables.schema</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">ASNCDC</span><span class="delimiter">&quot;</span></span>
}</code></pre> </div> </div> <div class="paragraph"> <p>The primary toggle to run in z/OS mode is done using the <code>db2.platform</code>, which defaults to <code>LUW</code> for running on Linux, Unix, and Windows. Setting this configuration option to <code>ZOS</code> enables z/OS.</p> </div> <div class="paragraph"> <p>In addition, we have also added the <code>cdc.control.schema</code> and <code>cdc.change.tables.schema</code> connector configuration properties. These were previously hardcoded as <code>ASNCDC</code>, and while this remains the default, if your installation uses different schemas, this is now possible.</p> </div> <div class="admonitionblock note"> <table> <tr> <td class="icon"> <i class="fa icon-note" title="Note"></i> </td> <td class="content"> <div class="paragraph"> <p>For existing Db2 connectors for Linux, Unix, and Windows, no configuration changes are required when upgrading. The <code>db2.platform</code> is only required for z/OS and the schema properties only if you put these objects in a different schema than <code>ASNCDC</code>.</p> </div> </td> </tr> </table> </div> </div> <div class="sect2"> <h3 id="nats_jetstream_sink_authentication_improvements">NATS JetStream sink authentication improvements</h3> <div class="paragraph"> <p>The Debezium Server NATS JetStream sink also includes improvements to support authentication and encryption in Debezium 2.7. Several new configuration properties are now supported to pass keystore details to the sink adapter (<a href="https://issues.redhat.com/browse/DBZ-7922">DBZ-7922</a>).</p> </div> <div class="listingblock"> <div class="title">New configuration properties</div> <div class="content"> <pre class="CodeRay highlight"><code data-lang="properties">...
debezium.sink.nats-jetstream.auth.tls.keystore=&lt;path-to-keystore-file&gt;
debezium.sink.nats-jetstream.auth.tls.keystore.password=secret-password
debezium.sink.nats-jetstream.auth.tls.password=&lt;tls-password&gt;</code></pre> </div> </div> <div class="paragraph"> <p>To get started using the new authentication and encryption features, simply include the above three configurations into your Debezium Server configuration with appropriate values.</p> </div> </div> <div class="sect2"> <h3 id="jdbc_sink_mariadb_dialect_support">JDBC sink MariaDB dialect support</h3> <div class="paragraph"> <p>While MariaDB and MySQL often share a lot of similar syntax, unfortunately there are corner cases where these two vary slightly that introduces incompatibilities. One such incompatibility was found with now the Debezium JDBC sink constructed <em>upsert</em> statements, which could not be executed when using a MariaDB target database.</p> </div> <div class="paragraph"> <p>Debezium 2.7 officially introduces MariaDB dialect support for the JDBC sink connector, enabling users to configure the JDBC sink to write changes from Kafka topics to a MariaDB target (<a href="https://issues.redhat.com/browse/DBZ-7874">DBZ-7874</a>). In general, no special configuration should be necessary as both Hibernate and Debezium should detect the target is MariaDB and use the correct dialects.</p> </div> <div class="admonitionblock note"> <table> <tr> <td class="icon"> <i class="fa icon-note" title="Note"></i> </td> <td class="content"> <div class="paragraph"> <p>If you find the dialect resolution does not resolve to MariaDB, you can enforce its use by setting the connector configuration <code>hibernate.dialect</code> with the fully qualified class name <code>org.hibernate.dialect.MariaDBDialect</code>.</p> </div> </td> </tr> </table> </div> <div class="admonitionblock note"> <table> <tr> <td class="icon"> <i class="fa icon-note" title="Note"></i> </td> <td class="content"> <div class="paragraph"> <p>We are currently aware that if you wish to use MariaDB, the driver is not shipped as part of the JDBC sink connector dependency stack. This has been recorded in <a href="https://issues.redhat.com/browse/DBZ-7918">DBZ-7818</a> and will be fixed in the next release. For now, download and install the driver manually alongside the JDBC connector jars.</p> </div> </td> </tr> </table> </div> </div> <div class="sect2"> <h3 id="jmx_exporter_added_to_debezium_server">JMX Exporter added to Debezium Server</h3> <div class="paragraph"> <p>The JMX Exporter agent has been added as part of the Debezium Server container image. This should enable users to easily fetch connector metrics while running Debezium Server out of the box (<a href="https://issues.redhat.com/browse/DBZ-7913">DBZ-7913</a>).</p> </div> <div class="paragraph"> <p>To enable the JMX Exporter, simply specify the <code>JMX_EXPORTER_PORT</code> environment variable when creating a container based on <code>debezium/debezium-server:2.7</code> or later, and making sure that the agent&#8217;s port is accessible to the outside world on the container.</p> </div> <div class="admonitionblock note"> <table> <tr> <td class="icon"> <i class="fa icon-note" title="Note"></i> </td> <td class="content"> <div class="paragraph"> <p>The JMX Exporter uses the configuration in <code>config/metrics.yml</code> by default. If this configuration is insufficient, you will need to explicitly mount a custom file with the desired configuration to override the container&#8217;s file.</p> </div> </td> </tr> </table> </div> </div> <div class="sect2"> <h3 id="enabling_jmx_exporter_with_debezium_operator">Enabling JMX Exporter with Debezium Operator</h3> <div class="paragraph"> <p>If you are deploying Debezium Server on Kubernetes using the Debezium Operator, the new JMX Exporter feature in Debezium Server can be enabled directly through the operator custom resource (<a href="https://issues.redhat.com/browse/DBZ-7914">DBZ-7914</a>). To get started using the exporter with the operator, new configuration operations were added:</p> </div> <div class="listingblock"> <div class="content"> <pre class="CodeRay highlight"><code data-lang="yml"><span class="key">runtime</span>:
  <span class="key">metrics</span>:
    <span class="key">jmxExporter</span>:
      <span class="key">enabled</span>: <span class="string"><span class="content">true</span></span>
      <span class="key">configFrom</span>:
        <span class="key">key1</span>: <span class="string"><span class="content">value1</span></span>
        <span class="key">key2</span>: <span class="string"><span class="content">value2</span></span></code></pre> </div> </div> <div class="paragraph"> <p>In the custom resource, the <code>jmxExporter.enabled</code> toggles the exporter on or off. Additionally, the metrics configuration can be supplied using key/value pairs in the <code>jmxExporter.configFrom</code> section.</p> </div> </div> <div class="sect2"> <h3 id="optional_delay_between_snapshot_streaming">Optional delay between snapshot &amp; streaming</h3> <div class="paragraph"> <p>Debezium 2.7 ships with a new global configuration option, <code>streaming.delay.ms</code>. This new option causes the connector to perform a delay before it starts the streaming phase (<a href="https://issues.redhat.com/browse/DBZ-7902">DBZ-7902</a>).</p> </div> <div class="paragraph"> <p>For some deployment use cases, you may want to guarantee that at least one offset flush interval has happened before the streaming phase begins. In such use cases, uses should guarantee that both properties, <code>streaming.delay.ms</code> and <code>offset.flush.interval.ms</code> are aligned.</p> </div> <div class="paragraph"> <p>By default, Debezium will not perform a delay and immediately transitions to the streaming phase to remain consistent with prior version behavior.</p> </div> </div> </div> </div> <div class="sect1"> <h2 id="other-changes">Other changes</h2> <div class="sectionbody"> <div class="paragraph"> <p>Altogether, <a href="https://issues.redhat.com/issues/?jql=project%20%3D%20DBZ%20AND%20fixVersion%20%3D%202.7.0.Beta1%20ORDER%20BY%20issuetype%20DESC">36 issues</a> were fixed in this release. Here are a list of some additional noteworthy changes:</p> </div> <div class="ulist"> <ul> <li> <p>Debezium 1.9.2 cannot capture field that is date type of postgres <a href="https://issues.redhat.com/browse/DBZ-5182">DBZ-5182</a></p> </li> <li> <p>Ensure vgtid remains local to shards streamed by task <a href="https://issues.redhat.com/browse/DBZ-6721">DBZ-6721</a></p> </li> <li> <p>Decompose provide.transaction.metadata into components <a href="https://issues.redhat.com/browse/DBZ-6722">DBZ-6722</a></p> </li> <li> <p>Handle Enum as String or Int <a href="https://issues.redhat.com/browse/DBZ-7792">DBZ-7792</a></p> </li> <li> <p>Rewrite batch statement not supported for jdbc debezium sink <a href="https://issues.redhat.com/browse/DBZ-7845">DBZ-7845</a></p> </li> <li> <p>Debezium MySQL Snapshot Connector Fails <a href="https://issues.redhat.com/browse/DBZ-7858">DBZ-7858</a></p> </li> <li> <p>Reduce enum array allocation <a href="https://issues.redhat.com/browse/DBZ-7859">DBZ-7859</a></p> </li> <li> <p>Snapshot retrying logic falls into infinite retry loop <a href="https://issues.redhat.com/browse/DBZ-7860">DBZ-7860</a></p> </li> <li> <p>Bump Java in Debezium Server images <a href="https://issues.redhat.com/browse/DBZ-7861">DBZ-7861</a></p> </li> <li> <p>Default value of error retries not interpreted correctly <a href="https://issues.redhat.com/browse/DBZ-7870">DBZ-7870</a></p> </li> <li> <p>Avro schema compatibility issues when upgrading from Oracle Debezium 2.5.3.Final to 2.6.1.Final <a href="https://issues.redhat.com/browse/DBZ-7880">DBZ-7880</a></p> </li> <li> <p>Improve offset and history storage configuration <a href="https://issues.redhat.com/browse/DBZ-7884">DBZ-7884</a></p> </li> <li> <p>Oracle Debezium Connector cannot startup due to failing incremental snapshot <a href="https://issues.redhat.com/browse/DBZ-7886">DBZ-7886</a></p> </li> <li> <p>Allow customizing ObjectMapper in JsonSerde <a href="https://issues.redhat.com/browse/DBZ-7887">DBZ-7887</a></p> </li> <li> <p>Multiple completed reading from a capture instance notifications <a href="https://issues.redhat.com/browse/DBZ-7889">DBZ-7889</a></p> </li> <li> <p>Debezium can&#8217;t handle columns with # in its name <a href="https://issues.redhat.com/browse/DBZ-7893">DBZ-7893</a></p> </li> <li> <p>Oracle interval default values are not properly parsed <a href="https://issues.redhat.com/browse/DBZ-7898">DBZ-7898</a></p> </li> <li> <p>Debezium server unable to shutdown on pubsub error <a href="https://issues.redhat.com/browse/DBZ-7904">DBZ-7904</a></p> </li> <li> <p>Handle gtid without range only single position <a href="https://issues.redhat.com/browse/DBZ-7905">DBZ-7905</a></p> </li> <li> <p>Enhancing the threads utility class for broader use <a href="https://issues.redhat.com/browse/DBZ-7906">DBZ-7906</a></p> </li> <li> <p>Oracle connector cannot parse SUBPARTITION when altering table <a href="https://issues.redhat.com/browse/DBZ-7908">DBZ-7908</a></p> </li> <li> <p>Make column exclude use keyspace not shard <a href="https://issues.redhat.com/browse/DBZ-7910">DBZ-7910</a></p> </li> <li> <p>The explanation in the documentation is insufficient - metric <a href="https://issues.redhat.com/browse/DBZ-7912">DBZ-7912</a></p> </li> </ul> </div> <div class="paragraph"> <p>A huge thank you to all contributors from the community who worked on this release: Ashwin Murali Krishnan, Mathijs van den Worm, <a href="https://github.com/ankurg03">Ankur Gupta</a>, <a href="https://github.com/aristofanisl">Aristofanis Lekkos</a>, <a href="https://github.com/Naros">Chris Cranford</a>, <a href="https://github.com/chungeun-choi">Chungeun Choi</a>, <a href="https://github.com/gaurav7261">Gaurav Miglani</a>, <a href="https://github.com/ankurg03">Ankur Gupta</a>, <a href="https://github.com/jcechace">Jakub Cechacek</a>, <a href="https://github.com/jpechane">Jiri Pechanec</a>, <a href="https://github.com/mfvitale">Mario Fiore Vitale</a>, <a href="https://github.com/markbanierink">Mark Banierink</a>, <a href="https://github.com/augi">Michal Augustýn</a>, <a href="https://github.com/rajdangwal">Rajendra Dangwal</a>, <a href="https://github.com/roldanbob">Robert Roldan</a>, <a href="https://github.com/rkudryashov">Roman Kudryashov</a>, <a href="https://github.com/sullis">Sean C. Sullivan</a>, <a href="https://github.com/joontube">Seongjoon Jeong</a>, <a href="https://github.com/SylvainMarty">Sylvain Marty</a>, <a href="https://github.com/twthorn">Thomas Thornton</a>, <a href="https://github.com/ramanenka">Vadzim Ramanenka</a>, <a href="https://github.com/vjuranek">Vojtech Juranek</a>, and <a href="https://github.com/einar-rt">einar-rt</a>!</p> </div> </div> </div>]]></content><author><name>Chris Cranford</name></author><category term="releases"/><category term="mongodb"/><category term="mysql"/><category term="mariadb"/><category term="postgres"/><category term="sqlserver"/><category term="cassandra"/><category term="oracle"/><category term="db2"/><category term="vitess"/><category term="outbox"/><category term="spanner"/><category term="jdbc"/><category term="informix"/><category term="ibmi"/><summary type="html"><![CDATA[Although half of 2024 is nearly behind us, the team is pleased to announce the first beta preview release for Debezium, 2.7.0.Beta1. This release includes incubating support for Db2 on z/OS, authentication and encryption with NATS JetStream, improvements for the MariaDB JDBC sink dialect, JMX Exporter with Debezium Server images, configurable metrics in Debezium Operator, and more. Let&#8217;s walk through all the highlights and discuss these in more depth&#8230;&#8203;]]></summary></entry><entry><title type="html">Debezium 2.6.2.Final Released</title><link href="https://debezium.io/blog/2024/05/30/debezium-2-6-2-final-released/" rel="alternate" type="text/html" title="Debezium 2.6.2.Final Released"/><published>2024-05-30T00:00:00+00:00</published><updated>2024-05-30T00:00:00+00:00</updated><id>https://debezium.io/blog/2024/05/30/debezium-2-6-2-final-released</id><content type="html" xml:base="https://debezium.io/blog/2024/05/30/debezium-2-6-2-final-released/"><![CDATA[<div class="paragraph"> <p>I&#8217;m pleased to announce the immediate availability of Debezium <strong>2.6.2.Final</strong>. This release is the second maintenance release that focuses on addressing several critical stability issues with the 2.6.1.Final release, support for Oracle database query filtering with more than one thousand tables, fixed race condition with PostgreSQL offset flushing, fixed Avro compatibility, and more.</p> </div> <div class="paragraph"> <p>Let&#8217;s take a few moments and dive into these and more&#8230;&#8203;</p> </div> <div class="paragraph"> <p></p> </div> <div class="sect1"> <h2 id="new-features-and-improvements">New features and improvements</h2> <div class="sectionbody"> <div class="paragraph"> <p>Debezium 2.6.2.Final introduces one new feature, lets take a look at it.</p> </div> <div class="sect2"> <h3 id="oracle_database_query_filtering_with_1000_tables">Oracle database query filtering with 1000+ tables</h3> <div class="paragraph"> <p>The Debezium Oracle connector allows configuring the table include and exclude lists to be applied as part of the database query for efficiency reasons using the <code>log.mining.query.filter.mode</code>. When setting this configuration property to a value of <code>in</code>, the query is constructed using a SQL in-clause. In Oracle, an in-clause is restricted to one thousand elements, and if your connector configuration exceeded this limit, the query would fail to execute.</p> </div> <div class="paragraph"> <p>Debezium 2.6 addresses this by creating sub-buckets of exactly one thousand elements and constructs the query using multiple in-clauses separated by a disjunction if the table include and exclude lists are too large. This improves the user experience, allowing a single connector to capture more than one thousand tables with a single deployment, using the query filter mode, and without resorting to regular expressions. (<a href="https://issues.redhat.com/browse/DBZ-7847">DBZ-7847</a>).</p> </div> </div> </div> </div> <div class="sect1"> <h2 id="important-fixes">Fixes and stability improvements</h2> <div class="sectionbody"> <div class="paragraph"> <p>Debezium 2.6.2.Final introduces several new bug fixes and stability improvements, lets take a look at a few of them.</p> </div> <div class="sect2"> <h3 id="postgresql_offset_flush_race_condition">PostgreSQL offset flush race condition</h3> <div class="paragraph"> <p>The Debezium PostgreSQL connector requires that not only do we publish offset metadata to Kafka to handle connector restarts, but the connector must also flush these details to the database&#8217;s underlying replication slot to prevent unbounded WAL growth.</p> </div> <div class="paragraph"> <p>Using an example, let&#8217;s propose we have two changes for LSN <code>1</code> and <code>2</code>. Both of these changes are written to two different partitions, <code>A</code> and <code>B</code>, respectively. As this happens asynchronously, it&#8217;s possible that the write to partition <code>B</code> succeeds while the write to partition <code>A</code> fails.</p> </div> <div class="paragraph"> <p>If Debezium receives acknowledgement for partition <code>B</code> before <code>A</code>, the connector will synchronize the WAL confirmed LSN as <code>2</code>. Should the connector fail before acknowledging partition <code>A</code> or get restarted due to a rebalance, upon connector restart the change for LSN <code>1</code> is lost.</p> </div> <div class="paragraph"> <p>This problem has been fixed in Debezium 2.6 onward, and the replication slot&#8217;s confirmed LSN will correctly match the state in the topics (<a href="https://issues.redhat.com/browse/DBZ-7816">DBZ-7816</a>).</p> </div> </div> <div class="sect2"> <h3 id="avro_compatibility">Avro compatibility</h3> <div class="paragraph"> <p>In Debezium 2.5, we introduced several new timestamp fields, <code>ts_us</code>, and <code>ts_ns</code>, which represent the millisecond-based time values in microseconds and nanoseconds. Unfortunately, these fields were not introduced in a compatible way for users who use Avro (<a href="https://issues.redhat.com/browse/DBZ-7880">DBZ-7880</a>).</p> </div> <div class="paragraph"> <p>We have adjusted the change event schema so that the new fields introduced are optional, making the change event schema compatible with old versions so that users can upgrade to Debezium 2.6 or later without issues using Avro.</p> </div> </div> </div> </div> <div class="sect1"> <h2 id="other_fixes">Other fixes</h2> <div class="sectionbody"> <div class="ulist"> <ul> <li> <p>After the initial deployment of Debezium, if a new table is added to MSSQL, its schema is was captured <a href="https://issues.redhat.com/browse/DBZ-7697">DBZ-7697</a></p> </li> <li> <p>NO_DATA snapshot mode validation throw DebeziumException on restarts if snapshot is not completed <a href="https://issues.redhat.com/browse/DBZ-7780">DBZ-7780</a></p> </li> <li> <p>DDL statement couldn&#8217;t be parsed <a href="https://issues.redhat.com/browse/DBZ-7788">DBZ-7788</a></p> </li> <li> <p>old class reference in ibmi-connector services <a href="https://issues.redhat.com/browse/DBZ-7795">DBZ-7795</a></p> </li> <li> <p>Ad-hoc blocking snapshot not working through file channeling without inserting a row in the database. <a href="https://issues.redhat.com/browse/DBZ-7806">DBZ-7806</a></p> </li> <li> <p>Postgres: Potential data loss on connector restart <a href="https://issues.redhat.com/browse/DBZ-7816">DBZ-7816</a></p> </li> <li> <p>Add c3p0 timeout configuration example to JDBC sink <a href="https://issues.redhat.com/browse/DBZ-7822">DBZ-7822</a></p> </li> <li> <p>Sql Server incorrectly applying quoted snapshot statement overrides <a href="https://issues.redhat.com/browse/DBZ-7828">DBZ-7828</a></p> </li> <li> <p>Debezium JDBC Sink not handle order correctly <a href="https://issues.redhat.com/browse/DBZ-7830">DBZ-7830</a></p> </li> <li> <p>in the Cassandra documentation, there is a typo which should have been disable not Dusable. <a href="https://issues.redhat.com/browse/DBZ-7851">DBZ-7851</a></p> </li> <li> <p>Debezium MySQL Snapshot Connector Fails <a href="https://issues.redhat.com/browse/DBZ-7858">DBZ-7858</a></p> </li> <li> <p>Support Oracle DDL Alter Audit Policy <a href="https://issues.redhat.com/browse/DBZ-7864">DBZ-7864</a></p> </li> <li> <p>Support Oracle DDL Create Audit Policy <a href="https://issues.redhat.com/browse/DBZ-7865">DBZ-7865</a></p> </li> <li> <p>Default value of error retries not interpreted correctly <a href="https://issues.redhat.com/browse/DBZ-7870">DBZ-7870</a></p> </li> <li> <p>Too much logs after Debezium update <a href="https://issues.redhat.com/browse/DBZ-7871">DBZ-7871</a></p> </li> <li> <p>Avro schema compatibility issues when upgrading from Oracle Debezium 2.5.3.Final to 2.6.1.Final <a href="https://issues.redhat.com/browse/DBZ-7880">DBZ-7880</a></p> </li> <li> <p>ParsingException (MySQL 8): create trigger if exists <a href="https://issues.redhat.com/browse/DBZ-7881">DBZ-7881</a></p> </li> <li> <p>Debezium can&#8217;t handle columns with # in its name <a href="https://issues.redhat.com/browse/DBZ-7893">DBZ-7893</a></p> </li> <li> <p>Oracle interval default values are not properly parsed <a href="https://issues.redhat.com/browse/DBZ-7898">DBZ-7898</a></p> </li> </ul> </div> <div class="paragraph"> <p>In total there were <a href="https://issues.redhat.com/issues/?jql=project%20%3D%20DBZ%20and%20fixVersion%20%20in%20(2.6.2.Final)">20 issues</a> resolved in Debezium 2.6.2.Final. The list of changes can also be found in our <a href="https://debezium.io/releases/2.6">release notes</a>.</p> </div> <div class="paragraph"> <p>A big thank you to all the contributors from the community who worked diligently on this release: <a href="https://github.com/adasari">Anil Dasari</a>, <a href="https://github.com/Naros">Chris Cranford</a>, <a href="https://github.com/DLT1412">Duc Le Tu</a>, <a href="https://github.com/ilyasahsan123">Ilyas Ahsan</a>, <a href="https://github.com/jpechane">Jiri Pechanec</a>, <a href="https://github.com/joschi">Jochen Schalanda</a>, <a href="https://github.com/mfvitale">Mario Fiore Vitale</a>, <a href="https://github.com/augi">Michal Augustýn</a>, <a href="https://github.com/PradeepNain">Pradeep Nain</a>, <a href="https://github.com/roldanbob">Robert Roldan</a>, <a href="https://github.com/rmoff">Robin Moffatt</a>, <a href="https://github.com/rkudryashov">Roman Kudryashov</a>, and <a href="https://github.com/ramanenka">Vadzim Ramanenka</a>!</p> </div> </div> </div>]]></content><author><name>Chris Cranford</name></author><category term="releases"/><category term="mongodb"/><category term="mysql"/><category term="mariadb"/><category term="postgres"/><category term="sqlserver"/><category term="cassandra"/><category term="oracle"/><category term="db2"/><category term="vitess"/><category term="outbox"/><category term="spanner"/><category term="jdbc"/><category term="informix"/><category term="ibmi"/><summary type="html"><![CDATA[I&#8217;m pleased to announce the immediate availability of Debezium 2.6.2.Final. This release is the second maintenance release that focuses on addressing several critical stability issues with the 2.6.1.Final release, support for Oracle database query filtering with more than one thousand tables, fixed race condition with PostgreSQL offset flushing, fixed Avro compatibility, and more. Let&#8217;s take a few moments and dive into these and more&#8230;&#8203;]]></summary></entry><entry><title type="html">Debezium 2.7.0.Alpha2 Released</title><link href="https://debezium.io/blog/2024/05/13/debezium-2-7-alpha2-released/" rel="alternate" type="text/html" title="Debezium 2.7.0.Alpha2 Released"/><published>2024-05-13T00:00:00+00:00</published><updated>2024-05-13T00:00:00+00:00</updated><id>https://debezium.io/blog/2024/05/13/debezium-2-7-alpha2-released</id><content type="html" xml:base="https://debezium.io/blog/2024/05/13/debezium-2-7-alpha2-released/"><![CDATA[<div class="paragraph"> <p>The old saying is "April showers bring May flowers"; however, in this case it seems a new Debezium release has sprouted packed with many new features. We&#8217;re pleased to announce the release of Debezium <strong>2.7.0.Alpha2</strong>, the next pre-release in the Debezium 2.7 stream, is now available for testing.</p> </div> <div class="paragraph"> <p>This release includes new ROW_ID serialization for the Oracle connector, PostgreSQL array support for the JDBC sink connector, NATs authentication with Debezium Server, performance improvements with Oracle LogMiner and large tables, and more. Let&#8217;s walk through the highlights of this release and discuss these and more in-depth&#8230;&#8203;</p> </div> <div class="paragraph"> <p></p> </div> <div class="sect1"> <h2 id="new-features-and-improvements">New features and improvements</h2> <div class="sectionbody"> <div class="paragraph"> <p>Debezium 2.7.0.Alpha2 also introduces many improvements and features, lets take a look at each individually.</p> </div> <div class="sect2"> <h3 id="oracle_row_id_included_in_change_events">Oracle ROW_ID included in change events</h3> <div class="paragraph"> <p>While <code>ROW_ID</code> is not unique across all rows of a table for the table&#8217;s lifespan, it can be used in certain situations when the lifecycle of the table and rows are managed in a very strict way. At the community&#8217;s request, we&#8217;ve added a new <code>row_id</code> field to the Oracle connector&#8217;s change event source information block (<a href="https://issues.redhat.com/browse/DBZ-4332">DBZ-4332</a>). This new field will be populated with the <code>ROW_ID</code> value under the following conditions:</p> </div> <div class="ulist"> <ul> <li> <p>Only populated from streaming events for inserts, updates, and deletes.</p> </li> <li> <p>Snapshot evnets will not contain a <code>row_id</code> value.</p> </li> <li> <p>Only provided by the LogMiner and XStream streaming adapters, OpenLogReplicator is not supported.</p> </li> </ul> </div> <div class="paragraph"> <p>Any event that does not match the criteria will not include a <code>row_id</code> field as its marked as <em>optional</em>.</p> </div> </div> <div class="sect2"> <h3 id="postresql_arrays_with_the_jdbc_sink">PostreSQL Arrays with the JDBC sink</h3> <div class="paragraph"> <p>The JDBC sink connector supports the use of mapping source columns to Kafka ARRAY-based payload field types. With Debezium 2.7, you can now serialize ARRAY-based fields to a target PostgreSQL database, with no change in configuration. The new support should be completely transparent (<a href="https://issues.redhat.com/browse/DBZ-7752">DBZ-7752</a>).</p> </div> </div> <div class="sect2"> <h3 id="oracle_flush_table_with_custom_schema_names">Oracle flush table with custom schema names</h3> <div class="paragraph"> <p>In prior versions of Debezium, the Oracle connector was strictly designed to create the LogMiner flush table in the default tablespace of the connector user account. This wasn&#8217;t always useful in situations where the user&#8217;s default tablespace may not be the ideal destination and the DBA would prefer that table to exist in a separate tablespace.</p> </div> <div class="paragraph"> <p>Previously, users would need to modify the user account or use a new user with the correct tablespace to have the table created in the right tablespace location. With Debezium 2.7, this is no longer required, and you can safely include the name of the target schema/tablespace in the configuration (<a href="https://issues.redhat.com/browse/DBZ-7819">DBZ-7819</a>).</p> </div> <div class="listingblock"> <div class="title">Example using a custom schema name</div> <div class="content"> <pre class="CodeRay highlight"><code>log.mining.flush.table.name=THE_OTHER_SCHEMA.LOG_MINING_FLUSH_TABLE</code></pre> </div> </div> <div class="paragraph"> <p>The schema name is optional and if not supplied, the connector continues to use the same legacy behavior of creating the flush table and checking for its existence in the user&#8217;s default tablespace.</p> </div> </div> <div class="sect2"> <h3 id="nats_authentication_with_jwtseed">NATS authentication with JWT/seed</h3> <div class="paragraph"> <p>The Debezium Server NATs streaming sink adapter was improved, supporting JWT/seed based authentication (<a href="https://issues.redhat.com/browse/DBZ-7829">DBZ-7829</a>). To get started using the JWT/seed-based authentication, supply the following necessary values in the configuration:</p> </div> <div class="listingblock"> <div class="title">JWT authentication example</div> <div class="content"> <pre class="CodeRay highlight"><code>debezium.sink.nats-jetstream.auth.jwt=&lt;your_jwt_token&gt;</code></pre> </div> </div> <div class="listingblock"> <div class="title">Seed authentication example</div> <div class="content"> <pre class="CodeRay highlight"><code>debezium.sink.nats-jetstream.auth.seed=&lt;your_nkey_seed&gt;</code></pre> </div> </div> <div class="paragraph"> <p>For this and more, please see the NATS documentation for details about JWT and NKey seed based authentication.</p> </div> </div> <div class="sect2"> <h3 id="oracle_query_filter_with_large_numbers_of_tables">Oracle query filter with large numbers of tables</h3> <div class="paragraph"> <p>The Debezium Oracle connector can support thousands of tables in a single connector deployment with ease; however, you may have found you wanted to customize the query filter using the <code>IN</code> mode. This mode is used in situations where you may have a high volume of changes for other tables and you want to filter that dataset out at the database level before the changes are passed to Debezium for processing.</p> </div> <div class="paragraph"> <p>In earlier versions, users may have noticed that setting <code>log.mining.query.filter.mode</code> with a value of <code>in</code> and where your table include list contained more than 1000 elements generated a SQL error. Oracle does not permit more than 1000 elements within an in-clause; however, Debezium 2.7 addresses this limitation by using a disjunction between multiple buckets of 1000 item in-clause lists (<a href="https://issues.redhat.com/browse/DBZ-7847">DBZ-7847</a>).</p> </div> </div> </div> </div> <div class="sect1"> <h2 id="other-changes">Other changes</h2> <div class="sectionbody"> <div class="paragraph"> <p>Altogether, <a href="https://issues.redhat.com/issues/?jql=project%20%3D%20DBZ%20AND%20fixVersion%20%3D%202.7.0.Alpha2%20ORDER%20BY%20issuetype%20DESC">27 issues</a> were fixed in this release. Here are a list of some additional noteworthy changes:</p> </div> <div class="ulist"> <ul> <li> <p>Log exception details early in case MySQL keep-alive causes deadlock on shutdown <a href="https://issues.redhat.com/browse/DBZ-7570">DBZ-7570</a></p> </li> <li> <p>Extend mongodb system tests with ssl option <a href="https://issues.redhat.com/browse/DBZ-7605">DBZ-7605</a></p> </li> <li> <p>&gt; io.debezium.text.ParsingException : SQL Contains Partition <a href="https://issues.redhat.com/browse/DBZ-7805">DBZ-7805</a></p> </li> <li> <p>Ad-hoc blocking snapshot not working through file channeling without inserting a row in the database. <a href="https://issues.redhat.com/browse/DBZ-7806">DBZ-7806</a></p> </li> <li> <p>Postgres: Potential data loss on connector restart <a href="https://issues.redhat.com/browse/DBZ-7816">DBZ-7816</a></p> </li> <li> <p>DEBEZIUM_VERSION is wrongly set to 2.6.0.Alpha1 <a href="https://issues.redhat.com/browse/DBZ-7827">DBZ-7827</a></p> </li> <li> <p>Sql Server incorrectly applying quoted snapshot statement overrides <a href="https://issues.redhat.com/browse/DBZ-7828">DBZ-7828</a></p> </li> <li> <p>Debezium JDBC Sink not handle order correctly <a href="https://issues.redhat.com/browse/DBZ-7830">DBZ-7830</a></p> </li> <li> <p>Bump Outbox Extension to Quarkus 3.10.0 <a href="https://issues.redhat.com/browse/DBZ-7842">DBZ-7842</a></p> </li> <li> <p>Support Oracle DDL Alter Audit Policy <a href="https://issues.redhat.com/browse/DBZ-7864">DBZ-7864</a></p> </li> <li> <p>Support Oracle DDL Create Audit Policy <a href="https://issues.redhat.com/browse/DBZ-7865">DBZ-7865</a></p> </li> </ul> </div> <div class="paragraph"> <p>A huge thank you to all contributors from the community who worked on this release: <a href="https://github.com/acristu">Alexandru Cristu</a>, <a href="https://github.com/adasari">Anil Dasari</a>, <a href="https://github.com/bpaquet">Bertrand Paquet</a>, <a href="https://github.com/cjho0316">Choi Jang Ho</a>, <a href="https://github.com/Naros">Chris Cranford</a>, <a href="https://github.com/calmera">Daan Gerits</a>, <a href="https://github.com/DLT1412">Duc Le Tu</a>, <a href="https://github.com/ilyasahsan123">Ilyas Ahsan</a>, <a href="https://github.com/ismailsimsek">Ismail Simsek</a>, <a href="https://github.com/jpechane">Jiri Pechanec</a>, <a href="https://github.com/zeldanerd24">Kevin Rothenberger</a>, <a href="https://github.com/mfvitale">Mario Fiore Vitale</a>, <a href="https://github.com/MartinMedek">Martin Medek</a>, <a href="https://github.com/PradeepNain">Pradeep Nain</a>, <a href="https://github.com/roldanbob">Robert Roldan</a>, and <a href="https://github.com/leoloel">leoloel</a>!</p> </div> </div> </div> <div class="sect1"> <h2 id="whats-next">What&#8217;s next?</h2> <div class="sectionbody"> <div class="paragraph"> <p>We have our team face-to-face next week, and it&#8217;s going to be absolutely fantastic since its the first time we get to meet in person since the Covid pandemic. We&#8217;re going to use this time to discuss all the community feedback we&#8217;re received throughout Debezium 2, reflect on what worked, and put together action plans for what didn&#8217;t.</p> </div> <div class="paragraph"> <p>The main focus for our meeting is to develop an action plan for Debezium 3.0 and beyond, assign tasks and priorities across the team so that as we focus on Debezium 3 next quarter, we can make this next major release an easy replacement for the community while also delivering a new, refreshing, feature-rich major version. We will be updating the roadmap and deliverables when we&#8217;re back, so be sure to stay tuned to our <a href="/docs/roadmap">road map</a>.</p> </div> <div class="paragraph"> <p>In terms of Debezium 2.7, we&#8217;re halfway through the quarter, and we&#8217;re about to turn our focus on the last half where we will address any bugs, regressions, and polish new features. If you have the chance to test-drive the pre-releases, we strongly encourage you to do so and file bug reports.</p> </div> <div class="paragraph"> <p>Until next time&#8230;&#8203;</p> </div> </div> </div>]]></content><author><name>Chris Cranford</name></author><category term="releases"/><category term="mongodb"/><category term="mysql"/><category term="mariadb"/><category term="postgres"/><category term="sqlserver"/><category term="cassandra"/><category term="oracle"/><category term="db2"/><category term="vitess"/><category term="outbox"/><category term="spanner"/><category term="jdbc"/><category term="informix"/><category term="ibmi"/><summary type="html"><![CDATA[The old saying is "April showers bring May flowers"; however, in this case it seems a new Debezium release has sprouted packed with many new features. We&#8217;re pleased to announce the release of Debezium 2.7.0.Alpha2, the next pre-release in the Debezium 2.7 stream, is now available for testing. This release includes new ROW_ID serialization for the Oracle connector, PostgreSQL array support for the JDBC sink connector, NATs authentication with Debezium Server, performance improvements with Oracle LogMiner and large tables, and more. Let&#8217;s walk through the highlights of this release and discuss these and more in-depth&#8230;&#8203;]]></summary></entry><entry><title type="html">Debezium 2.7.0.Alpha1 Released</title><link href="https://debezium.io/blog/2024/04/25/debezium-2-7-alpha1-released/" rel="alternate" type="text/html" title="Debezium 2.7.0.Alpha1 Released"/><published>2024-04-25T00:00:00+00:00</published><updated>2024-04-25T00:00:00+00:00</updated><id>https://debezium.io/blog/2024/04/25/debezium-2-7-alpha1-released</id><content type="html" xml:base="https://debezium.io/blog/2024/04/25/debezium-2-7-alpha1-released/"><![CDATA[<div class="paragraph"> <p>As the temperature for summer continues to rise, I&#8217;m please to announce that Debezium has some really cool news, Debezium <strong>2.7.0.Alpha1</strong> is now available for testing. This release includes a variety of new changes and improvements across various connectors like MongoDB, MariaDB, MySQL, Oracle, Vitess, and the Kubernetes Operator, to a myriad of subtle fixes and improvements across the entire Debezium portfolio. Let&#8217;s take a moment and dive into some highlights&#8230;&#8203;</p> </div> <div class="paragraph"> <p></p> </div> <div class="sect1"> <h2 id="breaking-changes">Breaking changes</h2> <div class="sectionbody"> <div class="paragraph"> <p>The team aims to avoid any potential breaking changes between minor releases; however, such changes are sometimes inevitable.</p> </div> <div class="dlist"> <dl> <dt class="hdlist1">Core</dt> <dd> <div class="ulist"> <ul> <li> <p>It was identified that certain JDBC queries could indefinitely block in the case of certain communication failures. To combat this problem, a new configurable timeout option, <code>query.timeout.ms</code> is available to set the maximum time that a JDBC query can execute before being terminated (<a href="https://issues.redhat.com/browse/DBZ-7616">DBZ-7616</a>).</p> </li> </ul> </div> </dd> <dt class="hdlist1">SQL Server</dt> <dd> <div class="ulist"> <ul> <li> <p>The SQL Server connector previously processed all transactions captured during a single database round trip. This behavior is configurable and is based on <code>max.iterations.transactions</code>, which defaults to processing all transactions (value of <code>0</code>). This could lead to unexpected out of memory conditions if your database has a high volume of transactions.<br> <br> To address this for these use cases, the default value for <code>max.iterations.transactions</code> has changed to <code>500</code>, to be more resilient for these deployment use cases out-of-the-box. If you want to return to the previous behavior, simply add this configuration option to your connector with a value of <code>0</code> (<a href="https://issues.redhat.com/browse/DBZ-7750">DBZ-7750</a>).</p> </li> </ul> </div> </dd> </dl> </div> </div> </div> <div class="sect1"> <h2 id="new-features-and-improvements">New features and improvements</h2> <div class="sectionbody"> <div class="paragraph"> <p>Debezium 2.7.0.Alpha1 also introduces many improvements and features, lets take a look at each individually.</p> </div> <div class="sect2"> <h3 id="install_debezium_operator_with_helm_chart">Install Debezium Operator with Helm Chart</h3> <div class="paragraph"> <p>To improve the deployment of the Debezium Operator, it can be installed with a helm chart at <a href="https://charts.debezium.io" class="bare">https://charts.debezium.io</a>. This avoids the overly complicated deployment model of installing the operator into separate namespaces, minimizing the complexities for managing multiple Debezium Server deployments on Kubernetes.</p> </div> </div> <div class="sect2"> <h3 id="support_predicate_conditions_for_mongodb_incremental_snapshots">Support predicate conditions for MongoDB incremental snapshots</h3> <div class="paragraph"> <p>The incremental snapshot process is an instrumental part in various recovery situations to collect whole or part of the data set from a source table or collection. Relational connectors have long supported the idea of supplying an <code>additional-conditions</code> value on the incremental snapshot signal to restrict the data set, providing for targeted resynchronization of specific rows of data.</p> </div> <div class="paragraph"> <p>We&#8217;re happy to announce that this is now possible with MongoDB (<a href="https://issues.redhat.com/browse/DBZ-7138">DBZ-7138</a>). Unlike relational databases, the <code>additional-conditions</code> should be supplied in JSON format. It will be applied to the specified collection using the <code>find</code> operation to obtain the subset list of documents that are to be incrementally snapshotted.</p> </div> </div> <div class="sect2"> <h3 id="new_mariadb_standalone_connector">New MariaDB standalone connector</h3> <div class="paragraph"> <p>Debezium 2.5 introduced official support for MariaDB as part of the existing MySQL connector. The next step in that evolution is here, with a new standalone connector implementation for MariaDB (<a href="https://issues.redhat.com/browse/DBZ-7693">DBZ-7693</a>).</p> </div> <div class="paragraph"> <p>There are few things worth noting here:</p> </div> <div class="ulist"> <ul> <li> <p>MariaDB and MySQL both have a common shared dependency on a new abstract connector called <code>debezium-connector-binlog</code>, which provides the common framework for both binlog-based connectors.</p> </li> <li> <p>Each standalone connector now specifically is tailored only to its target database, so MySQL users should use MySQL and MariaDB users should use MariaDB. As a result, the <code>connection.adapter</code> configuration option has been removed, and the <code>jdbc.protocol</code> configuration option is now only specific to certain MySQL use cases and not used by MariaDB.</p> </li> </ul> </div> <div class="paragraph"> <p>The documentation for this connector is still a work-in-progress and will be added in the future. For the moment, you can refer to the MySQL connector documentation for most things related to MariaDB.</p> </div> </div> <div class="sect2"> <h3 id="extractnewdocumentstate_includes_document_id_for_mongodb_deletes">ExtractNewDocumentState includes document id for MongoDB deletes</h3> <div class="paragraph"> <p>In prior release of the MongoDB <code>ExtractNewDocumentState</code> single message transformation, a delete event did not provide the identifier as part of the payload. This reduced the meaningfulness of delete events as consumers were supplied with insufficient data to act on these events. This behavior has been improved, and the delete event now includes an <code>_id</code> attribute in the payload (<a href="https://issues.redhat.com/browse/DBZ-7695">DBZ-7695</a>).</p> </div> </div> <div class="sect2"> <h3 id="transaction_metadata_encoded_ordering">Transaction metadata encoded ordering</h3> <div class="paragraph"> <p>In some pipelines, ordering is critical for consuming applications. There are certain scenarios that can impact this aspect of your data pipeline, such as when Kafka re-partition occur. This leads to problems that can be error-prone trying to reconstruct the ordering after-the-fact.</p> </div> <div class="paragraph"> <p>Now when Transaction Metadata is enabled, these metadata events will also encode their transaction order, so that in the event that a Kafka re-partition or other scenarios occur that alter the ordering semantics, consumers can simply use the new encoded ordering field instead for deterministic ordering of transactions (<a href="https://issues.redhat.com/browse/DBZ-7698">DBZ-7698</a>).</p> </div> </div> <div class="sect2"> <h3 id="blocking_incremental_snapshot_improvements">Blocking incremental snapshot improvements</h3> <div class="paragraph"> <p>There are some use cases where incremental snapshot signals require escaping certain characters in the fully-qualified table name. This caused some problems with blocking snapshots because the process to resolve what tables to snapshot used a slightly different mechanism. In Debezium 2.7, we&#8217;ve unified this approach, and you can now use escaped table names with blocking snapshots where applicable (<a href="https://issues.redhat.com/browse/DBZ-7718">DBZ-7718</a>).</p> </div> </div> <div class="sect2"> <h3 id="cassandra_performance_improvement">Cassandra performance improvement</h3> <div class="paragraph"> <p>The Cassandra connector also saw some changes in Debezium 2.7, specifically to performance optimizations. The implementation of the <code>KafkaRecordEmitter</code> relied on a thread-synchronization block that reduced the throughput. In addition, the implementation also performed some unnecessary flushing which also impacted performance. This code has been rewritten to improve both throughput and reduce the unnecessary flush calls (<a href="https://issues.redhat.com/browse/DBZ-7722">DBZ-7722</a>).</p> </div> </div> <div class="sect2"> <h3 id="new_oracle_rawtostring_custom_converter">New Oracle "RawToString" custom converter</h3> <div class="paragraph"> <p>While Oracle recommends that users avoid using <code>RAW</code>-based columns, these columns are still widely used in standard Oracle tables for backward compatibility reasons. But there are also business use cases where it makes sense to continue to use <code>RAW</code> columns rather than other data types.</p> </div> <div class="paragraph"> <p>Debezium 2.7 introduces a new custom converter specifically for Oracle called <code>RawToStringConverter</code> (<a href="https://issues.redhat.com/browse/DBZ-7753">DBZ-7753</a>). This custom converter is designed to allow you to quickly convert the byte-array contents of the <code>RAW</code> column to a string-based field using a <code>STRING</code> schema type. This can be useful for situations where you use a <code>RAW</code> column to store character data that doesn&#8217;t require the collation overhead of <code>VARCHAR2</code>, but you still have the need for this field to be sent to consumers as string-based data.</p> </div> <div class="paragraph"> <p>To get started with this custom converter, please see the <a href="https://debezium.io/documentation/reference/2.7/connectors/oracle.html#_raw_to_string">documentation</a> for more details.</p> </div> </div> <div class="sect2"> <h3 id="improved_nls_character_set_support_for_oracle">Improved NLS character-set support for Oracle</h3> <div class="paragraph"> <p>When installing the Debezium 2.7 Oracle connector, you may notice a new dependency, <code>orai18n.jar</code>. This dependency is being automatically distributed to provide extended character-set support for certain dialects (<a href="https://issues.redhat.com/browse/DBZ-7761">DBZ-7761</a>).</p> </div> </div> <div class="sect2"> <h3 id="improved_temporal_support_in_vitess">Improved temporal support in Vitess</h3> <div class="paragraph"> <p>Debezium relational connectors rely on a configuration option, <code>time.precision.mode</code>, to control how temporal values are added to change events. In some cases, you may want to use modes that align with Kafka types, using the <code>connect</code> mode. In other cases, you may prefer to avoid precision loss by using the default, <code>adaptive_milliseconds</code> mode.</p> </div> <div class="paragraph"> <p>The Debezium for Vitess connector has traditionally not followed this model, and instead has emitted temporal values as string-based types. While this helps avoid the loss of precision problem when using the <code>connect</code> mode, this adds unnecessary overhead on consumers to parse and manipulate these values.</p> </div> <div class="paragraph"> <p>In Debezium 2.7, Vitess aligns this behavior with other relational connectors, using the <code>time.precision.mode</code> to control how temporal values are sent (<a href="https://issues.redhat.com/browse/DBZ-7773">DBZ-7773</a>). By default, it will use the <code>adaptive_milliseconds</code> mode, but you can customize this to use <code>connect</code> mode if you prefer. The emission of string-based temporal values has been removed.</p> </div> </div> </div> </div> <div class="sect1"> <h2 id="other-changes">Other changes</h2> <div class="sectionbody"> <div class="paragraph"> <p>Altogether, <a href="https://issues.redhat.com/issues/?jql=project%20%3D%20DBZ%20AND%20fixVersion%20%3D%202.7.0.Alpha1%20ORDER%20BY%20component%20ASC">50 issues</a> were fixed in this release. Here are a list of some additional noteworthy changes:</p> </div> <div class="ulist"> <ul> <li> <p>Builtin database name filter is incorrectly applied only to collections instead of databases in snapshot <a href="https://issues.redhat.com/browse/DBZ-7485">DBZ-7485</a></p> </li> <li> <p>Upgrade Debezium Quarkus Outbox to Quarkus 3.9.2 <a href="https://issues.redhat.com/browse/DBZ-7663">DBZ-7663</a></p> </li> <li> <p>After the initial deployment of Debezium, if a new table is added to MSSQL, its schema is was captured <a href="https://issues.redhat.com/browse/DBZ-7697">DBZ-7697</a></p> </li> <li> <p>The test is failing because wrong topics are used <a href="https://issues.redhat.com/browse/DBZ-7715">DBZ-7715</a></p> </li> <li> <p>Incremental Snapshot: read duplicate data when database has 1000 tables <a href="https://issues.redhat.com/browse/DBZ-7716">DBZ-7716</a></p> </li> <li> <p>Handle instability in JDBC connector system tests <a href="https://issues.redhat.com/browse/DBZ-7726">DBZ-7726</a></p> </li> <li> <p>SQLServerConnectorIT.shouldNotStreamWhenUsingSnapshotModeInitialOnly check an old log message <a href="https://issues.redhat.com/browse/DBZ-7729">DBZ-7729</a></p> </li> <li> <p>Fix MongoDB unwrap SMT test <a href="https://issues.redhat.com/browse/DBZ-7731">DBZ-7731</a></p> </li> <li> <p>Snapshot fails with an error of invalid lock <a href="https://issues.redhat.com/browse/DBZ-7732">DBZ-7732</a></p> </li> <li> <p>Column CON_ID queried on V$THREAD is not available in Oracle 11 <a href="https://issues.redhat.com/browse/DBZ-7737">DBZ-7737</a></p> </li> <li> <p>Redis NOAUTH Authentication Error when DB index is specified <a href="https://issues.redhat.com/browse/DBZ-7740">DBZ-7740</a></p> </li> <li> <p>Getting oldest transaction in Oracle buffer can cause NoSuchElementException with Infinispan <a href="https://issues.redhat.com/browse/DBZ-7741">DBZ-7741</a></p> </li> <li> <p>The MySQL Debezium connector is not doing the snapshot after the reset. <a href="https://issues.redhat.com/browse/DBZ-7743">DBZ-7743</a></p> </li> <li> <p>MongoDb connector doesn&#8217;t work with Load Balanced cluster <a href="https://issues.redhat.com/browse/DBZ-7744">DBZ-7744</a></p> </li> <li> <p>Align unwrap tests to respect AT LEAST ONCE delivery <a href="https://issues.redhat.com/browse/DBZ-7746">DBZ-7746</a></p> </li> <li> <p>Exclude reload4j from Kafka connect dependencies in system testsuite <a href="https://issues.redhat.com/browse/DBZ-7748">DBZ-7748</a></p> </li> <li> <p>Pod Security Context not set from template <a href="https://issues.redhat.com/browse/DBZ-7749">DBZ-7749</a></p> </li> <li> <p>Apply MySQL binlog client version 0.29.1 - bugfix: read long value when deserializing gtid transaction&#8217;s length <a href="https://issues.redhat.com/browse/DBZ-7757">DBZ-7757</a></p> </li> <li> <p>Change streaming exceptions are swallowed by BufferedChangeStreamCursor <a href="https://issues.redhat.com/browse/DBZ-7759">DBZ-7759</a></p> </li> <li> <p>Use thread cap only for default value <a href="https://issues.redhat.com/browse/DBZ-7763">DBZ-7763</a></p> </li> <li> <p>Evaluate cached thread pool as the default option for async embedded engine <a href="https://issues.redhat.com/browse/DBZ-7764">DBZ-7764</a></p> </li> <li> <p>Sql-Server connector fails after initial start / processed record on subsequent starts <a href="https://issues.redhat.com/browse/DBZ-7765">DBZ-7765</a></p> </li> <li> <p>Valid resume token is considered invalid which leads to new snapshot with some snapshot modes <a href="https://issues.redhat.com/browse/DBZ-7770">DBZ-7770</a></p> </li> <li> <p>Improve processing speed of async engine processors which use List#get() <a href="https://issues.redhat.com/browse/DBZ-7777">DBZ-7777</a></p> </li> <li> <p>NO_DATA snapshot mode validation throw DebeziumException on restarts if snapshot is not completed <a href="https://issues.redhat.com/browse/DBZ-7780">DBZ-7780</a></p> </li> <li> <p>DDL statement couldn&#8217;t be parsed <a href="https://issues.redhat.com/browse/DBZ-7788">DBZ-7788</a></p> </li> <li> <p>Document potential null values in the after field for lookup full update type <a href="https://issues.redhat.com/browse/DBZ-7789">DBZ-7789</a></p> </li> <li> <p>old class reference in ibmi-connector services <a href="https://issues.redhat.com/browse/DBZ-7795">DBZ-7795</a></p> </li> <li> <p>Documentation for Debezium Scripting mentions wrong property <a href="https://issues.redhat.com/browse/DBZ-7798">DBZ-7798</a></p> </li> <li> <p>Fix invalid date/timestamp check &amp; logging level <a href="https://issues.redhat.com/browse/DBZ-7811">DBZ-7811</a></p> </li> </ul> </div> <div class="paragraph"> <p>A huge thank you to all contributors from the community who worked on this release: <a href="https://github.com/samssh">Amirmohammad Sadat Shokouhi</a>, <a href="https://github.com/jchipmunk">Andrey Pustovetov</a>, <a href="https://github.com/ani-sha">Anisha Mohanty</a>, <a href="https://github.com/Naros">Chris Cranford</a>, <a href="https://github.com/chrisrecalis">Chris Recalis</a>, <a href="https://github.com/jcechace">Jakub Cechacek</a>, <a href="https://github.com/novotnyJiri">Jiri Novotny</a>, <a href="https://github.com/jpechane">Jiri Pechanec</a>, <a href="https://github.com/joschi">Jochen Schalanda</a>, <a href="https://github.com/methodmissing">Lourens Naudé</a>, <a href="https://github.com/mfvitale">Mario Fiore Vitale</a>, <a href="https://github.com/MartinMedek">Martin Medek</a>, <a href="https://github.com/obabec">Ondrej Babec</a>, <a href="https://github.com/rajdangwal">Rajendra Dangwal</a>, <a href="https://github.com/roldanbob">Robert Roldan</a>, <a href="https://github.com/rmoff">Robin Moffatt</a>, <a href="https://github.com/rkudryashov">Roman Kudryashov</a>, <a href="https://github.com/selman-genc-alg">Selman Genç</a>, <a href="https://github.com/twthorn">Thomas Thornton</a>, <a href="https://github.com/vjuranek">Vojtech Juranek</a>, and <a href="https://github.com/ismailsimsek">ismail simsek</a>!</p> </div> </div> </div> <div class="sect1"> <h2 id="whats-next">What&#8217;s next?</h2> <div class="sectionbody"> <div class="paragraph"> <p>Debezium 2.7 is just getting underway and we have a number of additional changes planned, including a MongoDB sink connector, expanding Oracle 23 support, a new SPI to aid in the memory-footprint of certain multi-tenant schema architectures and more. You can find more about what is planned for Debezium 2.7 on our <a href="/docs/roadmap">road map</a>.</p> </div> <div class="paragraph"> <p>The team is also in the final stages of defining our face-to-face agenda. if you have any suggestions or ideas that you would like for us to discuss or would like to see planned in 2.7 or a future release, please feel free to get in touch with us on our <a href="https://groups.google.com/forum/#!forum/debezium">mailing list</a> or in our <a href="https://debezium.zulipchat.com/login/#narrow/stream/302529-users">Zulip chat</a>.</p> </div> <div class="paragraph"> <p>Until next time&#8230;&#8203;</p> </div> </div> </div>]]></content><author><name>Chris Cranford</name></author><category term="releases"/><category term="mongodb"/><category term="mysql"/><category term="mariadb"/><category term="postgres"/><category term="sqlserver"/><category term="cassandra"/><category term="oracle"/><category term="db2"/><category term="vitess"/><category term="outbox"/><category term="spanner"/><category term="jdbc"/><category term="informix"/><category term="ibmi"/><summary type="html"><![CDATA[As the temperature for summer continues to rise, I&#8217;m please to announce that Debezium has some really cool news, Debezium 2.7.0.Alpha1 is now available for testing. This release includes a variety of new changes and improvements across various connectors like MongoDB, MariaDB, MySQL, Oracle, Vitess, and the Kubernetes Operator, to a myriad of subtle fixes and improvements across the entire Debezium portfolio. Let&#8217;s take a moment and dive into some highlights&#8230;&#8203;]]></summary></entry><entry><title type="html">Debezium 2.6.1.Final Released</title><link href="https://debezium.io/blog/2024/04/12/debezium-2-6-1-final-released/" rel="alternate" type="text/html" title="Debezium 2.6.1.Final Released"/><published>2024-04-12T00:00:00+00:00</published><updated>2024-04-12T00:00:00+00:00</updated><id>https://debezium.io/blog/2024/04/12/debezium-2-6-1-final-released</id><content type="html" xml:base="https://debezium.io/blog/2024/04/12/debezium-2-6-1-final-released/"><![CDATA[<div class="paragraph"> <p>I&#8217;m pleased to announce the immediate availability of Debezium <strong>2.6.1.Final</strong>. This release is the first maintenance release that focuses on addressing several critical stability issues with the 2.6.0.Final release, including classpath loading problems with Debezium Server, MongoDB silently stops gathering changes, and a race condition with the Oracle Infinispan buffer implementation.</p> </div> <div class="paragraph"> <p>Let&#8217;s take a few moments and dive into these and more&#8230;&#8203;</p> </div> <div class="paragraph"> <p></p> </div> <div class="sect1"> <h2 id="new-features-and-improvements">New features and improvements</h2> <div class="sectionbody"> <div class="paragraph"> <p>Debezium 2.6.1.Final also introduces many improvements and features, lets take a look at each individually.</p> </div> <div class="sect2"> <h3 id="oracle_raw_data_type_to_string_converter">Oracle RAW data type to STRING converter</h3> <div class="paragraph"> <p>Debezium treats a <code>RAW</code> column type as a series of bytes, and therefore, change events that contain <code>RAW</code> columns use a schema type of <code>BYTES</code>. This is a reasonable default because Debezium does not know the application&#8217;s purpose for using a <code>RAW</code> column, and it is packaging the data from the column as-is. However, this may not be ideal for consumer applications that would prefer the data emitted as a <code>STRING</code> type rather than as <code>BYTES</code>.</p> </div> <div class="paragraph"> <p>To help users, we&#8217;ve introduced a new <code>RawToStringConverter</code>, which automatically emits <code>RAW</code> columns as <code>STRING</code> based types rather than the default of <code>BYTES</code> (<a href="https://issues.redhat.com/browse/DBZ-7753">DBZ-7753</a>).</p> </div> <div class="paragraph"> <p>To configure the converter, simply add the following configuration:</p> </div> <div class="listingblock"> <div class="content"> <pre class="CodeRay highlight"><code data-lang="properties">converters=raw-to-string
converters.raw-to-string.type=io.debezium.connector.oracle.converters.RawToStringConverter
converters.raw-to-string.selector=.*.MY_TABLE.MY_RAW_COLUMN</code></pre> </div> </div> <div class="paragraph"> <p>The <code>selector</code> property allows the converter to specifically target one or multiply <code>RAW</code> columns across one or more tables by providing a comma-separated list of regular expressions.</p> </div> <div class="admonitionblock important"> <table> <tr> <td class="icon"> <i class="fa icon-important" title="Important"></i> </td> <td class="content"> <div class="paragraph"> <p>The <code>selector</code> property is optional, and if omitted, the converter applies to <em>ALL</em> <code>RAW</code> columns.</p> </div> </td> </tr> </table> </div> </div> </div> </div> <div class="sect1"> <h2 id="important-fixes">Fixes and stability improvements</h2> <div class="sectionbody"> <div class="sect2"> <h3 id="debezium_server_snapshotting_fixed">Debezium Server snapshotting fixed</h3> <div class="paragraph"> <p>If you attempted to perform or re-execute the snapshot phase with Debezium Server in 2.6.0.Final, the process would fail with an error about acquiring a lock. This was quickly identified as it severely affected the ability to use any Debezium Connector under Debezium Server based on 2.6.0.Final.</p> </div> <div class="paragraph"> <p>We have adjusted how we resolve the components needed for the new Snapshotter API so that when multiple connectors exist on the same class path, the resolution appropriate picks the right component. In addition, we&#8217;ve also improved the Debezium Server test suite to look specifically for these types of issues moving forward to avoid the potential release of such a build that has similar problems.</p> </div> <div class="admonitionblock tip"> <table> <tr> <td class="icon"> <i class="fa icon-tip" title="Tip"></i> </td> <td class="content"> <div class="paragraph"> <p>Debezium Server users should move to 2.6.1.Final and not use 2.6.0.Final.</p> </div> </td> </tr> </table> </div> </div> </div> </div> <div class="sect1"> <h2 id="other_fixes">Other fixes</h2> <div class="sectionbody"> <div class="ulist"> <ul> <li> <p>Incremental Snapshot: read duplicate data when database has 1000 tables <a href="https://issues.redhat.com/browse/DBZ-7716">DBZ-7716</a></p> </li> <li> <p>SQLServerConnectorIT.shouldNotStreamWhenUsingSnapshotModeInitialOnly check an old log message <a href="https://issues.redhat.com/browse/DBZ-7729">DBZ-7729</a></p> </li> <li> <p>Snapshot fails with an error of invalid lock <a href="https://issues.redhat.com/browse/DBZ-7732">DBZ-7732</a></p> </li> <li> <p>Column CON_ID queried on V$THREAD is not available in Oracle 11 <a href="https://issues.redhat.com/browse/DBZ-7737">DBZ-7737</a></p> </li> <li> <p>Redis NOAUTH Authentication Error when DB index is specified <a href="https://issues.redhat.com/browse/DBZ-7740">DBZ-7740</a></p> </li> <li> <p>Getting oldest transaction in Oracle buffer can cause NoSuchElementException with Infinispan <a href="https://issues.redhat.com/browse/DBZ-7741">DBZ-7741</a></p> </li> <li> <p>The MySQL Debezium connector is not doing the snapshot after the reset. <a href="https://issues.redhat.com/browse/DBZ-7743">DBZ-7743</a></p> </li> <li> <p>MongoDb connector doesn&#8217;t work with Load Balanced cluster <a href="https://issues.redhat.com/browse/DBZ-7744">DBZ-7744</a></p> </li> <li> <p>Pod Security Context not set from template <a href="https://issues.redhat.com/browse/DBZ-7749">DBZ-7749</a></p> </li> <li> <p>Apply MySQL binlog client version 0.29.1 - bugfix: read long value when deserializing gtid transaction&#8217;s length <a href="https://issues.redhat.com/browse/DBZ-7757">DBZ-7757</a></p> </li> <li> <p>Change streaming exceptions are swallowed by BufferedChangeStreamCursor <a href="https://issues.redhat.com/browse/DBZ-7759">DBZ-7759</a></p> </li> <li> <p>Sql-Server connector fails after initial start / processed record on subsequent starts <a href="https://issues.redhat.com/browse/DBZ-7765">DBZ-7765</a></p> </li> <li> <p>Valid resume token is considered invalid which leads to new snapshot with some snapshot modes <a href="https://issues.redhat.com/browse/DBZ-7770">DBZ-7770</a></p> </li> </ul> </div> <div class="paragraph"> <p>In total there were <a href="https://issues.redhat.com/issues/?jql=project%20%3D%20DBZ%20and%20fixVersion%20%20in%20(2.6.1.Final">14 issues</a> resolved in Debezium 2.6.1.Final. The list of changes can also be found in our <a href="https://debezium.io/releases/2.6">release notes</a>.</p> </div> <div class="paragraph"> <p>A big thank you to all the contributors from the community who worked diligently on this release: <a href="https://github.com/jchipmunk">Andrey Pustovetov</a>, <a href="https://github.com/ani-sha">Anisha Mohanty</a>, <a href="https://github.com/Naros">Chris Cranford</a>, <a href="https://github.com/chrisrecalis">Chris Recalis</a>, <a href="https://github.com/jcechace">Jakub Cechacek</a>, <a href="https://github.com/jpechane">Jiri Pechanec</a>, <a href="https://github.com/methodmissing">Lourens Naudé</a>, <a href="https://github.com/mfvitale">Mario Fiore Vitale</a>, <a href="https://github.com/roldanbob">Robert Roldan</a>, and <a href="https://github.com/selman-genc-alg">Selman Genç</a>!</p> </div> </div> </div>]]></content><author><name>Chris Cranford</name></author><category term="releases"/><category term="mongodb"/><category term="mysql"/><category term="mariadb"/><category term="postgres"/><category term="sqlserver"/><category term="cassandra"/><category term="oracle"/><category term="db2"/><category term="vitess"/><category term="outbox"/><category term="spanner"/><category term="jdbc"/><category term="informix"/><category term="ibmi"/><summary type="html"><![CDATA[I&#8217;m pleased to announce the immediate availability of Debezium 2.6.1.Final. This release is the first maintenance release that focuses on addressing several critical stability issues with the 2.6.0.Final release, including classpath loading problems with Debezium Server, MongoDB silently stops gathering changes, and a race condition with the Oracle Infinispan buffer implementation. Let&#8217;s take a few moments and dive into these and more&#8230;&#8203;]]></summary></entry><entry><title type="html">Debezium 2.6.0.Final Released</title><link href="https://debezium.io/blog/2024/04/02/debezium-2-6-final-released/" rel="alternate" type="text/html" title="Debezium 2.6.0.Final Released"/><published>2024-04-02T00:00:00+00:00</published><updated>2024-04-02T00:00:00+00:00</updated><id>https://debezium.io/blog/2024/04/02/debezium-2-6-final-released</id><content type="html" xml:base="https://debezium.io/blog/2024/04/02/debezium-2-6-final-released/"><![CDATA[<div class="paragraph"> <p>As the team has sprung forward into action, with spring upon us, and we&#8217;re in the summer spirit, we are pleased to announce the immediate release of Debezium <strong>2.6.0.Final</strong>. This release includes dozens of new features, bug fixes, and improvements from the valiant efforts of the team and community contributors. Overall, there were <a href="https://issues.redhat.com/issues/?jql=project%20%3D%20DBZ%20and%20fixVersion%20%20in%20(2.6.0.Alpha1%2C%202.6.0.Alpha2%2C%202.6.0.Beta1%2C%202.6.0.CR1%2C%202.6.0.Final">249 issues</a> resolved with contributions from over <strong>56</strong> contributors. Lets a moment and review all the changes.</p> </div> <div class="paragraph"> <p></p> </div> <div class="sect1"> <h2 id="breaking-changes">Breaking changes</h2> <div class="sectionbody"> <div class="paragraph"> <p>While we try to avoid any potential breaking changes between minor releases, such changes are sometimes inevitable. The upgrade to Debezium 2.6 includes a total of 7 unique breaking changes:</p> </div> <div class="dlist"> <dl> <dt class="hdlist1">MySQL</dt> <dd> <div class="ulist"> <ul> <li> <p>The MysQL driver was updated to version 8.3.0, and this driver is not compatible with MySQL 5.x. If you still need to use an older MySQL version, please downgrade the driver after installation to a version that is compatible with your database (<a href="https://issues.redhat.com/browse/DBZ-7652">DBZ-7652</a>).</p> </li> </ul> </div> </dd> <dt class="hdlist1">MongoDB</dt> <dd> <div class="ulist"> <ul> <li> <p>The MongoDB connector no longer supports the <code>replica_set</code> mode (<a href="https://issues.redhat.com/browse/DBZ-7260)">DBZ-7260</a>). This has been a feature that has been deprecated for several versions and there has been ongoing work over Debezium 2.x to achieve this goal. If you are using the <code>replica_set</code> mode, you will need to make adjustments when using Debezium 2.6+.</p> </li> </ul> </div> </dd> <dt class="hdlist1">SQL Server</dt> <dd> <div class="ulist"> <ul> <li> <p>The SQL Server connector was not capturing all schemas when the connector was first deployed, and instead, was only capturing the schemas based on the tables defined in the configuration&#8217;s include list. This was a bug that could prevent users from easily adding new tables to the connector when expecting that the new table&#8217;s schema would already exist in the schema history topic. The connector now correctly honors the <code>store.only.captured.tables.ddl</code> configuration option (<a href="https://issues.redhat.com/browse/DBZ-7593">DBZ-7593</a>).<br> <br> For existing connector deployments, if you do not specifically set the <code>store.only.captured.tables.ddl</code> property for the schema history topic, the connector will begin capturing schema changes for all relevant tables in your database. If you want to prevent this and retain the prior behavior, you will need to adjust your connector configuration by adding <code>schema.history.internal.store.only.captured.tables.ddl</code> with a value of <code>true</code>.</p> </li> </ul> </div> </dd> <dt class="hdlist1">Oracle</dt> <dd> <div class="ulist"> <ul> <li> <p>In older versions of Debezium, users were required to manually install the <code>ojdbc8.jar</code> JDBC driver. With 2.6, the connector now bundles the Oracle JDBC driver with the connector, so manual installation is no longer necessary (<a href="https://issues.redhat.com/browse/DBZ-7364">DBZ-7364</a>).</p> </li> </ul> </div> </dd> </dl> </div> <div class="admonitionblock note"> <table> <tr> <td class="icon"> <i class="fa icon-note" title="Note"></i> </td> <td class="content"> <div class="paragraph"> <p>We&#8217;ve also updated the driver to version <code>21.11.0.0</code>, please verify that you do not have multiple versions after upgrading to Debezium 2.6 (<a href="https://issues.redhat.com/browse/DBZ-7365">DBZ-7365</a>).</p> </div> </td> </tr> </table> </div> <div class="dlist"> <dl> <dt class="hdlist1">Vitess</dt> <dd> <div class="ulist"> <ul> <li> <p>The task configuration format used by previous versions of the connector could de-stabilize the Kafka Connect cluster. To resolve the problem, Debezium 2.6 introduces a new configuration format that is incompatible with the previous format (<a href="https://issues.redhat.com/browse/DBZ-7250">DBZ-7250</a>). When upgrading, you may experience a <code>NullPointerException</code> and the error indicating that the connector was unable to instantiate a task because it contains an invalid task configuration.<br> <br> If you experience this problem, delete and re-create the connector, using the same name and configuration as before. The connector(s) will start and re-use the offsets last stored by using the same name, but will not re-use the old task configurations, avoiding the start-up failure. <br></p> </li> <li> <p>The Vitess connector previously used the timestamp of <code>BEGIN</code> message as the source timestamp. This has been changed to the usage of the <code>COMMIT</code> timestamp to reflect the behaviour of other connectors (<a href="https://issues.redhat.com/browse/DBZ-7628">DBZ-7628</a>).</p> </li> </ul> </div> </dd> <dt class="hdlist1">Container Images</dt> <dd> <div class="ulist"> <ul> <li> <p>The handling of the <code>MAVEN_DEP_DESTINATION</code> environment variable has changed in the <code>connect-base</code> container image, which is the basis for <code>debezium/connect</code>. It is no longer used for downloading all dependencies, including connectors, but only for general purpose Maven Central located dependencies (<a href="https://issues.redhat.com/browse/DBZ-7551">DBZ-7551</a>). If you were using custom images that relied on this environment variable, your image build steps may require modifications.</p> </li> </ul> </div> </dd> </dl> </div> </div> </div> <div class="sect1"> <h2 id="new-features-and-improvements">New features and improvements</h2> <div class="sectionbody"> <div class="paragraph"> <p>Debezium 2.6 also introduces many improvements and features, lets take a look at each individually.</p> </div> <div class="sect2"> <h3 id="db2_for_iseries_connector">Db2 for iSeries connector</h3> <div class="paragraph"> <p>Debezium 2.6 introduces a brand-new connector for IBM fans to stream changes from Db2 iSeries/AS400 using the IBM iJournal system. This collaboration is a multi-year development effort from the community, and we&#8217;re pleased that the community has allowed this to be distributed under the Debezium umbrella.</p> </div> <div class="paragraph"> <p>The new connector can be obtained from Maven Central using the following coordinates or a <a href="https://repo1.maven.org/maven2/io/debezium/debezium-connector-ibmi/2.6.0.Beta1/debezium-connector-ibmi-2.6.0.Beta1-plugin.zip">direct download</a>.</p> </div> <div class="listingblock"> <div class="content"> <pre class="CodeRay highlight"><code data-lang="xml"><span class="tag">&lt;dependency&gt;</span>
    <span class="tag">&lt;groupId&gt;</span>io.debezium<span class="tag">&lt;/groupId&gt;</span>
    <span class="tag">&lt;artifactId&gt;</span>debezium-connector-ibmi<span class="tag">&lt;/artifactId&gt;</span>
    <span class="tag">&lt;version&gt;</span>2.6.0.Beta1<span class="tag">&lt;/version&gt;</span>
<span class="tag">&lt;/dependency&gt;</span></code></pre> </div> </div> <div class="admonitionblock note"> <table> <tr> <td class="icon"> <i class="fa icon-note" title="Note"></i> </td> <td class="content"> <div class="paragraph"> <p>The documentation for this new connector is still a work-in-progress. If you have any questions, please be sure to reach out to the team on Zulip or the mailing list.</p> </div> </td> </tr> </table> </div> </div> <div class="sect2"> <h3 id="java_17_now_compile_time_requirement">Java 17 now compile-time requirement</h3> <div class="paragraph"> <p>Debezium 3.0 which will debut later this fall will once again shift the Java baseline requirement from Java 11 to 17 to use Debezium. In preparation for Debezium 3 later this year, we are making the shift to a compile-time baseline for Debezium 2.6 and 2.7 to require Java 17 (<a href="https://issues.redhat.com/browse/DBZ-7387">DBZ-7387</a>).</p> </div> <div class="paragraph"> <p>If you are a Debezium user, and you consume Debezium connectors, this will require no action on your part. You can continue to use Java 11 for now without issue, understanding that Debezium 3 will require Java 17 later this year.</p> </div> <div class="paragraph"> <p>If you are developing Debezium connectors, Java 17 is now baseline to compile the Debezium source. If you have been using Java 17, there should be no action taken on your part. If you previously were using Java 11, you will need to move to Java 17 in order to compile from source.</p> </div> <div class="paragraph"> <p>If you are using the Debezium Quarkus Outbox Extension (not the Outbox SMT), as Quarkus 3.7+ is making the move to Java 17 as their baseline, the Debezium Quarkus Outbox Extension will now require Java 17 as a baseline for both runtime and compile time.</p> </div> <div class="paragraph"> <p>We expect this transition to be mostly seamless for most users as this should have absolutely no impact on the runtime of Debezium&#8217;s connectors nor Debezium Server at this time.</p> </div> </div> <div class="sect2"> <h3 id="asynchronous_embedded_engine">Asynchronous Embedded Engine</h3> <div class="paragraph"> <p>If you&#8217;re hearing about the Embedded Engine for the first time, Debezium ships with three ways to run Debezium connectors. The most common is to deploy Debezium on Kafka Connect while the second most common is to use Debezium Server, a read-made runtime for Debezium connectors. However, there is a third option called the Embedded Engine, and it is what Debezium uses internally for its test suite, it&#8217;s the foundation for Debezium Server, and it&#8217;s meant to provide a way to embed Debezium connectors inside your own application. The embedded engine is used by a variety of external contributors and frameworks, most notably Apache Flink heavily relies on the embedded engine for their Debezium based CDC connectors.</p> </div> <div class="paragraph"> <p>One of the biggest and major new features of Debezium 2.6 is the work on the asynchronous embedded engine that we are debuting in this alpha release. This new asynchronous version the foundation for which Debezium Server and the future of embedding Debezium is based. This change focuses on several key goals and initiatives:</p> </div> <div class="ulist"> <ul> <li> <p>Run multiple source tasks for a given connector, if the connector supports multiple tasks</p> </li> <li> <p>Run time-consuming code (transformations or serialization) in dedicated threads</p> </li> <li> <p>Allow additional performance by disabling event dispatch order</p> </li> <li> <p>Provide future technology benefits of things such as virtual threads and delegating to external workers</p> </li> <li> <p>Better integration with Debezium Operator for Kubernetes and Debezium UI</p> </li> <li> <p>Seamlessly integrate with Quarkus for Debezium Server</p> </li> </ul> </div> <div class="paragraph"> <p>What this new asynchronous model does not include or focus on are the following:</p> </div> <div class="ulist"> <ul> <li> <p>Implement parallelization inside a connector&#8217;s main capture loop.</p> </li> <li> <p>Remove any dependency from Kafka Connect</p> </li> <li> <p>Add support for multiple source connectors per Engine deployment</p> </li> <li> <p>Add support for sink connectors</p> </li> </ul> </div> <div class="admonitionblock note"> <table> <tr> <td class="icon"> <i class="fa icon-note" title="Note"></i> </td> <td class="content"> <div class="paragraph"> <p>Even if a connector is single-threaded and does not support multiple tasks, a connector deployment using the Embedded Engine or Debezium Server can take advantage of the new asynchronous model. A large portion of time during even dispatch is spent on transformation and serialization phases, so utilizing the new dedicated worker threads for such stages improves throughput.</p> </div> </td> </tr> </table> </div> <div class="paragraph"> <p>For developers who want to get started with the new asynchronous embedded engine, a new package is now included in the <code>debezium-embedded</code> artifact called <code>io.debezium.embedded.async</code> and this package contains all the pertinent components to utilizing this new implementation. The asynchronous model can be constructed in a similar way to the serial version using the builder pattern, shown below.</p> </div> <div class="listingblock"> <div class="content"> <pre class="CodeRay highlight"><code data-lang="java"><span class="directive">final</span> DebeziumEngine engine = <span class="keyword">new</span> AsyncEngine.AsyncEngineBuilder()
    .using(properties)
    .notifying(<span class="local-variable">this</span>::changeConsumerHandler)
    .build();</code></pre> </div> </div> <div class="paragraph"> <p>We encourage everyone to take a look at the new Asynchronous Embedded Engine model, let us know your thoughts and if you spot any bugs or problems. We will be updating the documentation in coming releases to highlight all the benefits and changes, including examples. Until then, you can find all the details in the design document, <a href="https://github.com/vjuranek/debezium-design-documents/blob/DBZ-7073/DDD-7.md">DDD-7</a>.</p> </div> </div> <div class="sect2"> <h3 id="new_unified_snapshot_modes">New Unified Snapshot Modes</h3> <div class="paragraph"> <p>The snapshot process is an integral part of each connector&#8217;s lifecycle, and it&#8217;s responsible for collecting and sending all the historical data that exists in your data store to your target systems, if desired. For Debezium users who work with multiple connector types, we understand that having differing snapshot modes across connectors can sometimes be confusing to work with. So this change is designed to address that.</p> </div> <div class="paragraph"> <p>For many of you who may have already tried or installed Debezium 2.6 pre-releases, you&#8217;re already using the unified snapshot SPI as it was designed to be a drop-in-replacement initially, requiring no changes. This release finishes that work for MongoDB and DB2.</p> </div> <div class="paragraph"> <p>Of these changes, the most notable include the following:</p> </div> <div class="ulist"> <ul> <li> <p>All snapshot modes are available to all connectors, excluding <code>never</code> which remains specific to MySQL. This means that connectors that may have previously not supported a snapshot mode, such as <code>when_needed</code>, can now use this mode to retake a snapshot when the connector identifies that its necessary.</p> </li> <li> <p>The <code>schema_only_recovery</code> mode has been deprecated and replaced by <code>recovery</code>.</p> </li> <li> <p>The <code>schema_only</code> mode has also been deprecated and replaced by <code>no_data</code>.</p> </li> </ul> </div> <div class="admonitionblock important"> <table> <tr> <td class="icon"> <i class="fa icon-important" title="Important"></i> </td> <td class="content"> <div class="paragraph"> <p>All deprecated modes will remain available until Debezium 3 later this year. This provides users with about six months to adjust scripts, configurations, and processes in advance.</p> </div> </td> </tr> </table> </div> </div> <div class="sect2"> <h3 id="new_matching_collections_api_added">New Matching Collections API added</h3> <div class="paragraph"> <p>One of the team&#8217;s ongoing tasks include the migration of Debezium UI&#8217;s backend into the main Debezium repository. One of the unique benefits with doing this is we can identify where there is code overlap between a connector&#8217;s runtime and the UI, and develop interface contracts to expose this shared data.</p> </div> <div class="paragraph"> <p>Thanks to a community contribution for <a href="https://issues.redhat.com/browse/DBZ-7167">DBZ-7167</a>, the <code>RelationalBaseSourceConnector</code> contract has been adjusted and a new method introduced to return a list of table names that match the connector&#8217;s specific configuration. Any connector that implements this abstract base class will need to implement this new method.</p> </div> </div> <div class="sect2"> <h3 id="source_transaction_id_changes">Source transaction id changes</h3> <div class="paragraph"> <p>All Debezium change events contain a special metadata block called the <code>source</code> information block. This part of the event payload is responsible for providing metadata about the change event, including the unique identifier of the change, the time the change happened, the database and table the change is in reference to, as well as transaction metadata about the transaction that the change participated in.</p> </div> <div class="paragraph"> <p>In Debezium 2.6, the <code>transaction_id</code> field in the source information block will no longer be provided unless the field is populated with a value. This should present no issue for users as this field was only populated when the connector was configured with <code>provide.transaction.metadata</code> set to <code>true</code> (<a href="https://issues.redhat.com/browse/DBZ-7380">DBZ-7380</a>).</p> </div> <div class="paragraph"> <p>If you have tooling that expects the existence of the source information block&#8217;s <code>transaction_id</code> field although its optional, you will need to adjust that behavior as the field will no longer be present unless populated.</p> </div> </div> <div class="sect2"> <h3 id="improved_event_timestamp_precision">Improved event timestamp precision</h3> <div class="paragraph"> <p>Debezium 2.6 introduces a new community requested feature to improve the precision of timestamps in change events. Users will now notice the addition of 4 new fields, two at the envelope level and two in the <code>source</code> information block as shown below:</p> </div> <div class="listingblock"> <div class="content"> <pre class="CodeRay highlight"><code data-lang="json">{
  <span class="key"><span class="delimiter">&quot;</span><span class="content">source</span><span class="delimiter">&quot;</span></span>: {
    <span class="error">.</span><span class="error">.</span><span class="error">.</span>,
    <span class="key"><span class="delimiter">&quot;</span><span class="content">ts_us</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">1559033904863123</span><span class="delimiter">&quot;</span></span>,
    <span class="key"><span class="delimiter">&quot;</span><span class="content">ts_ns</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">1559033904863123000</span><span class="delimiter">&quot;</span></span>
  },
  <span class="key"><span class="delimiter">&quot;</span><span class="content">ts_us</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">1580390884335451</span><span class="delimiter">&quot;</span></span>,
  <span class="key"><span class="delimiter">&quot;</span><span class="content">ts_ns</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">1580390884335451325</span><span class="delimiter">&quot;</span></span>,
}</code></pre> </div> </div> <div class="paragraph"> <p>The envelope values will always provide both microsecond (<code>ts_us</code>) and nanosecond (<code>ts_ns</code>) values while the <code>source</code> information block may have both micro and nano -second precision values truncated to a lower precision if the source database does not provide that level of precision.</p> </div> </div> <div class="sect2"> <h3 id="scoped_keytrust_store_support_with_mongodb">Scoped Key/Trust - store support with MongoDB</h3> <div class="paragraph"> <p>Debezium supports secure connections; however, MongoDB requires that the key/trust -store configurations be supplied as JVM process arguments, which is less than ideal for environments like the cloud. As a first step toward aligning how secure connection configuration is specified across our connectors, Debezium 2.6 for MongoDB now supports specifying scoped key/trust -store configurations in the connector configuration (<a href="https://issues.redhat.com/browse/DBZ-7379">DBZ-7379</a>).</p> </div> <div class="paragraph"> <p>The MongoDB connector now includes the following new configuration properties:</p> </div> <div class="dlist"> <dl> <dt class="hdlist1"><code>mongodb.ssl.keystore</code></dt> <dd> <p>Specifies the path to the SSL keystore file.</p> </dd> <dt class="hdlist1"><code>mongodb.ssl.keystore.password</code></dt> <dd> <p>Specifies the credentials to open and access the SSL keystore provided by <em>mongodb.ssl.keystore</em>.</p> </dd> <dt class="hdlist1"><code>mongodb.ssl.keystore.type</code></dt> <dd> <p>Specifies the SSL keystore file type, defaults to <code>PKC512</code>.</p> </dd> <dt class="hdlist1"><code>mongodb.ssl.truststore</code></dt> <dd> <p>Specifies the path to the SSL truststore file.</p> </dd> <dt class="hdlist1"><code>mongodb.ssl.truststore.password</code></dt> <dd> <p>Specifies the credentials to open and access the SSL truststore provided by <em>mongodb.ssl.truststore</em>.</p> </dd> <dt class="hdlist1"><code>mongodb.ssl.truststore.type</code></dt> <dd> <p>Specifies the SSL truststore file type, defaults to <code>PKC512</code>.</p> </dd> </dl> </div> </div> <div class="sect2"> <h3 id="mongodb_uuid_key_support_for_incremental_snapshots">MongoDB UUID key support for Incremental snapshots</h3> <div class="paragraph"> <p>As a small improvement to the Incremental Snapshot process for the Debezium for MongoDB connector, Debezium 2.6 adds support for the UUID data type, allowing this data type to be used within the Incremental Snapshot process like other data types (<a href="https://issues.redhat.com/browse/DBZ-7451">DBZ-7451</a>).</p> </div> </div> <div class="sect2"> <h3 id="mongodb_post_image_changes">MongoDB post-image changes</h3> <div class="paragraph"> <p>The MongoDB connector&#8217;s event payload can be configured to include the full document that was changed in an update. The connector previously made an opinionated choice about how the full document would be fetched as part of the change stream; however, this behavior was not consistent with our expectations in all use cases.</p> </div> <div class="paragraph"> <p>Debezium 2.6 introduces a new configuration option, <code>capture.mode.full.update.type</code>, allowing the connector to explicitly control how the change stream&#8217;s full document lookup should be handled (<a href="https://issues.redhat.com/browse/DBZ-7299">DBZ-7299</a>). The default value for this option is <code>lookup</code>, meaning that the database will make a separate look-up to fetch the full document. If you are working with MongoDB 6+, you can also elect to use <code>post_image</code> to rely on MongoDB change stream&#8217;s post-image support.</p> </div> </div> <div class="sect2"> <h3 id="incremental_snapshot_row_value_constructors_for_postgresql">Incremental snapshot row-value constructors for PostgreSQL</h3> <div class="paragraph"> <p>The PostgreSQL driver supports a SQL syntax called a row-value constructor using the <code>ROW()</code> function. This allows a query to express predicate conditions in a more efficient way when working with multi-columned primary keys that have a suitable index. The incremental snapshot process is an ideal candidate for the use of the <code>ROW()</code> function, the process involves issuing a series of select SQL statements to fetch data in chunks. Each statement, aka chunk query, should ideally be as efficient as possible to minimize the cost overhead of these queries to maximize throughput of your WAL changes to your topics.</p> </div> <div class="paragraph"> <p>There are no specific changes needed, but the query issued for PostgreSQL incremental snapshots has been adjusted to take advantage of this new syntax, and therefore users who utilize incremental snapshots should see performance improvements.</p> </div> <div class="paragraph"> <p>An example of the old query used might look like this for a simple table:</p> </div> <div class="listingblock"> <div class="content"> <pre class="CodeRay highlight"><code data-lang="sql"><span class="class">SELECT</span> *
  <span class="keyword">FROM</span> users
 <span class="keyword">WHERE</span> (a = <span class="integer">10</span> <span class="keyword">AND</span> (b &gt; <span class="integer">2</span> <span class="keyword">OR</span> b <span class="keyword">IS</span> <span class="predefined-constant">NULL</span>)) <span class="keyword">OR</span> (a &gt; <span class="integer">10</span>) <span class="keyword">OR</span> (a <span class="keyword">IS</span> <span class="predefined-constant">NULL</span>)
 <span class="keyword">ORDER</span> <span class="keyword">BY</span> a, b LIMIT <span class="integer">1024</span></code></pre> </div> </div> <div class="paragraph"> <p>The new implementation constructs this query using the <code>ROW()</code> function as follows:</p> </div> <div class="listingblock"> <div class="content"> <pre class="CodeRay highlight"><code data-lang="sql"><span class="class">SELECT</span> *
  <span class="keyword">FROM</span> users
 <span class="keyword">WHERE</span> <span class="type">row</span>(a,b) &gt; <span class="type">row</span>(<span class="integer">10</span>,<span class="integer">2</span>)
<span class="keyword">ORDER</span> <span class="keyword">BY</span> a, b LIMIT <span class="integer">1024</span></code></pre> </div> </div> <div class="paragraph"> <p>We&#8217;d be interested in any feedback on this change, and what performance improvements are observed.</p> </div> </div> <div class="sect2"> <h3 id="sql_server_query_improvements">SQL Server query improvements</h3> <div class="paragraph"> <p>The Debezium SQL Server utilizes a common SQL Server stored procedure called <code>fn_cdc_get_all_changes&#8230;&#8203;</code> to fetch all the relevant captured changes for a given table. This query performs several unions and only ever returns data from one of the union sub-queries, which can be inefficient.</p> </div> <div class="paragraph"> <p>Debezium 2.6 for SQL Server introduces a new configuration property <code>data.query.mode</code> that can be used to influence which specific method the connector will use to gather the details about table changes (<a href="https://issues.redhat.com/browse/DBZ-7273">DBZ-7273</a>). The default remains unchanged from older releases, using the value <code>function</code> to delegate to the above aforementioned stored procedure. A new option, called <code>direct</code>, can be used instead to build the query directly within the connector to gather the changes more efficiently.</p> </div> </div> <div class="sect2"> <h3 id="oracle_infinispan_cache_improvements">Oracle Infinispan cache improvements</h3> <div class="paragraph"> <p>The Debezium Oracle connector maintains a buffer of all in-flight transactions, and this buffer can be allocated off-heap using Infinispan. Sometimes, the user configuration specifies that if an in-flight transaction lasts longer than the specified number of milliseconds, the transaction can be abandoned or discarded by the buffer. This means that the transaction will be forgotten and not emitted by the connector.</p> </div> <div class="paragraph"> <p>In order to improve metrics integration with frameworks like Grafana and Prometheus, a new JMX metric, <code>AbandonedTransactionCount</code>, was added to track the number of transactions that are abandoned by the connector during it&#8217;s runtime.</p> </div> </div> <div class="sect2"> <h3 id="oracle_redo_sql_per_event_with_logminer">Oracle Redo SQL per event with LogMiner</h3> <div class="paragraph"> <p>We have improved the Oracle connector&#8217;s event structure for inserts, updates, and deletes to optionally contain the SQL that was reconstructed by LogMiner in the <code>source</code> information block. This feature is an opt-in only feature that you must enable as this can easily more than double the size of your existing event payload.</p> </div> <div class="paragraph"> <p>To enable the inclusion of the REDO SQL as part of the change event, add the following connector configuration:</p> </div> <div class="listingblock"> <div class="content"> <pre class="CodeRay highlight"><code data-lang="json"><span class="key"><span class="delimiter">&quot;</span><span class="content">log.mining.include.redo.sql</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">true</span><span class="delimiter">&quot;</span></span></code></pre> </div> </div> <div class="paragraph"> <p>With this option enabled, the <code>source</code> information block contains a new field <code>redo_sql</code>, as shown below:</p> </div> <div class="listingblock"> <div class="content"> <pre class="CodeRay highlight"><code data-lang="json"><span class="key"><span class="delimiter">&quot;</span><span class="content">source</span><span class="delimiter">&quot;</span></span>: {
  <span class="error">.</span><span class="error">.</span><span class="error">.</span>
  <span class="key"><span class="delimiter">&quot;</span><span class="content">redo_sql</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">INSERT INTO </span><span class="char">\&quot;</span><span class="content">DEBEZIUM</span><span class="char">\&quot;</span><span class="content">.</span><span class="char">\&quot;</span><span class="content">TEST</span><span class="char">\&quot;</span><span class="content"> (</span><span class="char">\&quot;</span><span class="content">ID</span><span class="char">\&quot;</span><span class="content">,</span><span class="char">\&quot;</span><span class="content">DATA</span><span class="char">\&quot;</span><span class="content">) values ('1', 'Test');</span><span class="delimiter">&quot;</span></span>
}</code></pre> </div> </div> <div class="admonitionblock warning"> <table> <tr> <td class="icon"> <i class="fa icon-warning" title="Warning"></i> </td> <td class="content"> <div class="paragraph"> <p>This feature cannot be used with <code>lob.enabled</code> set to <code>true</code> due to how LogMiner reconstructs the SQL related to CLOB, BLOB, and XML data types. If the above configuration is added with <code>lob.enabled</code> set to <code>true</code>, the connector will start with an error about this misconfiguration.</p> </div> </td> </tr> </table> </div> </div> <div class="sect2"> <h3 id="oracle_logminer_transaction_buffer_improvements">Oracle LogMiner transaction buffer improvements</h3> <div class="paragraph"> <p>A new delay-strategy for transaction registration has been added when using LogMiner. This strategy effectively delays the creation of the transaction record in the buffer until we observe the first captured change for that transaction.</p> </div> <div class="admonitionblock note"> <table> <tr> <td class="icon"> <i class="fa icon-note" title="Note"></i> </td> <td class="content"> <div class="paragraph"> <p>For users who use the Infinispan cache or who have enabled <code>lob.enabled</code>, this delayed strategy cannot be used due to how specific operations are handled in these two modes of the connector.</p> </div> </td> </tr> </table> </div> <div class="paragraph"> <p>Delaying transaction registration has a number of benefits, which include:</p> </div> <div class="ulist"> <ul> <li> <p>Reducing the overhead on the transaction cache, especially in a highly concurrent transaction scenario.</p> </li> <li> <p>Avoids long-running transactions that have no changes that are being captured by the connector.</p> </li> <li> <p>Should aid in advancing the low-watermark SCN in the offsets more efficiently in specific scenarios.</p> </li> </ul> </div> <div class="paragraph"> <p>We are looking into how we can explore this change for Infinispan-based users in a future build; however, due to the nature of how <code>lob.enabled</code> works with LogMiner, this feature won&#8217;t be possible for that use case.</p> </div> </div> <div class="sect2"> <h3 id="oracle_logminer_hybrid_mining_strategy">Oracle LogMiner Hybrid Mining Strategy</h3> <div class="paragraph"> <p>Debezium 2.6 also introduces a new Oracle LogMiner mining strategy called <em>hyrid</em>, which can be enabled by setting the configuration property <code>log.mining.strategy</code> with the value of <code>hybrid</code>. This new strategy is designed to support all schema evolution features of the default mining strategy while taking advantage of all the performance optimizations from the online catalog strategy.</p> </div> <div class="paragraph"> <p>The main problem with the <code>online_catalog</code> strategy is that if a mining step observes a schema change and a data change in the same mining step, LogMiner is incapable of reconstructing the SQL correctly, which will result in the table name being <code>OBJ# xxxxxx</code> or the columns represented as <code>COL1</code>, <code>COL2</code>, and so on. To avoid this while using the online catalog strategy, users are recommended to perform schema changes in a lock-step pattern to avoid a mining step that observes both a schema change and a data change together; however, this is not always feasible.</p> </div> <div class="paragraph"> <p>The new hybrid strategy works by tracking a table&#8217;s object id at the database level and then using this identifier to look up the schema associated with the table from Debezium&#8217;s relational table model. In short, this allows Debezium to do what Oracle LogMiner is unable to do in these specific corner cases. The table name will be taken from the relational model&#8217;s table name and columns will be mapped by column position.</p> </div> <div class="paragraph"> <p>Unfortunately, Oracle does not provide a way to reconstruct failed SQL operations for CLOB, BLOB, and XML data types. This means that the new hybrid strategy cannot be configured with configurations that use <code>lob.enabled</code> set to <code>true</code>. If a connector is started using the hybrid strategy and has <code>lob.enabled</code> set to <code>true</code>, the connector will fail to start and report a configuration failure.</p> </div> </div> <div class="sect2"> <h3 id="xml_support_for_openlogreplicator">XML Support for OpenLogReplicator</h3> <div class="paragraph"> <p>The Debezium for Oracle connector supports connections with OpenLogReplicator, allowing Oracle users to stream changes directly from the transaction logs. The latest build of OpenLogReplicator, version <strong>1.5.0</strong> has added support for XML column types.</p> </div> <div class="paragraph"> <p>To get started streaming XML with OpenLogReplicator, please upgrade the OpenLogReplicator process to 1.5.0 and restart the replicator process. Be aware that if you want to stream binary-based XML column data, you will need to toggle this feature as enabled in the OpenLogReplicator configuration.</p> </div> </div> <div class="sect2"> <h3 id="informix_appends_lsn_to_transaction_identifier">Informix appends LSN to Transaction Identifier</h3> <div class="paragraph"> <p>Informix databases only increases the transaction identifier when there are concurrent transactions, otherwise the value remains identical for sequential transactions. This can prove difficult for users who may want to utilize the transaction metadata to order change events in a post processing step.</p> </div> <div class="paragraph"> <p>Debezium 2.6 for Informix will now append the log sequence number (LSN) to the transaction identifier so that users can easily sort change events based on the transaction metadata. The transaction identifier field will now use the format <code>&lt;id&gt;:&lt;lsn&gt;</code>. This change affects transaction metadata events and the <code>source</code> information block for change events, as shown below:</p> </div> <div class="listingblock"> <div class="title">Transaction Begin Event</div> <div class="content"> <pre class="CodeRay highlight"><code data-lang="json">{
  <span class="key"><span class="delimiter">&quot;</span><span class="content">status</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">BEGIN</span><span class="delimiter">&quot;</span></span>,
  <span class="key"><span class="delimiter">&quot;</span><span class="content">id</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">571:53195829</span><span class="delimiter">&quot;</span></span>,
  <span class="error">.</span><span class="error">.</span><span class="error">.</span>
}</code></pre> </div> </div> <div class="listingblock"> <div class="title">Transaction End Event</div> <div class="content"> <pre class="CodeRay highlight"><code data-lang="json">{
  <span class="key"><span class="delimiter">&quot;</span><span class="content">status</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">END</span><span class="delimiter">&quot;</span></span>,
  <span class="key"><span class="delimiter">&quot;</span><span class="content">id</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">571:53195832</span><span class="delimiter">&quot;</span></span>,
  <span class="error">.</span><span class="error">.</span><span class="error">.</span>
}</code></pre> </div> </div> <div class="listingblock"> <div class="title">Change Events</div> <div class="content"> <pre class="CodeRay highlight"><code data-lang="json">{
  <span class="error">.</span><span class="error">.</span><span class="error">.</span>
  <span class="key"><span class="delimiter">&quot;</span><span class="content">source</span><span class="delimiter">&quot;</span></span>: {
    <span class="key"><span class="delimiter">&quot;</span><span class="content">id</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">571:53195832</span><span class="delimiter">&quot;</span></span>
    <span class="error">.</span><span class="error">.</span><span class="error">.</span>
  }
}</code></pre> </div> </div> </div> <div class="sect2"> <h3 id="supports_spanner_new_row_and_old_values_value_capture_type">Supports Spanner <code>NEW_ROW_AND_OLD_VALUES</code> value capture type</h3> <div class="paragraph"> <p>Google Spanner&#8217;s value capture type is responsible for controlling how the change stream represents the change data in the event stream and are configured when constructing the change stream.</p> </div> <div class="paragraph"> <p>Spanner introduced a new value capture mode called <code>NEW_ROW_AND_OLD_VALUES</code>, which is responsible for capturing all values of tracked columns, both modified and unmodified, whenever any column changes. This new mode is an improvement over <code>NEW_ROW</code> because it also includes the capture of old values, making it align with what you typically observe with other Debezium connectors.</p> </div> </div> <div class="sect2"> <h3 id="new_arbitrary_based_payload_formats">New Arbitrary-based payload formats</h3> <div class="paragraph"> <p>While it&#8217;s common for users to utilize serialization based on Json, Avro, Protobufs, or CloudEvents, there may be reasons to use a more simplistic format. Thanks to a community contribution as part of <a href="https://issues.redhat.com/browse/DBZ-7512">DBZ-7512</a>, Debezium can be configured to use two new formats called <code>simplestring</code> and <code>binary</code>.</p> </div> <div class="paragraph"> <p>The <code>simplestring</code> and <code>binary</code> formats are configured in Debezium server using the <code>debezium.format</code> configurations. For <code>simplestring</code>, the payload will be serialized as a single <code>STRING</code> data type into the topic. For <code>binary</code>, the payload will be serialized as a <code>BYTES</code> using a <code>byte[]</code> (byte array).</p> </div> </div> <div class="sect2"> <h3 id="trace_level_logging_for_debezium_server">TRACE level logging for Debezium Server</h3> <div class="paragraph"> <p>Debezium Server is a ready-made runtime for Debezium source connectors that uses the Quarkus framework to manage the source and sink deployments. As most Debezium Server users are aware who have reached out with questions or bugs, we often ask for TRACE-level logs and this has often proven difficult as it requires a full rebuild of Debezium Server due to how minimum logging level is a build-time configuration in Quarkus.</p> </div> <div class="paragraph"> <p>With Debezium 2.6.0.CR1 release and later, this will no longer be required. The build time configuration has been adjusted by default to include TRACE logging levels, so moving forward users can simply set the log level to TRACE and restart Debezium Server to obtain the logs (<a href="https://issues.redhat.com/brwose/DBZ-7369">DBZ-7369</a>).</p> </div> </div> <div class="sect2"> <h3 id="google_pubsub_ordering_key_support">Google PubSub Ordering Key Support</h3> <div class="paragraph"> <p>The Debezium Server Google PubSub sink adapter has received a small update in Debezium 2.6. If you are streaming changes that have foreign key relationships, you may have wondered whether it was possible to specify an ordering key so that foreign key constraints could be maintained.</p> </div> <div class="paragraph"> <p>Debezium 2.6 introduces a new configurable property for the Google PubSub sink adapter, <code>ordering.key</code>, which allows the sink adapter to use an externally provided ordering key from the connector configuration for the events rather than using the default behavior based on the event&#8217;s key (<a href="https://issues.redhat.com/browse/DBZ-7435">DBZ-7435</a>).</p> </div> </div> <div class="sect2"> <h3 id="cloudevents_schema_name_customization">CloudEvents schema name customization</h3> <div class="paragraph"> <p>When using schema registry, event schemas need to be registered with a name so that they can be looked up upon later inquiries by pipelines. So when pairing CloudEvents formatted messages with schema registry, the same applies and in Debezium 2.6, you can explicitly control how the name is registered.</p> </div> <div class="paragraph"> <p>By default, the schema for a CloudEvent message will be automatically generated by the converter. However, if the auto generated schema names are not sufficient, you can adjust the configuration by specifying <code>dataSchemaName</code>, which can be set either to <code>generate</code> (the default behavior) or <code>header</code> to pull the schema name directly from the specified event header field.</p> </div> </div> <div class="sect2"> <h3 id="timestamp_converter_improvements">Timestamp converter improvements</h3> <div class="paragraph"> <p>Debezium released the new <code>TimezoneConverter</code> in Debezium 2.4, allowing users to target a specific time zone and to convert the outgoing payload time values to that targeted time zone. The original implementation was specifically restricted to allow conversion of values within the <code>before</code> or <code>after</code> parts of the payload; however, thanks to an improvement as a part of <a href="https://issues.redhat.com/browse/DBZ-7022">DBZ-7022</a>, the converter can now be used to convert other time-based fields in the metadata, such as <code>ts_ms</code> in the <code>source</code> information block.</p> </div> <div class="paragraph"> <p>This change helps to improve lag metric calculations in situations where the JVM running the connector is using a time zone that differs from the database and the calculation of the <em>envelope ts_ms</em> - <em>source ts_ms</em> results in a variance caused by the time zone. By using the <code>TimezoneConverter</code> to convert metadata fields, you can easily calculate the lag between those two fields without the time zone interfering.</p> </div> </div> <div class="sect2"> <h3 id="signal_table_watermark_metadata">Signal table watermark metadata</h3> <div class="paragraph"> <p>An incremental snapshot process requires a signal table to write open/close markers to coordinate the change boundaries with the data recorded in the transaction logs, unless you&#8217;re using MySQL&#8217;s read-only flavor. In some cases, users would like to be able to track the window time slot, knowing when the window was opened and closed.</p> </div> <div class="paragraph"> <p>Starting with Debezium 2.6, the <code>data</code> column in the signal table will be populated with the time window details, allowing users to obtain when the window was opened and closed. The following shows the details of the <code>data</code> column for each of the two signal markers:</p> </div> <div class="listingblock"> <div class="title">Window Open Marker</div> <div class="content"> <pre class="CodeRay highlight"><code data-lang="json">{<span class="key"><span class="delimiter">&quot;</span><span class="content">openWindowTimestamp</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">&lt;window-open-time&gt;</span><span class="delimiter">&quot;</span></span>}</code></pre> </div> </div> <div class="listingblock"> <div class="title">Window Close Marker</div> <div class="content"> <pre class="CodeRay highlight"><code data-lang="json">{<span class="key"><span class="delimiter">&quot;</span><span class="content">openWindowTimestamp</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">&lt;window-open-time&gt;</span><span class="delimiter">&quot;</span></span>, <span class="key"><span class="delimiter">&quot;</span><span class="content">closeWindowTimestamp</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">&lt;window-close-time&gt;</span><span class="delimiter">&quot;</span></span>}</code></pre> </div> </div> </div> <div class="sect2"> <h3 id="trace_level_logging_for_debezium_server_2">TRACE level logging for Debezium Server</h3> <div class="paragraph"> <p>Debezium Server is a ready-made runtime for Debezium source connectors that uses the Quarkus framework to manage the source and sink deployments. As most Debezium Server users are aware who have reached out with questions or bugs, we often ask for TRACE-level logs and this has often proven difficult as it requires a full rebuild of Debezium Server due to how minimum logging level is a build-time configuration in Quarkus.</p> </div> <div class="paragraph"> <p>With Debezium 2.6+ release, this will no longer be required. The build time configuration has been adjusted by default to include TRACE logging levels, so moving forward users can simply set the log level to TRACE and restart Debezium Server to obtain the logs (<a href="https://issues.redhat.com/brwose/DBZ-7369">DBZ-7369</a>).</p> </div> </div> <div class="sect2"> <h3 id="cassandra_configurable_partition_modes">Cassandra configurable partition modes</h3> <div class="paragraph"> <p>When a Debezium Cassandra connector read the commit logs, events are processed sequentially and added to a queue. If multiple queues exist, events become distributed between these queues based on the hash of the commit log filename. This resulted in situations where events could be emitted in non-chronological order.</p> </div> <div class="paragraph"> <p>With Debezium 2.6, the Cassandra connector&#8217;s hashing algorithm now uses the partition column names to resolve the queue index for insertion. This should provide a more stable insert order so that events are emitted in the correct order.</p> </div> <div class="paragraph"> <p>A new configuration option has been added to opt-in to this new behavior. Debezium users can add the new configuration property <code>event.order.guarantee.mode</code> set to <code>partition_values</code> to take advantage of this new mode. By default, the property retains the old behavior using a default of <code>commitlog_file</code>.</p> </div> </div> <div class="sect2"> <h3 id="other_fixes">Other fixes</h3> <div class="paragraph"> <p>In total, <a href="https://issues.redhat.com/issues/?jql=project%20%3D%20DBZ%20and%20fixVersion%20%20in%20(2.6.0.Alpha1%2C%202.6.0.Alpha2%2C%202.6.0.Beta1%2C%202.6.0.CR1%2C%202.6.0.Final">249 issues</a> were resolved in Debezium 2.6. The list of changes can also be found in our <a href="https://debezium.io/releases/2.6">release notes</a>. A big thank you to all the contributors from the community who worked diligently on this release: <a href="https://github.com/akulapid">Akula</a>, <a href="https://github.com/samssh">Amirmohammad Sadat Shokouhi</a>, <a href="https://github.com/andreas-ibm">Andreas Martens</a>, <a href="https://github.com/jchipmunk">Andrey Pustovetov</a>, <a href="https://github.com/akanimesh7">Animesh Kumar</a>, <a href="https://github.com/ani-sha">Anisha Mohanty</a>, <a href="https://github.com/shybovycha">Artem Shubovych</a>, <a href="https://github.com/ArthurLERAY">Arthur Le Ray</a>, <a href="https://github.com/roldanbob">Bob Roldan</a>, <a href="https://github.com/brenoavm">Breno Moreira</a>, <a href="https://github.com/Bue-von-hon">Bue Von Hun</a>, <a href="https://github.com/Naros">Chris Cranford</a>, <a href="https://github.com/coreillylocus">Ciaran O&#8217;Reilly</a>, <a href="https://github.com/CliffordCheefoon">Clifford Cheefoon</a>, <a href="https://github.com/enzo-cappa">Enzo Cappa</a>, <a href="https://github.com/gunnarmorling">Gunnar Morling</a>, <a href="https://github.com/harveyyue">Harvey Yue</a>, <a href="https://github.com/ilyasahsan123">Ilyas Ahsan</a>, <a href="https://github.com/nicholas-fwang">Inki Hwang</a>, <a href="https://github.com/jcechace">Jakub Cechacek</a>, <a href="https://github.com/james-johnston-thumbtack">James Johnston</a>, <a href="https://github.com/iankko">Jan.Lieskovsky</a>, <a href="https://github.com/sherpa003">Jiri Kulhanek</a>, <a href="https://github.com/novotnyJiri">Jiri Novotny</a>, <a href="https://github.com/jpechane">Jiri Pechanec</a>, <a href="https://github.com/JordanP">Jordan Pittier</a>, <a href="https://github.com/nrkljo">Lars M. Johansson</a>, <a href="https://github.com/methodmissing">Lourens Naudé</a>, <a href="https://github.com/Lucascanna">Luca Scannapieco</a>, <a href="https://github.com/mfvitale">Mario Fiore Vitale</a>, <a href="https://github.com/MartinMedek">Martin Medek</a>, <a href="https://github.com/mimaison">Mickael Maison</a>, <a href="https://github.com/mostafaghadimi">Mostafa Ghadimi</a>, <a href="https://github.com/nancyxu123">Nancy Xu</a>, <a href="https://github.com/nivolg">Nick Golubev</a>, <a href="https://github.com/obabec">Ondrej Babec</a>, <a href="https://github.com/wukachn">Peter Hamer</a>, <a href="https://github.com/rk3rn3r">René Kerner</a>, <a href="https://github.com/richardharrington">Richard Harrington</a>, <a href="https://github.com/roldanbob">Robert Roldan</a>, <a href="https://github.com/rkudryashov">Roman Kudryashov</a>, <a href="https://github.com/VWagen1989">Sean Wu</a>, <a href="https://github.com/eizners">Sergey Eizner</a>, <a href="https://github.com/Fr0z3Nn">Sergey Ivanov</a>, <a href="https://github.com/ShuranZhang">Shuran Zhang</a>, <a href="https://github.com/schampilomatis">Stavros Champilomatis</a>, <a href="https://github.com/twthorn">Thomas Thornton</a>, <a href="https://github.com/koneru9999">V K</a>, <a href="https://github.com/ramanenka">Vadzim Ramanenka</a>, <a href="https://github.com/fourpointfour">Vaibhav Kushwaha</a>, <a href="https://github.com/vsantona">Vincenzo Santonastaso</a>, <a href="https://github.com/vjuranek">Vojtech Juranek</a>, <a href="https://github.com/xmzhou00">Xianming Zhou</a>, <a href="https://github.com/leoloel">leoloel</a>, and <a href="https://github.com/overwatcheddude">حمود سمبول</a>!</p> </div> </div> </div> </div> <div class="sect1"> <h2 id="outlook_whats_next">Outlook &amp; What&#8217;s next?</h2> <div class="sectionbody"> <div class="paragraph"> <p>With Debezium 2.6 released, the team has already started work on Debezium 2.7, which will be released later this year in June. This upcoming release will feature a standalone MariaDB connector, user-friendly offset manipulation, read-only incremental snapshots for relational connectors, and possibly a sneak peek at the first PoC for Debezium Server&#8217;s UI.</p> </div> <div class="paragraph"> <p>This next quarter is equally ambitious with its deliverables, and we&#8217;d like to ask you to join the conversation. You can read all the details on the project&#8217;s 2024 <a href="https://debezium.io/roadmap">road map</a>, and get in touch with us on the <a href="https://groups.google.com/g/debezium">mailing list</a> or <a href="https://debezium.zulipchat.com/login/#narrow/stream/302529-users">Zulip chat</a>. We would love to hear your feedback on the road map and any suggestions you may that may not be included.</p> </div> <div class="paragraph"> <p>This upcoming quarter will mark the last and final release in the Debezium 2.x release stream with Debezium 2.7. With a new major release brewing, this is now the time for code clean-up and deprecation removal. If you have not taken a moment to review features that may have been scheduled for removal, we ask that you do and offer your feedback as soon as possible. We want to guarantee that the transition to Debezium 3 is as much of a drop-in replacement as possible, but we cannot do that without your help.</p> </div> <div class="paragraph"> <p>With spring in full swing, don&#8217;t forget to stop and enjoy the roses. Until next time&#8230;&#8203;</p> </div> </div> </div>]]></content><author><name>Chris Cranford</name></author><category term="releases"/><category term="mongodb"/><category term="mysql"/><category term="mariadb"/><category term="postgres"/><category term="sqlserver"/><category term="cassandra"/><category term="oracle"/><category term="db2"/><category term="vitess"/><category term="outbox"/><category term="spanner"/><category term="jdbc"/><category term="informix"/><category term="ibmi"/><summary type="html"><![CDATA[As the team has sprung forward into action, with spring upon us, and we&#8217;re in the summer spirit, we are pleased to announce the immediate release of Debezium 2.6.0.Final. This release includes dozens of new features, bug fixes, and improvements from the valiant efforts of the team and community contributors. Overall, there were 249 issues resolved with contributions from over 56 contributors. Lets a moment and review all the changes.]]></summary></entry><entry><title type="html">Debezium 2.6.0.CR1 Released</title><link href="https://debezium.io/blog/2024/03/25/debezium-2-6-cr1-released/" rel="alternate" type="text/html" title="Debezium 2.6.0.CR1 Released"/><published>2024-03-25T00:00:00+00:00</published><updated>2024-03-25T00:00:00+00:00</updated><id>https://debezium.io/blog/2024/03/25/debezium-2-6-cr1-released</id><content type="html" xml:base="https://debezium.io/blog/2024/03/25/debezium-2-6-cr1-released/"><![CDATA[<div class="paragraph"> <p>As we are just a week away from Debezium 2.6.0.Final, I am pleased to announce Debezium <strong>2.6.0.CR1</strong>, the first release candidate for the 2.6 release stream. This release includes a number of improvements, including XML support for the Oracle OpenLogReplicator adapter, TRACE level logging support for Debezium Server, configurable partition modes for Cassandra, the new Snapshot API for MongoDB and Db2, and more.</p> </div> <div class="paragraph"> <p>Additionally, this release includes a variety of bug fixes and several breaking changes.</p> </div> <div class="paragraph"> <p>Let&#8217;s take a closer look at all these changes and improvements included in Debezium 2.6.0.CR1; as always, you can find the complete list of changes for this release in the <a href="/releases/2.6/release-notes">release notes</a>. Please remember to take special note to any breaking changes that could affect your upgrade path.</p> </div> <div class="paragraph"> <p></p> </div> <div class="sect1"> <h2 id="breaking_changes">Breaking changes</h2> <div class="sectionbody"> <div class="paragraph"> <p>While we strive to avoid breaking changes, sometimes those changes are inevitable to evolve the right direction. This release includes several breaking changes.</p> </div> <div class="dlist"> <dl> <dt class="hdlist1">MySQL</dt> <dd> <p>The MysQL driver was updated to version 8.3.0, and this driver is not compatible with MySQL 5.x. If you still need to use an older MySQL version, please downgrade the driver after installation to a version that is compatible with your database (<a href="https://issues.redhat.com/browse/DBZ-7652">DBZ-7652</a>).</p> </dd> <dt class="hdlist1">SQL Server</dt> <dd> <p>The SQL Server connector was not capturing all schemas when the connector was first deployed, and instead, was only capturing the schemas based on the tables defined in the configuration&#8217;s include list. This was a bug that could prevent users from easily adding new tables to the connector when expecting that the new table&#8217;s schema would already exist in the schema history topic. The connector now correctly honors the <code>store.only.captured.tables.ddl</code> configuration option (<a href="https://issues.redhat.com/browse/DBZ-7593">DBZ-7593</a>).<br> <br> For existing connector deployments, if you do not specifically set the <code>store.only.captured.tables.ddl</code> property for the schema history topic, the connector will begin capturing schema changes for all relevant tables in your database. If you want to prevent this and retain the prior behavior, you will need to adjust your connector configuration by adding <code>schema.history.internal.store.only.captured.tables.ddl</code> with a value of <code>true</code>.</p> </dd> <dt class="hdlist1">Vitess</dt> <dd> <p>The Vitess connector previously used the timestamp of <code>BEGIN</code> message as the source timestamp. This has been changed to the usage of the <code>COMMIT</code> timestamp to reflect the behaviour of other connectors (<a href="https://issues.redhat.com/browse/DBZ-7628">DBZ-7628</a>).</p> </dd> </dl> </div> </div> </div> <div class="sect1"> <h2 id="new_features_and_improvements">New features and improvements</h2> <div class="sectionbody"> <div class="paragraph"> <p>Debezium 2.6.CR1 also introduces more improvements and features, lets take a look at each individually.</p> </div> <div class="sect2"> <h3 id="xml_support_for_openlogreplicator">XML Support for OpenLogReplicator</h3> <div class="paragraph"> <p>The Debezium for Oracle connector supports connections with OpenLogReplicator, allowing Oracle users to stream changes directly from the transaction logs. The latest build of OpenLogReplicator, version <strong>1.5.0</strong> has added support for XML column types.</p> </div> <div class="paragraph"> <p>To get started streaming XML with OpenLogReplicator, please upgrade the OpenLogReplicator process to 1.5.0 and restart the replicator process. Be aware that if you want to stream binary-based XML column data, you will need to toggle this feature as enabled in the OpenLogReplicator configuration.</p> </div> </div> <div class="sect2"> <h3 id="trace_level_logging_for_debezium_server">TRACE level logging for Debezium Server</h3> <div class="paragraph"> <p>Debezium Server is a ready-made runtime for Debezium source connectors that uses the Quarkus framework to manage the source and sink deployments. As most Debezium Server users are aware who have reached out with questions or bugs, we often ask for TRACE-level logs and this has often proven difficult as it requires a full rebuild of Debezium Server due to how minimum logging level is a build-time configuration in Quarkus.</p> </div> <div class="paragraph"> <p>With Debezium 2.6.0.CR1 release and later, this will no longer be required. The build time configuration has been adjusted by default to include TRACE logging levels, so moving forward users can simply set the log level to TRACE and restart Debezium Server to obtain the logs (<a href="https://issues.redhat.com/brwose/DBZ-7369">DBZ-7369</a>).</p> </div> </div> <div class="sect2"> <h3 id="new_unified_snapshot_modes">New Unified Snapshot Modes</h3> <div class="paragraph"> <p>The snapshot process is an integral part of each connector&#8217;s lifecycle, and it&#8217;s responsible for collecting and sending all the historical data that exists in your data store to your target systems, if desired. For Debezium users who work with multiple connector types, we understand that having differing snapshot modes across connectors can sometimes be confusing to work with. So this change is designed to address that.</p> </div> <div class="paragraph"> <p>For many of you who may have already tried or installed Debezium 2.6 pre-releases, you&#8217;re already using the unified snapshot SPI as it was designed to be a drop-in-replacement initially, requiring no changes. This release finishes that work for MongoDB and DB2.</p> </div> <div class="paragraph"> <p>Of these changes, the most notable include the following:</p> </div> <div class="ulist"> <ul> <li> <p>All snapshot modes are available to all connectors, excluding <code>never</code> which remains specific to MySQL. This means that connectors that may have previously not supported a snapshot mode, such as <code>when_needed</code>, can now use this mode to retake a snapshot when the connector identifies that its necessary.</p> </li> <li> <p>The <code>schema_only_recovery</code> mode has been deprecated and replaced by <code>recovery</code>.</p> </li> <li> <p>The <code>schema_only</code> mode has also been deprecated and replaced by <code>no_data</code>.</p> </li> </ul> </div> <div class="admonitionblock important"> <table> <tr> <td class="icon"> <i class="fa icon-important" title="Important"></i> </td> <td class="content"> <div class="paragraph"> <p>All deprecated modes will remain available until Debezium 3 later this year. This provides users with about six months to adjust scripts, configurations, and processes in advance.</p> </div> </td> </tr> </table> </div> </div> <div class="sect2"> <h3 id="cassandra_configurable_partition_modes">Cassandra configurable partition modes</h3> <div class="paragraph"> <p>When a Debezium Cassandra connector read the commit logs, events are processed sequentially and added to a queue. If multiple queues exist, events become distributed between these queues based on the hash of the commit log filename. This resulted in situations where events could be emitted in non-chronological order.</p> </div> <div class="paragraph"> <p>With Debezium 2.6, the Cassandra connector&#8217;s hashing algorithm now uses the partition column names to resolve the queue index for insertion. This should provide a more stable insert order so that events are emitted in the correct order.</p> </div> <div class="paragraph"> <p>A new configuration option has been added to opt-in to this new behavior. Debezium users can add the new configuration property <code>event.order.guarantee.mode</code> set to <code>partition_values</code> to take advantage of this new mode. By default, the property retains the old behavior using a default of <code>commitlog_file</code>.</p> </div> </div> </div> </div> <div class="sect1"> <h2 id="other_fixes">Other fixes</h2> <div class="sectionbody"> <div class="paragraph"> <p>In addition, there were quite a number of stability and bug fixes that made it into this release. These include the following:</p> </div> <div class="ulist"> <ul> <li> <p>Log Mining Processor advances SCN incorrectly if LogMiner query returns no rows <a href="https://issues.redhat.com/browse/DBZ-6679">DBZ-6679</a></p> </li> <li> <p>debezium-connector-jdbc occurred java.sql.SQLException: ORA-01461: can bind a LONG value only <a href="https://issues.redhat.com/browse/DBZ-6900">DBZ-6900</a></p> </li> <li> <p>Align snapshot modes for MongoDB <a href="https://issues.redhat.com/browse/DBZ-7304">DBZ-7304</a></p> </li> <li> <p>Align snapshot modes for DB2 <a href="https://issues.redhat.com/browse/DBZ-7305">DBZ-7305</a></p> </li> <li> <p>Align all snapshot mode on all connectors <a href="https://issues.redhat.com/browse/DBZ-7308">DBZ-7308</a></p> </li> <li> <p>Oracle connector unable to find SCN after Exadata maintenance updates <a href="https://issues.redhat.com/browse/DBZ-7389">DBZ-7389</a></p> </li> <li> <p>Oracle LOB requery on Primary Key change does not work for all column types <a href="https://issues.redhat.com/browse/DBZ-7458">DBZ-7458</a></p> </li> <li> <p>Incorrect value of TIME(n) replicate from MySQL if the original value is negative <a href="https://issues.redhat.com/browse/DBZ-7594">DBZ-7594</a></p> </li> <li> <p>Re-select Post Processor not working for complex types <a href="https://issues.redhat.com/browse/DBZ-7596">DBZ-7596</a></p> </li> <li> <p>Null instead of toast placeholder written for binary types when "hex" mode configured <a href="https://issues.redhat.com/browse/DBZ-7599">DBZ-7599</a></p> </li> <li> <p>Poor snapshot performance during schema snapshot DDL processing <a href="https://issues.redhat.com/browse/DBZ-7608">DBZ-7608</a></p> </li> <li> <p>Remove LogMiner continuous mining configuration option <a href="https://issues.redhat.com/browse/DBZ-7610">DBZ-7610</a></p> </li> <li> <p>Re-select post processor performance <a href="https://issues.redhat.com/browse/DBZ-7611">DBZ-7611</a></p> </li> <li> <p>Uncaught exception during config validation in Engine <a href="https://issues.redhat.com/browse/DBZ-7614">DBZ-7614</a></p> </li> <li> <p>Enhanced event timestamp precision combined with ExtractNewRecordState not working <a href="https://issues.redhat.com/browse/DBZ-7615">DBZ-7615</a></p> </li> <li> <p>Incremental snapshot query doesn&#8217;t honor message.key.columns order <a href="https://issues.redhat.com/browse/DBZ-7617">DBZ-7617</a></p> </li> <li> <p>Metric ScnFreezeCount never increases <a href="https://issues.redhat.com/browse/DBZ-7619">DBZ-7619</a></p> </li> <li> <p>JDBC connector does not process ByteBuffer field value <a href="https://issues.redhat.com/browse/DBZ-7620">DBZ-7620</a></p> </li> <li> <p>Update Quarkus Outbox to Quarkus 3.8.2 <a href="https://issues.redhat.com/browse/DBZ-7623">DBZ-7623</a></p> </li> <li> <p>Upgrade Debezium Server to Quarkus 3.2.10 <a href="https://issues.redhat.com/browse/DBZ-7624">DBZ-7624</a></p> </li> <li> <p>MongoDbReplicaSet and MongoDbShardedCluster should not create a new network for each builder instance by default <a href="https://issues.redhat.com/browse/DBZ-7626">DBZ-7626</a></p> </li> <li> <p>Cassandra can have misaligned Jackson dependencies <a href="https://issues.redhat.com/browse/DBZ-7629">DBZ-7629</a></p> </li> <li> <p>Remove forgotten lombok code from system tests <a href="https://issues.redhat.com/browse/DBZ-7634">DBZ-7634</a></p> </li> <li> <p>Numerci value without mantissa cannot be parsed <a href="https://issues.redhat.com/browse/DBZ-7643">DBZ-7643</a></p> </li> <li> <p>Add JDBC connector to artifact server image preparation <a href="https://issues.redhat.com/browse/DBZ-7644">DBZ-7644</a></p> </li> <li> <p>Revert removal of Oracle LogMiner continuous mining <a href="https://issues.redhat.com/browse/DBZ-7645">DBZ-7645</a></p> </li> <li> <p>Add documentation for MongoDB capture.mode.full.update.type property <a href="https://issues.redhat.com/browse/DBZ-7647">DBZ-7647</a></p> </li> <li> <p>Missing test annotation in PostgresConnectorIT <a href="https://issues.redhat.com/browse/DBZ-7649">DBZ-7649</a></p> </li> <li> <p>Fix MySQL image fetch for tests <a href="https://issues.redhat.com/browse/DBZ-7651">DBZ-7651</a></p> </li> <li> <p>RedisSchemaHistoryIT continually fails <a href="https://issues.redhat.com/browse/DBZ-7654">DBZ-7654</a></p> </li> <li> <p>Upgrade Quarkus Outbox Extension to Quarkus 3.8.3 <a href="https://issues.redhat.com/browse/DBZ-7656">DBZ-7656</a></p> </li> <li> <p>Bump SQL Server test image to SQL Server 2022 <a href="https://issues.redhat.com/browse/DBZ-7657">DBZ-7657</a></p> </li> <li> <p>Upgrade Debezium Server to Quarkus 3.2.11.Final <a href="https://issues.redhat.com/browse/DBZ-7662">DBZ-7662</a></p> </li> <li> <p>Update QOSDK and Quarkus to fix vcs-url annotation CVE <a href="https://issues.redhat.com/browse/DBZ-7664">DBZ-7664</a></p> </li> <li> <p>Exclude jcl-over-slf4j dependency <a href="https://issues.redhat.com/browse/DBZ-7665">DBZ-7665</a></p> </li> <li> <p>MySQL connector fails to parse DDL with RETURNING keyword <a href="https://issues.redhat.com/browse/DBZ-7666">DBZ-7666</a></p> </li> <li> <p>Schema history comparator doesn&#8217;t handle SERVER_ID_KEY and TIMESTAMP_KEY properly <a href="https://issues.redhat.com/browse/DBZ-7690">DBZ-7690</a></p> </li> <li> <p>Duplicate envar generated in operator bundle <a href="https://issues.redhat.com/browse/DBZ-7703">DBZ-7703</a></p> </li> </ul> </div> <div class="paragraph"> <p>Altogether, <a href="https://issues.redhat.com/issues/?jql=project%20%3D%20DBZ%20AND%20fixVersion%20%3D%202.6.0.CR1%20ORDER%20BY%20component%20ASC">48 issues</a> were fixed for this release. A big thank you to all the contributors from the community who worked on this release: <a href="https://github.com/samssh">Amirmohammad Sadat Shokouhi</a>, <a href="https://github.com/andreas-ibm">Andreas Martens</a>, <a href="https://github.com/jchipmunk">Andrey Pustovetov</a>, <a href="https://github.com/Naros">Chris Cranford</a>, <a href="https://github.com/gunnarmorling">Gunnar Morling</a>, <a href="https://github.com/harveyyue">Harvey Yue</a>, <a href="https://github.com/indraraj">Indra Shukla</a>, <a href="https://github.com/jcechace">Jakub Cechacek</a>, <a href="https://github.com/novotnyJiri">Jiri Novotny</a>, <a href="https://github.com/jpechane">Jiri Pechanec</a>, <a href="https://github.com/Lucascanna">Luca Scannapieco</a>, <a href="https://github.com/mfvitale">Mario Fiore Vitale</a>, <a href="https://github.com/MartinMedek">Martin Medek</a>, <a href="https://github.com/nivolg">Nick Golubev</a>, <a href="https://github.com/roldanbob">Robert Roldan</a>, <a href="https://github.com/VWagen1989">Sean Wu</a>, <a href="https://github.com/eizners">Sergey Eizner</a>, <a href="https://github.com/twthorn">Thomas Thornton</a>, and <a href="https://github.com/fourpointfour">Vaibhav Kushwaha</a>!</p> </div> </div> </div> <div class="sect1"> <h2 id="whats_next">What&#8217;s next?</h2> <div class="sectionbody"> <div class="paragraph"> <p>We have just over a week before the Debezium 2.6 final release. If you have not given any of the latest pre-releases a try, we encourage everyone to do so and provide feedback if you face any problems or issues deploying this release candidate. Our goal is to release the 2.6.0.Final build immediately after the upcoming holiday break.</p> </div> <div class="paragraph"> <p>As the team begins to shift gears toward Debezium 2.7, here&#8217;s a speak peek at some upcoming highlights:</p> </div> <div class="ulist"> <ul> <li> <p>Standalone, Official MariaDB connector</p> </li> <li> <p>User-friendly offset manipulation</p> </li> <li> <p>Read-only incremental snapshots for all relational connectors</p> </li> <li> <p>Sneak peek at the first PoC of the Debezium Server UI</p> </li> </ul> </div> <div class="paragraph"> <p>For more details, please check out our <a href="https://debezium.io/roadmap">road map</a> for all upcoming details around Debezium 2.7 and beyond.</p> </div> <div class="paragraph"> <p>As always, please be sure to get in touch with us on the <a href="https://groups.google.com/g/debezium">mailing list</a> or <a href="https://debezium.zulipchat.com/login/#narrow/stream/302529-users">Zulip chat</a> if you have questions or feedback. We&#8217;re interested to know what you&#8217;d like to see changed in Debezium 3, so let us know!</p> </div> <div class="paragraph"> <p>Until next time&#8230;&#8203;</p> </div> </div> </div>]]></content><author><name>Chris Cranford</name></author><category term="releases"/><category term="mongodb"/><category term="mysql"/><category term="mariadb"/><category term="postgres"/><category term="sqlserver"/><category term="cassandra"/><category term="oracle"/><category term="db2"/><category term="vitess"/><category term="outbox"/><category term="spanner"/><category term="informix"/><category term="ibmi"/><summary type="html"><![CDATA[As we are just a week away from Debezium 2.6.0.Final, I am pleased to announce Debezium 2.6.0.CR1, the first release candidate for the 2.6 release stream. This release includes a number of improvements, including XML support for the Oracle OpenLogReplicator adapter, TRACE level logging support for Debezium Server, configurable partition modes for Cassandra, the new Snapshot API for MongoDB and Db2, and more. Additionally, this release includes a variety of bug fixes and several breaking changes. Let&#8217;s take a closer look at all these changes and improvements included in Debezium 2.6.0.CR1; as always, you can find the complete list of changes for this release in the release notes. Please remember to take special note to any breaking changes that could affect your upgrade path.]]></summary></entry><entry><title type="html">Debezium 2.5.3.Final Released</title><link href="https://debezium.io/blog/2024/03/19/debezium-2-5-3-final-released/" rel="alternate" type="text/html" title="Debezium 2.5.3.Final Released"/><published>2024-03-19T00:00:00+00:00</published><updated>2024-03-19T00:00:00+00:00</updated><id>https://debezium.io/blog/2024/03/19/debezium-2-5-3-final-released</id><content type="html" xml:base="https://debezium.io/blog/2024/03/19/debezium-2-5-3-final-released/"><![CDATA[<div class="paragraph"> <p>We are happy to announce the third maintenance release of the Debezium 2.5 release stream, <strong>Debezium 2.5.3.Final</strong>. This release includes some improvements and numerous bug fixes, so let&#8217;s dive right in&#8230;&#8203;</p> </div> <div class="paragraph"> <p></p> </div> <div class="sect1"> <h2 id="breaking_changes">Breaking changes</h2> <div class="sectionbody"> <div class="paragraph"> <p>The team aims to avoid any potential breaking changes between minor releases; however, such changes are sometimes inevitable.</p> </div> <div class="dlist"> <dl> <dt class="hdlist1">SQL Server</dt> <dd> <p>The SQL Server connector was not capturing all schemas when the connector was first deployed, and instead, was only capturing the schemas based on the tables defined in the configuration&#8217;s include list. This was a bug that could prevent users from easily adding new tables to the connector when expecting that the new table&#8217;s schema would already exist in the schema history topic. The connector now correctly honors the <code>store.only.captured.tables.ddl</code> configuration option (<a href="https://issues.redhat.com/browse/DBZ-7593">DBZ-7593</a>).<br> <br> For existing connector deployments, if you do not specifically set the <code>store.only.captured.tables.ddl</code> property for the schema history topic, the connector will begin capturing schema changes for all relevant tables in your database. If you want to prevent this and retain the prior behavior, you will need to adjust your connector configuration by adding <code>schema.history.internal.store.only.captured.tables.ddl</code> with a value of <code>true</code>.</p> </dd> </dl> </div> </div> </div> <div class="sect1"> <h2 id="improvements_and_changes">Improvements and changes</h2> <div class="sectionbody"> <div class="sect2"> <h3 id="trace_level_logging_for_debezium_server">TRACE level logging for Debezium Server</h3> <div class="paragraph"> <p>Debezium Server is a ready-made runtime for Debezium source connectors that uses the Quarkus framework to manage the source and sink deployments. As most Debezium Server users are aware who have reached out with questions or bugs, we often ask for TRACE-level logs and this has often proven difficult as it requires a full rebuild of Debezium Server due to how minimum logging level is a build-time configuration in Quarkus.</p> </div> <div class="paragraph"> <p>With Debezium 2.5.3.Final and the upcoming Debezium 2.6.0.Final releases, this will no longer be required. The build time configuration has been adjusted by default to include TRACE logging levels, so moving forward users can simply set the log level to TRACE and restart Debezium Server to obtain the logs (<a href="https://issues.redhat.com/brwose/DBZ-7369">DBZ-7369</a>).</p> </div> </div> <div class="sect2"> <h3 id="informix_appends_lsn_to_transaction_identifier">Informix appends LSN to Transaction Identifier</h3> <div class="paragraph"> <p>Informix databases only increases the transaction identifier when there are concurrent transactions, otherwise the value remains identical for sequential transactions. This can prove difficult for users who may want to utilize the transaction metadata to order change events in a post processing step.</p> </div> <div class="paragraph"> <p>In Debezium 2.5.3.Final and the upcoming 2.6, Informix will now append the log sequence number (LSN) to the transaction identifier so that users can easily sort change events based on the transaction metadata. The transaction identifier field will now use the format <code>&lt;id&gt;:&lt;lsn&gt;</code> (<a href="https://issues.redhat.com/browse/DBZ-7454">DBZ-7454</a>). This change affects transaction metadata events and the <code>source</code> information block for change events, as shown below:</p> </div> <div class="listingblock"> <div class="title">Transaction Begin Event</div> <div class="content"> <pre class="CodeRay highlight"><code data-lang="json">{
  <span class="key"><span class="delimiter">&quot;</span><span class="content">status</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">BEGIN</span><span class="delimiter">&quot;</span></span>,
  <span class="key"><span class="delimiter">&quot;</span><span class="content">id</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">571:53195829</span><span class="delimiter">&quot;</span></span>,
  <span class="error">.</span><span class="error">.</span><span class="error">.</span>
}</code></pre> </div> </div> <div class="listingblock"> <div class="title">Transaction End Event</div> <div class="content"> <pre class="CodeRay highlight"><code data-lang="json">{
  <span class="key"><span class="delimiter">&quot;</span><span class="content">status</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">END</span><span class="delimiter">&quot;</span></span>,
  <span class="key"><span class="delimiter">&quot;</span><span class="content">id</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">571:53195832</span><span class="delimiter">&quot;</span></span>,
  <span class="error">.</span><span class="error">.</span><span class="error">.</span>
}</code></pre> </div> </div> <div class="listingblock"> <div class="title">Change Events</div> <div class="content"> <pre class="CodeRay highlight"><code data-lang="json">{
  <span class="error">.</span><span class="error">.</span><span class="error">.</span>
  <span class="key"><span class="delimiter">&quot;</span><span class="content">source</span><span class="delimiter">&quot;</span></span>: {
    <span class="key"><span class="delimiter">&quot;</span><span class="content">id</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">571:53195832</span><span class="delimiter">&quot;</span></span>
    <span class="error">.</span><span class="error">.</span><span class="error">.</span>
  }
}</code></pre> </div> </div> </div> <div class="sect2"> <h3 id="postgresql_improvements">PostgreSQL improvements</h3> <div class="dlist"> <dl> <dt class="hdlist1">Updated JDBC driver</dt> <dd> <p>The PostgreSQL driver was upgraded to version 42.6.1.</p> </dd> <dt class="hdlist1">Improved logging</dt> <dd> <p>During the start-up of the PostgreSQL connector, some users reported the connector stuck or acting as though it could be caught in an infinite loop. (<a href="https://issues.redhat.com/browse/DBZ-7581">DBZ-7581</a>). The issue appeared that the <code>pg_replication_slot_advance</code> was taking longer than the read database timeout, and the exception thrown wasn&#8217;t satisfactory to identify the problem. In this case, the logging has been significantly improved to identify this root-cause so that users can make necessary adjustments if they encounter this problem.</p> </dd> </dl> </div> </div> </div> </div> <div class="sect1"> <h2 id="other_changes">Other changes</h2> <div class="sectionbody"> <div class="paragraph"> <p>Altogether, <a href="https://issues.redhat.com/issues/?jql=project%20%3D%20DBZ%20AND%20fixVersion%20%3D%202.5.3.Final%20ORDER%20BY%20component%20ASC">25 issues</a> were fixed in this release:</p> </div> <div class="ulist"> <ul> <li> <p>NullPointerException in MongoDB connector <a href="https://issues.redhat.com/browse/DBZ-6434">DBZ-6434</a></p> </li> <li> <p>Numeric default value decimal scale mismatch <a href="https://issues.redhat.com/browse/DBZ-7562">DBZ-7562</a></p> </li> <li> <p>Documentation conflict <a href="https://issues.redhat.com/browse/DBZ-7565">DBZ-7565</a></p> </li> <li> <p>Oracle connector always brings OLR dependencies <a href="https://issues.redhat.com/browse/DBZ-7579">DBZ-7579</a></p> </li> <li> <p>Correct JDBC connector dependencies <a href="https://issues.redhat.com/browse/DBZ-7580">DBZ-7580</a></p> </li> <li> <p>Unavailable Toasted HSTORE Json Storage Mode column causes serialization failure <a href="https://issues.redhat.com/browse/DBZ-7582">DBZ-7582</a></p> </li> <li> <p>Incorrect value of TIME(n) replicate from MySQL if the original value is negative <a href="https://issues.redhat.com/browse/DBZ-7594">DBZ-7594</a></p> </li> <li> <p>Re-select Post Processor not working for complex types <a href="https://issues.redhat.com/browse/DBZ-7596">DBZ-7596</a></p> </li> <li> <p>Serialization of XML columns with NULL values fails using Infinispan Buffer <a href="https://issues.redhat.com/browse/DBZ-7598">DBZ-7598</a></p> </li> <li> <p>Null instead of toast placeholder written for binary types when "hex" mode configured <a href="https://issues.redhat.com/browse/DBZ-7599">DBZ-7599</a></p> </li> <li> <p>Poor snapshot performance during schema snapshot DDL processing <a href="https://issues.redhat.com/browse/DBZ-7608">DBZ-7608</a></p> </li> <li> <p>Re-select post processor performance <a href="https://issues.redhat.com/browse/DBZ-7611">DBZ-7611</a></p> </li> <li> <p>Uncaught exception during config validation in Engine <a href="https://issues.redhat.com/browse/DBZ-7614">DBZ-7614</a></p> </li> <li> <p>Incremental snapshot query doesn&#8217;t honor message.key.columns order <a href="https://issues.redhat.com/browse/DBZ-7617">DBZ-7617</a></p> </li> <li> <p>Metric ScnFreezeCount never increases <a href="https://issues.redhat.com/browse/DBZ-7619">DBZ-7619</a></p> </li> <li> <p>Upgrade Debezium Server to Quarkus 3.2.10 <a href="https://issues.redhat.com/browse/DBZ-7624">DBZ-7624</a></p> </li> <li> <p>Cassandra can have misaligned Jackson dependencies <a href="https://issues.redhat.com/browse/DBZ-7629">DBZ-7629</a></p> </li> <li> <p>Numeric value without mantissa cannot be parsed <a href="https://issues.redhat.com/browse/DBZ-7643">DBZ-7643</a></p> </li> <li> <p>Fix MySQL image fetch for tests <a href="https://issues.redhat.com/browse/DBZ-7651">DBZ-7651</a></p> </li> </ul> </div> <div class="paragraph"> <p>A big thank you to all the contributors from the community who worked on this release: <a href="https://github.com/samssh">Amirmohammad Sadat Shokouhi</a>, <a href="https://github.com/andreas-ibm">Andreas Martens</a>, <a href="https://github.com/jchipmunk">Andrey Pustovetov</a>, <a href="https://github.com/ani-sha">Anisha Mohanty</a>, <a href="https://github.com/Naros">Chris Cranford</a>, <a href="https://github.com/enzo-cappa">Enzo Cappa</a>, <a href="https://github.com/indraraj">Indra Shukla</a>, <a href="https://github.com/jpechane">Jiri Pechanec</a>, <a href="https://github.com/mfvitale">Mario Fiore Vitale</a>, <a href="https://github.com/nivolg">Nick Golubev</a>, <a href="https://github.com/razvanz">Razvan Laurus</a>, <a href="https://github.com/roldanbob">Robert Roldan</a>, and <a href="https://github.com/VWagen1989">Sean Wu</a>!</p> </div> </div> </div> <div class="sect1"> <h2 id="outlook_whats_next">Outlook &amp; What&#8217;s next?</h2> <div class="sectionbody"> <div class="paragraph"> <p>We are only just a few weeks away from the final build of Debezium 2.6. I would anticipate 2.6.0.CR1 build later in the week, with 2.6.0.Final sometime next week, barring no unforeseen issues.</p> </div> <div class="paragraph"> <p>In a few short weeks, the team will begin to shift focus to what lies ahead with Debezium 2.7. This will be the last minor release of the Debezium 2.x release stream, which will include read-only incremental snapshots for other connectors, a new dedicated MariaDB source connector, and a MongoDB sink connector, just to name a few highlights. We will also be carrying over any work from 2.6 that we&#8217;re still working on but didn&#8217;t make it into that release.</p> </div> <div class="paragraph"> <p>And in closing, the last half of the year will be focusing on Debezium 3, where we&#8217;ll be moving to Java 17, work on new time-series source connectors, and more. Please take a moment and review our <a href="/docs/roadmap">road map</a>. If you have any suggestions or ideas, please feel free to get in touch with us on our <a href="https://groups.google.com/forum/#!forum/debezium">mailing list</a> or in our <a href="https://debezium.zulipchat.com/login/#narrow/stream/302529-users">Zulip chat</a>.</p> </div> <div class="paragraph"> <p>Until next time&#8230;&#8203;</p> </div> </div> </div>]]></content><author><name>Chris Cranford</name></author><category term="releases"/><category term="mongodb"/><category term="mysql"/><category term="postgres"/><category term="sqlserver"/><category term="cassandra"/><category term="oracle"/><category term="db2"/><category term="vitess"/><category term="outbox"/><category term="spanner"/><category term="jdbc"/><category term="informix"/><summary type="html"><![CDATA[We are happy to announce the third maintenance release of the Debezium 2.5 release stream, Debezium 2.5.3.Final. This release includes some improvements and numerous bug fixes, so let&#8217;s dive right in&#8230;&#8203;]]></summary></entry></feed>