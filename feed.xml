<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom"><generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator><link href="https://debezium.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://debezium.io/" rel="alternate" type="text/html"/><updated>2024-08-02T03:43:00+00:00</updated><id>https://debezium.io/feed.xml</id><title type="html">Debezium</title><subtitle>Debezium is an open source distributed platform for change data capture. Start it up, point it at your databases, and your apps can start responding to all of the inserts, updates, and deletes that other apps commit to your databases. Debezium is durable and fast, so your apps can respond quickly and never miss an event, even when things go wrong.</subtitle><entry><title type="html">Debezium 3.0.0.Alpha1 Released</title><link href="https://debezium.io/blog/2024/07/11/debezium-3.0-alpha1-released/" rel="alternate" type="text/html" title="Debezium 3.0.0.Alpha1 Released"/><published>2024-07-11T00:00:00+00:00</published><updated>2024-07-11T00:00:00+00:00</updated><id>https://debezium.io/blog/2024/07/11/debezium-3.0-alpha1-released</id><content type="html" xml:base="https://debezium.io/blog/2024/07/11/debezium-3.0-alpha1-released/"><![CDATA[<div class="paragraph"> <p>We are happy to announce the first pre-release of Debezium 3, <strong>3.0.0.Alpha1</strong>. This release, albeit smaller than our normal pre-releases, is highly focused on a few key points, such as testing the release process with Java 17/21; however, it also includes several new features. Let&#8217;s take a moment and talk about the upcoming breaking changes in-depth and the new features you will find.</p> </div> <div class="paragraph"> <p></p> </div> <div class="sect1"> <h2 id="breaking-changes">Breaking changes</h2> <div class="sectionbody"> <div class="paragraph"> <p>With any new major release of software, there is often several breaking changes. The Debezium <strong>3.0.0.Alpha1</strong> release is no exception, so lets discuss the major changes you should be aware about.</p> </div> <div class="sect2"> <h3 id="java_and_maven_requirements_changed">Java and Maven requirements changed</h3> <div class="paragraph"> <p>This release also shifts the Java requirements needed to both build and run Debezium. In addition, this release also requires a later version of Maven for building Debezium from source.</p> </div> <div class="paragraph"> <p>If you intend to build Debezium from source for any reason, all Debezium projects require using Java 21 to build and Maven 3.9.8. This includes the main repository, community-led repositories, Debezium Server, Operator, etc. If you attempt to build Debezium from source using a version of Java that is less-than Java 21, the build will report a Java version error, instructing you to use Java 21 or higher.</p> </div> <div class="paragraph"> <p>All Debezium connectors require a baseline of <strong>Java 17</strong> for runtime. This means if you are not building from source but simply deploying the connectors on runtimes such as Kafka Connect, then <strong>Java 17</strong> is sufficient.</p> </div> <div class="paragraph"> <p>If you are using Debezium Server, Debezium Operator, or the Debezium Quarkus Outbox Extension, these components all require <strong>Java 21</strong> for both runtime and build-time.</p> </div> <div class="paragraph"> <p>Please see the following chart from an at-a-glance view of the Java and Maven requirements</p> </div> <table class="tableblock frame-all grid-all stretch"> <caption class="title">Table 1. Requirements by component</caption> <colgroup> <col style="width: 25%;"> <col style="width: 25%;"> <col style="width: 25%;"> <col style="width: 25%;"> </colgroup> <thead> <tr> <th class="tableblock halign-left valign-top">Component</th> <th class="tableblock halign-left valign-top">Java (Runtime)</th> <th class="tableblock halign-left valign-top">Java (Building)</th> <th class="tableblock halign-left valign-top">Maven (Building)</th> </tr> </thead> <tbody> <tr> <td class="tableblock halign-left valign-top"><p class="tableblock">Debezium Server</p></td> <td class="tableblock halign-left valign-top"><p class="tableblock">Java 21+</p></td> <td class="tableblock halign-left valign-top"><p class="tableblock">Java 21+</p></td> <td class="tableblock halign-left valign-top"><p class="tableblock">3.9.8+</p></td> </tr> <tr> <td class="tableblock halign-left valign-top"><p class="tableblock">Debezium Operator</p></td> <td class="tableblock halign-left valign-top"><p class="tableblock">Java 21+</p></td> <td class="tableblock halign-left valign-top"><p class="tableblock">Java 21+</p></td> <td class="tableblock halign-left valign-top"><p class="tableblock">3.9.8+</p></td> </tr> <tr> <td class="tableblock halign-left valign-top"><p class="tableblock">Debezium Quarkus Outbox Extension</p></td> <td class="tableblock halign-left valign-top"><p class="tableblock">Java 21+</p></td> <td class="tableblock halign-left valign-top"><p class="tableblock">Java 21+</p></td> <td class="tableblock halign-left valign-top"><p class="tableblock">3.9.8+</p></td> </tr> <tr> <td class="tableblock halign-left valign-top"><p class="tableblock">Debezium Connectors<br> <em>Embedded Engine or Kafka Connect</em></p></td> <td class="tableblock halign-left valign-top"><p class="tableblock">Java 17+</p></td> <td class="tableblock halign-left valign-top"><p class="tableblock">Java 21+</p></td> <td class="tableblock halign-left valign-top"><p class="tableblock">3.9.8+</p></td> </tr> </tbody> </table> </div> </div> </div> <div class="sect1"> <h2 id="new-features-and-improvements">New features and improvements</h2> <div class="sectionbody"> <div class="paragraph"> <p>The upgrade to Debezium <strong>3.0.0.Alpha1</strong> introduces several new features and improvements in several components:</p> </div> <div class="sect2"> <h3 id="new-features-mongodb">MongoDB</h3> <div class="sect3"> <h4 id="mongodb_sink_connector">MongoDB Sink Connector</h4> <div class="paragraph"> <p>Debezium introduced its first sink-based connector in Debezium 2.2, just over a year ago and we&#8217;re pleased to announce the inclusion of another sink-based connector for MongoDB as a part of Debezium 3.</p> </div> <div class="paragraph"> <p>Unlike the JDBC sink relational connector that requires an additional plug-in to be installed to use it, the MongoDB sink connector is bundled alongside the MongoDB source connector in the same artifact. So if you have already installed or use the MongoDB source connector and are using Debezium 3 or later, you also have the MongoDB sink connector.</p> </div> <div class="paragraph"> <p>The configuration to get started with the MongoDB is quite straightforward, here&#8217;s an example:</p> </div> <div class="listingblock"> <div class="content"> <pre class="CodeRay highlight"><code data-lang="json">{
  <span class="key"><span class="delimiter">&quot;</span><span class="content">connector.class</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">io.debezium.connector.mongodb.MongoDbSinkConnector</span><span class="delimiter">&quot;</span></span>,
  <span class="key"><span class="delimiter">&quot;</span><span class="content">connection.string</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">...</span><span class="delimiter">&quot;</span></span>,
  <span class="key"><span class="delimiter">&quot;</span><span class="content">topics</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">topic1,topic2</span><span class="delimiter">&quot;</span></span>,
  <span class="key"><span class="delimiter">&quot;</span><span class="content">sink.database</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">targetdb</span><span class="delimiter">&quot;</span></span>,
}</code></pre> </div> </div> <div class="paragraph"> <p>The <code>connection.string</code> and <code>sink.database</code> configuration properties are mandatory. These define the details for connecting to the target MongoDB database and the name of the target database where the changes will be written.</p> </div> <div class="paragraph"> <p>Additionally, the <code>topics</code> configuration property is mandatory by Kafka Connect, and it describes a comma-separated list of regular expressions for the topics that the sink connector will observe.</p> </div> <div class="admonitionblock note"> <table> <tr> <td class="icon"> <i class="fa icon-note" title="Note"></i> </td> <td class="content"> <div class="paragraph"> <p>Documentation for this connector is still a work-in-progress, so if you have any questions or problems, don&#8217;t hesitate to reach out to the team on our Zulip chat or Mailing List.</p> </div> </td> </tr> </table> </div> </div> </div> </div> </div> <div class="sect1"> <h2 id="other-changes">Other changes</h2> <div class="sectionbody"> <div class="ulist"> <ul> <li> <p>Debezium postgres jdbc sink not handling infinity values <a href="https://issues.redhat.com/browse/DBZ-7920">DBZ-7920</a></p> </li> <li> <p>JdbcSinkTask doesn&#8217;t clear offsets on stop <a href="https://issues.redhat.com/browse/DBZ-7946">DBZ-7946</a></p> </li> <li> <p>ibmi as400 connector config isn&#8217;t prefixed with "database." <a href="https://issues.redhat.com/browse/DBZ-7955">DBZ-7955</a></p> </li> <li> <p>Duplicate downstream annotation comments incorrectly refer to Db2 connector <a href="https://issues.redhat.com/browse/DBZ-7968">DBZ-7968</a></p> </li> <li> <p>Issue with Hybrid mode and DDL change <a href="https://issues.redhat.com/browse/DBZ-7991">DBZ-7991</a></p> </li> <li> <p>Extends process of finding Bundle path <a href="https://issues.redhat.com/browse/DBZ-7992">DBZ-7992</a></p> </li> <li> <p>Incorrect offset/history property mapping generatated <a href="https://issues.redhat.com/browse/DBZ-8007">DBZ-8007</a></p> </li> <li> <p>Debezium Server Operator on minikube with java.lang.NullPointerException': java.lang.NullPointerException <a href="https://issues.redhat.com/browse/DBZ-8019">DBZ-8019</a></p> </li> <li> <p>ORA-65090: operation only allowed in a container database when connecting to a non-CDB database <a href="https://issues.redhat.com/browse/DBZ-8023">DBZ-8023</a></p> </li> <li> <p>Added type to Prometheus JMX exporter <a href="https://issues.redhat.com/browse/DBZ-8036">DBZ-8036</a></p> </li> <li> <p>Add <code>kafka.producer</code> metrics to debezium-server jmx exporter config <a href="https://issues.redhat.com/browse/DBZ-8037">DBZ-8037</a></p> </li> <li> <p>Support FLOAT32 type in debezium-connector-spanner <a href="https://issues.redhat.com/browse/DBZ-8043">DBZ-8043</a></p> </li> </ul> </div> <div class="paragraph"> <p>In total, <a href="https://issues.redhat.com/issues/?jql=project%20%3D%20DBZ%20and%20fixVersion%20%20in%20(3.0.0.Alpha1)">20 issues</a> were resolved in Debezium 3.0.0.Alpha1. The list of changes can also be found in our <a href="https://debezium.io/releases/3.0">release notes</a>.</p> </div> <div class="paragraph"> <p>A big thank you to all the contributors from the community who worked diligently on this release: <a href="https://github.com/andreas-ibm">Andreas Martens</a>, <a href="https://github.com/arawind">Aravind</a>, <a href="https://github.com/Naros">Chris Cranford</a>, <a href="https://github.com/jcechace">Jakub Cechacek</a>, <a href="https://github.com/jpechane">Jiri Pechanec</a>, <a href="https://github.com/mfvitale">Mario Fiore Vitale</a>, <a href="https://github.com/obabec">Ondrej Babec</a>, <a href="https://github.com/rk3rn3r">René Kerner</a>, <a href="https://github.com/missingcharacter">Ricardo Rosales</a>, <a href="https://github.com/roldanbob">Robert Roldan</a>, <a href="https://github.com/ryanvanhuuksloot">Ryan van Huuksloot</a>, and <a href="https://github.com/ShuranZhang">Shuran Zhang</a>!</p> </div> </div> </div> <div class="sect1"> <h2 id="whats-next">What&#8217;s next &amp; Outlook</h2> <div class="sectionbody"> <div class="paragraph"> <p>With Debezium 2.7.0.Final released, we&#8217;re actively looking at the reports from the community and addressing any critical bugs or regressions that were not identified throughout development. If you believe you&#8217;ve spotted a bug or regression, please log a <a href="https://issues.redhat.com/projects/DBZ">Jira issue</a> so that these can be tracked and addressed. Of course, contributions for these are much appreciated, if you have the bandwidth.</p> </div> <div class="paragraph"> <p>While this pre-release is smaller than we generally prefer, it&#8217;s focus was primarily on the inclusion of the MongoDB sink connector and the move to Java 17/21. There are still many features in the pipeline that will be coming in a future build of Debezium, including but not limited to:</p> </div> <div class="ulist"> <ul> <li> <p>Kafka 3.1+ as baseline</p> </li> <li> <p>New off-heap Oracle cache implementations based on EhCache &amp; Hazelcast</p> </li> <li> <p>Exactly-once semantics support for other relational connectors</p> </li> <li> <p>and more</p> </li> </ul> </div> <div class="paragraph"> <p>This list represents a quick glance view at just what&#8217;s at the top of our queue, and is subject to change. If you&#8217;d like to get involved in the conversation about Debezium 3.0 and the next evolution of the project, contact us on the <a href="https://groups.google.com/g/debezium">mailing list</a> or <a href="https://debezium.zulipchat.com/login/#narrow/stream/302529-users">Zulip chat</a>. As always, please review our <a href="https://debezium.io/roadmap">road map</a> for more details.</p> </div> <div class="paragraph"> <p>For now, that&#8217;s it from our side, enjoy the summer and be safe! Until next time&#8230;&#8203;</p> </div> </div> </div>]]></content><author><name>Chris Cranford</name></author><category term="releases"/><category term="mongodb"/><category term="mysql"/><category term="mariadb"/><category term="postgres"/><category term="sqlserver"/><category term="cassandra"/><category term="oracle"/><category term="db2"/><category term="vitess"/><category term="outbox"/><category term="spanner"/><category term="jdbc"/><category term="informix"/><category term="ibmi"/><summary type="html"><![CDATA[We are happy to announce the first pre-release of Debezium 3, 3.0.0.Alpha1. This release, albeit smaller than our normal pre-releases, is highly focused on a few key points, such as testing the release process with Java 17/21; however, it also includes several new features. Let&#8217;s take a moment and talk about the upcoming breaking changes in-depth and the new features you will find.]]></summary></entry><entry><title type="html">Debezium asynchronous engine</title><link href="https://debezium.io/blog/2024/07/08/async-embedded-engine/" rel="alternate" type="text/html" title="Debezium asynchronous engine"/><published>2024-07-08T00:00:00+00:00</published><updated>2024-07-08T00:00:00+00:00</updated><id>https://debezium.io/blog/2024/07/08/async-embedded-engine</id><content type="html" xml:base="https://debezium.io/blog/2024/07/08/async-embedded-engine/"><![CDATA[<div class="paragraph"> <p>Debezium provides a way to run the connectors directly within Debezium from the very beginning of the project. The way how it was provided has changed over the time and it still evolves. This article will describe another evolution step in this regard - new implementation of Debezium engine.</p> </div> <div class="paragraph"> <p></p> </div> <div class="sect1"> <h2 id="a_bit_of_history">A bit of history</h2> <div class="sectionbody"> <div class="paragraph"> <p>The capability to run the connector directly within Debezium was not present from the first Debezium commit, but was <a href="https://github.com/debezium/debezium/commit/2da5b37f767393847f2ee25a1465e501b5633473">added</a> really very early in the Debezium development as part of <a href="https://issues.redhat.com/browse/DBZ-1">DBZ-1</a>. This <code>EmbeddedEngine</code> was used mostly for testing. However, over the time it has evolved into a full-fledged runtime platform for the connectors, with the support for storing offsets, schema history etc. Later on, a public API for <code>DebeziumEngine</code> was defined ( <a href="https://issues.redhat.com/browse/DBZ-234">DBZ-234</a>). The interface decoupled the user-facing API from the implementation and provided the ability to replace the implementation by a different one. Shortly after introducing the Debezium engine API, a new Debezium server was created as part of <a href="https://issues.redhat.com/browse/DBZ-651">DBZ-651</a>. While <code>EmbeddedEngine</code> had to be wrapped into another application which would consume the records, the Debezium server provided a way to run Debezium outside the Kafka Connect cluster without such a wrapper. The Debezium server provided several sinks, so the users could use the server out-of-the-box without any further coding, but the Debezium server is still powered by the Debezium engine. As the popularity of the Debezium server increased, more and more sinks were added. This resulted in the separating Debezium server into <a href="https://github.com/debezium/debezium-server/">separate GitHub project</a>. The separation of the Debezium server repository happened relatively recently (<a href="https://issues.redhat.com/browse/DBZ-6049">DBZ-6049</a>). The latest addition to the Debezium server evolution was implementation of <a href="https://github.com/debezium/debezium-operator">Debezium operator</a>. It allows seamless deployment and management of the Debezium server on the Kubernetes clusters. You can check <a href="https://debezium.io/blog/2023/10/19/Debezium-Operator-Takes-off-to-the-Clouds/">this blog post</a> for more details.</p> </div> <div class="paragraph"> <p>To sum-up, currently, if the user wants to run Debezium connectors outside the Kafka Connect cluster, there are three options. Users can embed the Debezium engine directly into their application or users can use a standalone Debezium server or, when run on the Kubernetes cluster, users can deploy the Debezium server via Debezium operator. However, no matter which deployment method the users use, all the hard work is done by <code>DebeziumEngine</code> implementation after all.</p> </div> </div> </div> <div class="sect1"> <h2 id="embeddedengine_limitations"><code>EmbeddedEngine</code> limitations</h2> <div class="sectionbody"> <div class="paragraph"> <p>As described in the previous section, if you decide to run Debezium outside the Kafka Connect cluster, the most important part (in terms of performance, sustainability etc.) is <code>DebeziumEngine</code> implementation. Up until recently, the only available implementation of <code>DebeziumEngine</code> was <a href="https://github.com/debezium/debezium/blob/2.7/debezium-embedded/src/main/java/io/debezium/embedded/EmbeddedEngine.java#L86"><code>EmbeddedEngine</code></a>. As also mentioned, <code>EmbeddedEngine</code> was originally implemented as a testing framework to make testing of the connectors easy, without the need to start the whole Kafka cluster. As such, <code>EmbeddedEngine</code> was not designed for the best performance or even production use. During the time, various improvements were done, but some original designs and code structure remained more or less the same.</p> </div> <div class="paragraph"> <p>The main limitation of the <code>EmbeddedEngine</code> is that it can run only one task. Therefore, if you have a connector which supports execution of multiple tasks (SQL server connector), you cannot use multiple tasks in <code>EmbeddedEngine</code> and still have to run everything in one task. Moreover, all the records are processed in a single thread. This means that the chain of single message transforms (SMTs), serialization as well as processing by the user handler is happening in a synchronous manner, as depicted on the figure below.</p> </div> <div class="imageblock centered-image"> <img src="/assets/images/2024-07-08-async-embedded-engine/synchronous_processing.png" class="responsive-image" alt="Synchronous record processing in EmbeddedEngine"> </div> <div class="paragraph"> <p>Once the whole pipeline is finished for the one record in the batch, only after that another record is processed. This mimics the behavior of Kafka Connect, which also does the source record processing in a serial manner.</p> </div> <div class="paragraph"> <p>From our performance tests as well as from the users reports on the Zulip chat, it seems that especially serialization is often a performance bottleneck. Naturally, one can immediately suggest running at least parts of the workloads, like serialization, in parallel. This would however require substantial changes in <code>EmbeddedEngine</code>. Current code structure of <code>EmbeddedEngine</code> was also far from perfect. Doing any changes e.g. in the retry mechanism was quite challenging and error prone. This led us to a decision to implement the <code>DebeziumEngine</code> API from scratch and create a new implementation of Debezium engine. Besides starting on a green field, it also gave us the comfort of testing the new engine only with a smaller part of the test suite and switching to new engine implementation gradually, always having an option to switch back to <code>EmbeddedEngine</code> as a backup. As a result <a href="https://github.com/debezium/debezium/blob/2.7/debezium-embedded/src/main/java/io/debezium/embedded/async/AsyncEmbeddedEngine.java#L89"><code>AsyncEmbeddedEngine</code></a> was created.</p> </div> </div> </div> <div class="sect1"> <h2 id="asynchronous_embedded_engine">Asynchronous embedded engine</h2> <div class="sectionbody"> <div class="paragraph"> <p><a href="https://github.com/debezium/debezium/blob/2.7/debezium-embedded/src/main/java/io/debezium/embedded/async/AsyncEmbeddedEngine.java#L89"><code>AsyncEmbeddedEngine</code></a> is a new implementation of the <code>DebeziumEngine</code> interface. It addresses the main shortcomings of <code>EmbeddedEngine</code> as outlined in the previous section. Asynchronous engine allows connectors to execute multiple tasks. Most importantly, as the name suggests, aims to run record processing in parallel.</p> </div> <div class="sect2"> <h3 id="architecture">Architecture</h3> <div class="paragraph"> <p>From the high-level perspective there are two thread pools, a smaller one for managing tasks and bigger one for processing records. The size of the task thread pool corresponds to the number of configured tasks - each task has its own dedicated thread. The size of the record processing thread pool is also configurable, however, threads from this thread pool are shared across all the running tasks.</p> </div> <div class="paragraph"> <p>Records in an asynchronous engine are processed in parallel. To which extent the processing is parallelized depends on configuration. <code>DebeziumEngine</code> API offers two possibilities how to consume the changes: either via <a href="https://github.com/debezium/debezium/blob/2.7/debezium-api/src/main/java/io/debezium/engine/DebeziumEngine.java#L159"><code>ChangeConsumer</code></a> or via <a href="https://github.com/debezium/debezium/blob/2.7/debezium-api/src/main/java/io/debezium/engine/DebeziumEngine.java#L191"><code>java.util.function.Consumer</code></a> function. In the first case <code>ChangeConsumer</code> expects the whole batch of records as we can run in parallel only SMT chain and serialization. Once all the records in the batch are processed, the whole batch is passed to the user-defined <code>ChangeConsumer</code>.</p> </div> <div class="imageblock centered-image"> <img src="/assets/images/2024-07-08-async-embedded-engine/parallel_processing_batch.png" class="responsive-image" alt="Parallel processing of the whole batch"> </div> <div class="paragraph"> <p>In the later case, when user provides only consumer function which processes just one record, we can run in parallel the whole record processing pipeline:</p> </div> <div class="imageblock centered-image"> <img src="/assets/images/2024-07-08-async-embedded-engine/parallel_processing_async.png" class="responsive-image" alt="Asynchronous parallel processing"> </div> <div class="paragraph"> <p>Pipelines can be processed in the same order as the original batch of the source records provided by the connector task or they can be processed completely asynchronously. Asynchronous processing of the whole pipeline means that the records could be sent to the sink in a different order than the changes were done in the source database. However, in some cases the order doesn&#8217;t matter (e.g. bulk inserts of distinct data) and what matters is speed of processing. Such use cases should be addressed by this setup.</p> </div> <div class="paragraph"> <p>This was a very high level overview of the asynchronous engine, which is required to fully understand configuration options described in the next section. If you are interested in more details, please see <a href="https://github.com/debezium/debezium-design-documents/blob/main/DDD-7.md">Design document for asynchronous engine</a>. And of course the most precise and up-to-date source of information is <a href="https://github.com/debezium/debezium/tree/main/debezium-embedded/src/main/java/io/debezium/embedded/async">the source code</a>.</p> </div> </div> <div class="sect2"> <h3 id="usage">Usage</h3> <div class="paragraph"> <p>As <code>AsyncEmbeddedEngine</code> implements the same interface as <code>EmbeddedEngine</code>, the usage is also the same:</p> </div> <div class="listingblock"> <div class="content"> <pre class="CodeRay highlight"><code data-lang="java">DebeziumEngine&lt;<span class="predefined-type">ChangeEvent</span>&lt;<span class="predefined-type">String</span>, <span class="predefined-type">String</span>&gt;&gt; engine = DebeziumEngine
            .create(KeyValueHeaderChangeEventFormat.of(Json.class, Json.class, Json.class), <span class="string"><span class="delimiter">&quot;</span><span class="content">io.debezium.embedded.async.ConvertingAsyncEngineBuilderFactory</span><span class="delimiter">&quot;</span></span>)
            .using(props)
            .notifying(record -&gt; {
                <span class="predefined-type">System</span>.out.println(<span class="string"><span class="delimiter">&quot;</span><span class="content">Key = '</span><span class="delimiter">&quot;</span></span> + record.key() + <span class="string"><span class="delimiter">&quot;</span><span class="content">' value = '</span><span class="delimiter">&quot;</span></span> + record.value() + <span class="string"><span class="delimiter">&quot;</span><span class="content">'</span><span class="delimiter">&quot;</span></span>);
            }).build();

<span class="predefined-type">ExecutorService</span> executor = <span class="predefined-type">Executors</span>.newSingleThreadExecutor();
executor.execute(engine);</code></pre> </div> </div> <div class="paragraph"> <p>If you want to use <code>AsyncEmbeddedEngine</code>, for now you have to use <code>create(KeyValueHeaderChangeEventFormat&lt;K, V, H&gt; format, String builderFactory)</code> method with <code>io.debezium.embedded.async.ConvertingAsyncEngineBuilderFactory</code> as the builder factory. Other shortcut builder methods still point to <code>EmbeddedEngine</code>.</p> </div> <div class="paragraph"> <p>Once you are done and want to terminate the engine, you call <code>engine.close()</code> as in the case of <code>EmbeddedEngine</code>. The main difference here is that once the <code>AsyncEmbeddedEngine</code> is closed, it cannot be started again and has to be re-created. The reason for this is to prevent possible resource leaks when the engine is being stopped and started from different threads in parallel (you can find more details in the design document and <a href="https://issues.redhat.com/browse/DBZ-2534">DBZ-2534</a>).</p> </div> </div> <div class="sect2"> <h3 id="configuration_options">Configuration options</h3> <div class="paragraph"> <p>Compared to <code>EmbeddedEngine</code>, <code>AsyncEmbeddedEngine</code> provides only a few additional configuration options, mostly related to thread management:</p> </div> <div class="ulist"> <ul> <li> <p><code>record.processing.threads</code> - The size of the thread pool for record processing.</p> </li> <li> <p><code>record.processing.order</code> - Determines how the records should be produced, either <code>ORDERED</code> or <code>UNORDERED</code>.</p> </li> <li> <p><code>record.processing.with.serial.consumer</code> - Specifies whether the default <code>ChangeConsumer</code> should be created from the provided <code>Consumer</code>.</p> </li> <li> <p><code>record.processing.shutdown.timeout.ms</code> - Maximum time in milliseconds to wait for processing submitted records after a task shutdown is called.</p> </li> <li> <p><code>task.management.timeout.ms</code> - Time limit engine waits for a task’s lifecycle management operations (starting and stopping) to complete.</p> </li> </ul> </div> <div class="paragraph"> <p><code>record.processing.threads</code> is quite clear, it&#8217;s the size of the shared thread pool used for processing records. You can use the <code>AVAILABLE_CORES</code> placeholder to use all available cores on the given machine.</p> </div> <div class="paragraph"> <p><code>record.processing.order</code> - as described above, the records can be processed in the same order as the changes happened in the database or in a completely asynchronous manner which results in out-of-order delivery of the records to the sink. Which method is used is determined by this option. Please note that this option has any effect only in the case when user handler is provided as a <code>Consumer</code> function. As explained in the previous section, <code>ChangeConsumer</code> expects the whole batch of records and therefore the Debezium engine cannot ensure processing of individual records in parallel and setting it to <code>UNORDERED</code> processing has no sense in this case.</p> </div> <div class="paragraph"> <p><code>record.processing.with.serial.consumer</code> determines, if the default <code>ChangeConsumer</code> should be created from user provided <code>Consumer</code> function. This is basically an option for backward compatibility with the <code>EmbeddedEngine</code>. In case of <code>EmbeddedEngine</code> is always used <code>ChangeConsumer</code> and if the user provides the <code>Consumer</code> function interested, <code>EmbeddedEngine</code> creates default <code>ChangeConsumer</code>. When you enable this option, <code>AsyncEmbeddedEngine</code> does the same and creates the same <code>ChangeConsumer</code> as <code>EmbeddedEngine</code>, so you can get completely the same behavior as in case of <code>EmbeddedEngine</code>.</p> </div> <div class="paragraph"> <p><code>record.processing.shutdown.timeout.ms</code> specifies for how long the engine should wait for processing of submitted records. Once shutdown is called, no other records are submitted for processing, but you may want to wait for records already being processed. As processing of the records in general should be fast, this can be some smaller value (from dozen milliseconds to units of seconds).</p> </div> <div class="paragraph"> <p><code>task.management.timeout.ms</code> determines the timeout for the task to start or stop. If the timeout is exceeded, the thread running the task is forcefully killed. When this timeout is exceeded during the startup and task is killed, all other tasks are killed as well. Either all the tasks have to start or none of them. Compared to <code>record.processing.shutdown.timeout.ms</code>, starting of the tasks can be quite time consuming (creating connections to the database etc.), so in this case the timeout should be substantially higher than timeout for record processing (possibly in terms of minutes).</p> </div> </div> <div class="sect2"> <h3 id="debezium_server_usage">Debezium server usage</h3> <div class="paragraph"> <p>Starting Debezium 2.6.0.Alpha2, Debezium server was <a href="https://github.com/debezium/debezium-server/commit/aa58bc511596ac09f63d77c77fd5c8900afaed48">switched</a> to use <code>AsyncEmbeddedEngine</code>. Thus, if you use Debezium server 2.6.0.Alpha2 or later, you already use the asynchronous engine. As the Debezium engine currently uses only <code>ChangeConsumer</code> for processing CDC records, all constraints related to usage of <code>ChangeConsumer</code> mentioned above (impossibility to process records out of order) applies to the Debezium server as well. This can change in the future, but at the moment we don&#8217;t see any demand for it.</p> </div> </div> </div> </div> <div class="sect1"> <h2 id="deprecation_of_embeddedengine">Deprecation of <code>EmbeddedEngine</code></h2> <div class="sectionbody"> <div class="paragraph"> <p>As of Debezium 2.7.0.Final, <code>EmbeddedEngine</code> was deprecated (<a href="https://issues.redhat.com/browse/DBZ-7976">DBZ-7976</a>). We will keep it for about next 6 months. During this time we are going to migrate rest of our test suite to asynchronous engine (<a href="https://issues.redhat.com/browse/DBZ-7977">DBZ-7977</a>) and then remove <code>EmbeddedEngine</code> in Debezium 3.1.0.Final (<a href="https://issues.redhat.com/browse/DBZ-8029">DBZ-8029</a>). If you use the <code>DebeziumEngine</code> API, the migration should be very straightforward. The only thing you need to do if you use the converting wrapper is to switch from <code>ConvertingEngineBuilderFactory</code> to <code>ConvertingAsyncEngineBuilderFactory</code>, as described in the previous chapter. However, we would strongly recommend switching to the asynchronous engine sooner rather than later and eventually let us know if you spot any issue, so that we have sufficient time to fix any such issue before final removal of <code>EmbeddedEngine</code>.</p> </div> </div> </div> <div class="sect1"> <h2 id="future_steps_and_outlook">Future steps and outlook</h2> <div class="sectionbody"> <div class="paragraph"> <p>Besides the aforementioned removal of <code>EmbeddedEngine</code>, are we done with the changes or do we plan any further changes? Sure we plan to continue with the improvements! So what can you look for?</p> </div> <div class="paragraph"> <p>With Debezium 3.0 we will switch to Java 21 for building Debezium and in the future releases Java 21 will become Debezium base line. With this, we would like to switch to Java <a href="https://docs.oracle.com/en/java/javase/21/core/virtual-threads.html">virtual threads</a>. This may bring even more speedup and eventually also simplify the code a little bit. We will evaluate this option based on the results of our internal performance tests.</p> </div> <div class="paragraph"> <p>Speaking about performance tests, one may ask why at least some performance comparison is not mentioned in this blog post. We of course did some performance tests, we do have a some <a href="https://github.com/debezium/debezium/tree/main/debezium-microbenchmark-engine/src/main/java/io/debezium/performance/engine">JMH benchmarks</a> (PRs with improvements are welcome!) and also did some end-to-end performance tests. You can find some JMH results e.g. under <a href="https://github.com/debezium/debezium/pull/5494">this pull request</a>, which also compares the results with <code>EmbeddedEngine</code>. On the other hand, we are fully aware of complexity and trickiness of performance testing and we believe having some solid results requires still some more work. It would deserve its own blog post anyway. After all, even with very solid performance results, the reality of your deployment may still be different, so what really matters is your performance tests, done on your hardware, your production network setup etc. If you do so, we would be more than happy to hear the results.</p> </div> <div class="paragraph"> <p>As for other things, we may add more implementations of <a href="https://github.com/debezium/debezium/blob/main/debezium-embedded/src/main/java/io/debezium/embedded/async/RecordProcessor.java">RecordProcessor</a>s, e.g. one suggested by <a href="https://github.com/jeremy-l-ford">Jeremy Ford</a> in <a href="https://github.com/debezium/debezium-design-documents/pull/8#issuecomment-1859321629">the discussion</a> under the asynchronous engine DDD.</p> </div> <div class="paragraph"> <p>In the longer term, we would like to add support for gRPC and Protocol Buffers. It should give us a two-fold advantage: Debezium engine should be able to coordinate execution of multiple tasks across different machines and also would be able to receive CDC records from them in the unified format. Ability to run multiple tasks (for connectors which allow it) on separate machines/containers is crucial especially in environments like Kubernetes, where you ideally want to run each task in a separate container. Defining Protocol Buffers format would allow Debezium to work with all kinds of connectors, written even in different languages and running on a large variety of devices, even on the edge, allowing the Debezium engine to become the heart of any CDC solution.</p> </div> <div class="paragraph"> <p>These are plans for which you can look forward to in the short and long term future. What we are looking for in the near future is your feedback on the new asynchronous engine. If you have any, please share it via common means on either Debezium <a href="https://debezium.zulipchat.com/">Zulip chat</a> or <a href="https://groups.google.com/forum/#!forum/debezium">mailing list</a>.</p> </div> </div> </div>]]></content><author><name>Vojtěch Juránek</name></author><category term="machine-learning"/><category term="flink"/><category term="spark"/><category term="online-learning"/><category term="examples"/><category term="apache-kafka"/><summary type="html"><![CDATA[Debezium provides a way to run the connectors directly within Debezium from the very beginning of the project. The way how it was provided has changed over the time and it still evolves. This article will describe another evolution step in this regard - new implementation of Debezium engine.]]></summary></entry><entry><title type="html">Debezium 2.7.0.Final Released</title><link href="https://debezium.io/blog/2024/07/01/debezium-2-7-final-released/" rel="alternate" type="text/html" title="Debezium 2.7.0.Final Released"/><published>2024-07-01T00:00:00+00:00</published><updated>2024-07-01T00:00:00+00:00</updated><id>https://debezium.io/blog/2024/07/01/debezium-2-7-final-released</id><content type="html" xml:base="https://debezium.io/blog/2024/07/01/debezium-2-7-final-released/"><![CDATA[<div class="paragraph"> <p>As the team leaps into Q3, we&#8217;re happy to announce the fruits of our Q2 work, Debezium <strong>2.7.0.Final</strong> is now generally available. This release includes changes for <a href="https://issues.redhat.com/issues/?jql=project%20%3D%20DBZ%20and%20fixVersion%20%20in%20(2.7.0.Alpha1%2C%202.7.0.Alpha2%2C%202.7.0.Beta1%2C%202.7.0.CR1%2C%202.7.0.Final)">140 issues</a> with contributions from over <strong>51</strong> contributors. Let&#8217;s take a moment and review all the changes.</p> </div> <div class="paragraph"> <p></p> </div> <div class="sect1"> <h2 id="breaking-changes">Breaking changes</h2> <div class="sectionbody"> <div class="paragraph"> <p>The upgrade to Debezium <strong>2.7.0.Final</strong> includes a total of <strong>5</strong> unique breaking changes:</p> </div> <div class="dlist"> <dl> <dt class="hdlist1">Core</dt> <dd> <div class="ulist"> <ul> <li> <p>Debezium snapshot artifacts were originally deployed to <code>oss.sontatype.org</code>, the now legacy Sonatype infrastructure. This has changed and artifact snapshots are now found at <code>s01.oss.sonatype.org</code>, the new Sonatype infrastructure (<a href="https://issues.redhat.com/browse/DBZ-7641">DBZ-7641</a>).</p> </li> <li> <p>Under certain circumstances, JDBC queries were observed in a persistent hung state, such as database communication errors. A configurable timeout property called <code>query.timeout.ms</code> was introduced as a way to mitigate the problem for users who experienced this issue. This option defaults to <code>600000</code> milliseconds (600 seconds), but can be changed to a value of <code>0</code> to disable timeout handling (<a href="https://issues.redhat.com/browse/DBZ-7616">DBZ-7616</a>).</p> </li> </ul> </div> </dd> <dt class="hdlist1">Oracle</dt> <dd> <div class="ulist"> <ul> <li> <p>Tables that use <code>NUMERIC</code> data types with zero scale were ignored by the <code>decimal.handling.mode</code> when set to <code>double</code> or <code>string</code>. This has been fixed and such columns will now be correctly emitted according to the configured decimal handling mode. This can cause issues with upgrades for deployments using strict schema registry compatibility rules (<a href="https://issues.redhat.com/browse/DBZ-7882">DBZ-7882</a>).</p> </li> </ul> </div> </dd> <dt class="hdlist1">PostgreSQL</dt> <dd> <div class="ulist"> <ul> <li> <p>PostgreSQL 10 and 11 have been in end-of-life (EoL) mode for some time now. Support for these versions are now considered best-effort, meaning we no longer explicitly test Debezium against these database versions. Any regressions will not be proactively fixed by the core team; however, community contributions will continue to be accepted for regressions (<a href="https://issues.redhat.com/browse/DBZ-7128">DBZ-7128</a>).</p> </li> </ul> </div> </dd> <dt class="hdlist1">SQL Server</dt> <dd> <div class="ulist"> <ul> <li> <p>In older versions of Debezium, the SQL Server connector would process all transactions available during a poll iteration. This could lead to memory concerns with large traffic. The <code>max.iteration.transactions</code> configuration property already exists to solve this corner case for users, but it defaulted to <code>0</code>, meaning that the connector would process all transactions by default. This configuration&#8217;s default value has changed and is now <code>500</code> to provide more seamless integration for the default configuration use cases (<a href="https://issues.redhat.com/browse/DBZ-7750">DBZ-7750</a>).</p> </li> </ul> </div> </dd> </dl> </div> </div> </div> <div class="sect1"> <h2 id="new-features-and-improvements">New features and improvements</h2> <div class="sectionbody"> <div class="paragraph"> <p>The upgrade to Debezium <strong>2.7.0.Final</strong> introduces many new features and improvements in several components:</p> </div> <table class="tableblock frame-all grid-all stretch"> <colgroup> <col style="width: 20%;"> <col style="width: 20%;"> <col style="width: 20%;"> <col style="width: 20%;"> <col style="width: 20%;"> </colgroup> <tbody> <tr> <td class="tableblock halign-center valign-top"><p class="tableblock"><a href="#new-features-core">Core</a><br> <a href="#new-features-db2">Db2</a><br> <a href="#new-features-jdbc">JDBC</a></p></td> <td class="tableblock halign-center valign-top"><p class="tableblock"><a href="#new-features-mariadb">MariaDB</a><br> <a href="#new-features-mongodb">MongoDB</a><br> <a href="#new-features-mysql">MySQL</a></p></td> <td class="tableblock halign-center valign-top"><p class="tableblock"><a href="#new-features-oracle">Oracle</a><br> <a href="#new-features-postgres">PostgreSQL</a><br> <a href="#new-features-sqlserver">SQL Server</a></p></td> <td class="tableblock halign-center valign-top"><p class="tableblock"><a href="#new-features-cassandra">Cassandra</a><br> <a href="#new-features-vitess">Vitess</a></p></td> <td class="tableblock halign-center valign-top"><p class="tableblock"><a href="#new-features-server">Debezium Server</a><br> <a href="#new-features-operator">Kubernetes Operator</a></p></td> </tr> </tbody> </table> <div class="sect2"> <h3 id="new-features-core">Core</h3> <div class="sect3"> <h4 id="transaction_metadata_encoded_ordering">Transaction metadata encoded ordering</h4> <div class="paragraph"> <p>In some pipelines, ordering is critical for consuming applications. There are certain scenarios that can impact this aspect of your data pipeline, such as when Kafka re-partition occur. This leads to problems that can be error-prone trying to reconstruct the ordering after-the-fact.</p> </div> <div class="paragraph"> <p>Now when Transaction Metadata is enabled, these metadata events will also encode their transaction order, so that in the event that a Kafka re-partition or other scenarios occur that alter the ordering semantics, consumers can simply use the new encoded ordering field instead for deterministic ordering of transactions (<a href="https://issues.redhat.com/browse/DBZ-7698">DBZ-7698</a>).</p> </div> </div> <div class="sect3"> <h4 id="blocking_incremental_snapshot_improvements">Blocking incremental snapshot improvements</h4> <div class="paragraph"> <p>There are some use cases where incremental snapshot signals require escaping certain characters in the fully-qualified table name. This caused some problems with blocking snapshots because the process to resolve what tables to snapshot used a slightly different mechanism. In Debezium 2.7, we&#8217;ve unified this approach, and you can now use escaped table names with blocking snapshots where applicable (<a href="https://issues.redhat.com/browse/DBZ-7718">DBZ-7718</a>).</p> </div> </div> <div class="sect3"> <h4 id="optional_delay_between_snapshot_streaming">Optional delay between snapshot &amp; streaming</h4> <div class="paragraph"> <p>Debezium 2.7 ships with a new global configuration option, <code>streaming.delay.ms</code>. This new option causes the connector to perform a delay before it starts the streaming phase (<a href="https://issues.redhat.com/browse/DBZ-7902">DBZ-7902</a>).</p> </div> <div class="paragraph"> <p>For some deployment use cases, you may want to guarantee that at least one offset flush interval has happened before the streaming phase begins. In such use cases, uses should guarantee that both properties, <code>streaming.delay.ms</code> and <code>offset.flush.interval.ms</code> are aligned.</p> </div> <div class="paragraph"> <p>By default, Debezium will not perform a delay and immediately transitions to the streaming phase to remain consistent with prior version behavior.</p> </div> </div> <div class="sect3"> <h4 id="truncating_array_fields">Truncating array fields</h4> <div class="paragraph"> <p>The <code>column.truncate.to.<em>length</em>.chars</code> configuration property is improved, supporting a combination of string and now, array field types (<a href="https://issues.redhat.com/browse/DBZ-7925">DBZ-7925</a>).</p> </div> </div> </div> <div class="sect2"> <h3 id="new-features-db2">Db2</h3> <div class="sect3"> <h4 id="support_db2_on_zos">Support Db2 on z/OS</h4> <div class="paragraph"> <p>Debezium 2.7 introduces incubating support for using the Db2 connector on the z/OS platform. For the Db2 connector to work with z/OS, several configuration options are required to toggle the connector to work with the z/OS platform database (<a href="https://issues.redhat.com/browse/DBZ-4812">DBZ-4812</a>).</p> </div> <div class="listingblock"> <div class="title">New connector properties</div> <div class="content"> <pre class="CodeRay highlight"><code data-lang="json">{
  <span class="error">.</span><span class="error">.</span><span class="error">.</span>,
  <span class="key"><span class="delimiter">&quot;</span><span class="content">db2.platform</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">ZOS</span><span class="delimiter">&quot;</span></span>,
  <span class="key"><span class="delimiter">&quot;</span><span class="content">cdc.control.schema</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">ASNCDC</span><span class="delimiter">&quot;</span></span>,
  <span class="key"><span class="delimiter">&quot;</span><span class="content">cdc.change.tables.schema</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">ASNCDC</span><span class="delimiter">&quot;</span></span>
}</code></pre> </div> </div> <div class="paragraph"> <p>The primary toggle to run in z/OS mode is done using the <code>db2.platform</code>, which defaults to <code>LUW</code> for running on Linux, Unix, and Windows. Setting this configuration option to <code>ZOS</code> enables z/OS.</p> </div> <div class="paragraph"> <p>In addition, we have also added the <code>cdc.control.schema</code> and <code>cdc.change.tables.schema</code> connector configuration properties. These were previously hardcoded as <code>ASNCDC</code>, and while this remains the default, if your installation uses different schemas, this is now possible.</p> </div> <div class="admonitionblock note"> <table> <tr> <td class="icon"> <i class="fa icon-note" title="Note"></i> </td> <td class="content"> <div class="paragraph"> <p>For existing Db2 connectors for Linux, Unix, and Windows, no configuration changes are required when upgrading. The <code>db2.platform</code> is only required for z/OS and the schema properties only if you put these objects in a different schema than <code>ASNCDC</code>.</p> </div> </td> </tr> </table> </div> </div> </div> <div class="sect2"> <h3 id="new-features-jdbc">JDBC</h3> <div class="sect3"> <h4 id="mariadb_dialect_support">MariaDB dialect support</h4> <div class="paragraph"> <p>While MariaDB and MySQL often share a lot of similar syntax, unfortunately there are corner cases where these two vary slightly that introduces incompatibilities. One such incompatibility was found with now the Debezium JDBC sink constructed <em>upsert</em> statements, which could not be executed when using a MariaDB target database.</p> </div> <div class="paragraph"> <p>Debezium 2.7 officially introduces MariaDB dialect support for the JDBC sink connector, enabling users to configure the JDBC sink to write changes from Kafka topics to a MariaDB target (<a href="https://issues.redhat.com/browse/DBZ-7874">DBZ-7874</a>). In general, no special configuration should be necessary as both Hibernate and Debezium should detect the target is MariaDB and use the correct dialects.</p> </div> <div class="admonitionblock note"> <table> <tr> <td class="icon"> <i class="fa icon-note" title="Note"></i> </td> <td class="content"> <div class="paragraph"> <p>If you find the dialect resolution does not resolve to MariaDB, you can enforce its use by setting the connector configuration <code>hibernate.dialect</code> with the fully qualified class name <code>org.hibernate.dialect.MariaDBDialect</code>.</p> </div> </td> </tr> </table> </div> </div> </div> <div class="sect2"> <h3 id="new-features-mariadb">MariaDB</h3> <div class="sect3"> <h4 id="new_mariadb_standalone_connector">New MariaDB standalone connector</h4> <div class="paragraph"> <p>Debezium 2.5 introduced official support for MariaDB as part of the existing MySQL connector. The next step in that evolution is here, with a new standalone connector implementation for MariaDB (<a href="https://issues.redhat.com/browse/DBZ-7693">DBZ-7693</a>).</p> </div> <div class="paragraph"> <p>There are few things worth noting here:</p> </div> <div class="ulist"> <ul> <li> <p>MariaDB and MySQL both have a common shared dependency on a new abstract connector called <code>debezium-connector-binlog</code>, which provides the common framework for both binlog-based connectors.</p> </li> <li> <p>Each standalone connector now specifically is tailored only to its target database, so MySQL users should use MySQL and MariaDB users should use MariaDB. As a result, the <code>connection.adapter</code> configuration option has been removed, and the <code>jdbc.protocol</code> configuration option is now only specific to certain MySQL use cases and not used by MariaDB.</p> </li> </ul> </div> <div class="paragraph"> <p>The documentation for this connector is still a work-in-progress and will be added in the future. For the moment, you can refer to the MySQL connector documentation for most things related to MariaDB.</p> </div> </div> <div class="sect3"> <h4 id="snapshot_row_count_estimates_can_be_disabled">Snapshot row count estimates can be disabled</h4> <div class="paragraph"> <p>In some circumstances, users may find that the query that generates the row count estimates for MySQL and MariaDB can have some performance impacts in some environments.</p> </div> <div class="paragraph"> <p>If you determine this query performs poorly, or the calculation is of no interest, it can be safely disabled by setting the log level for <code>io.debezium.connector.binlog.BinlogSnapshotChangeEventSource.RowEstimate</code> to <code>WARN</code> (<a href="https://issues.redhat.com/browse/DBZ-7640">DBZ-7640</a>).</p> </div> <div class="paragraph"> <p>If you are deploying on Kafka Connect, be sure to adjust the Kafka Connect log4j configuration. If you are deploying using Debezium Server, be sure to adjust the log configuration in <code>application.properties</code> based on the <a href="https://quarkus.io/guides/logging">Quarkus documentation</a>.</p> </div> </div> </div> <div class="sect2"> <h3 id="new-features-mongodb">MongoDB</h3> <div class="sect3"> <h4 id="support_predicate_conditions_for_mongodb_incremental_snapshots">Support predicate conditions for MongoDB incremental snapshots</h4> <div class="paragraph"> <p>The incremental snapshot process is an instrumental part in various recovery situations to collect whole or part of the data set from a source table or collection. Relational connectors have long supported the idea of supplying an <code>additional-conditions</code> value on the incremental snapshot signal to restrict the data set, providing for targeted resynchronization of specific rows of data.</p> </div> <div class="paragraph"> <p>We&#8217;re happy to announce that this is now possible with MongoDB (<a href="https://issues.redhat.com/browse/DBZ-7138">DBZ-7138</a>). Unlike relational databases, the <code>additional-conditions</code> should be supplied in JSON format. It will be applied to the specified collection using the <code>find</code> operation to obtain the subset list of documents that are to be incrementally snapshotted.</p> </div> </div> <div class="sect3"> <h4 id="extractnewdocumentstate_includes_document_id_for_mongodb_deletes">ExtractNewDocumentState includes document id for MongoDB deletes</h4> <div class="paragraph"> <p>In prior release of the MongoDB <code>ExtractNewDocumentState</code> single message transformation, a delete event did not provide the identifier as part of the payload. This reduced the meaningfulness of delete events as consumers were supplied with insufficient data to act on these events. This behavior has been improved, and the delete event now includes an <code>_id</code> attribute in the payload (<a href="https://issues.redhat.com/browse/DBZ-7695">DBZ-7695</a>).</p> </div> </div> <div class="sect3"> <h4 id="collection_scoped_change_streams">Collection-scoped change streams</h4> <div class="paragraph"> <p>In previous iterations of the Debezium MongoDB connector, change streams could be opened against the deployment and database scopes, which was not always ideal for restrictive permission environments. Debezium 2.7 introduces a new change stream mode where the connector can operate on a single collection scope, allowing for such granular permissive configurations (<a href="https://issues.redhat.com/browse/DBZ-7760">DBZ-7760</a>).</p> </div> <div class="paragraph"> <p>A new capture scope value has been added called <code>collection</code>, which can be set using <code>capture.scope</code>. This is useful if the connector is deployed to only capture changes for a single collection in MongoDB.</p> </div> <div class="paragraph"> <p>Please see the <a href="https://debezium.io/documentation/reference/2.7/connectors/mongodb.html#mongodb-property-capture-scope">documentation</a> about limitations of this new, incubating feature.</p> </div> </div> </div> <div class="sect2"> <h3 id="new-features-mysql">MySQL</h3> <div class="sect3"> <h4 id="snapshot_row_count_estimates_can_be_disabled_2">Snapshot row count estimates can be disabled</h4> <div class="paragraph"> <p>In some circumstances, users may find that the query that generates the row count estimates for MySQL and MariaDB can have some performance impacts in some environments.</p> </div> <div class="paragraph"> <p>If you determine this query performs poorly, or the calculation is of no interest, it can be safely disabled by setting the log level for <code>io.debezium.connector.binlog.BinlogSnapshotChangeEventSource.RowEstimate</code> to <code>WARN</code> (<a href="https://issues.redhat.com/browse/DBZ-7640">DBZ-7640</a>).</p> </div> <div class="paragraph"> <p>If you are deploying on Kafka Connect, be sure to adjust the Kafka Connect log4j configuration. If you are deploying using Debezium Server, be sure to adjust the log configuration in <code>application.properties</code> based on the <a href="https://quarkus.io/guides/logging">Quarkus documentation</a>.</p> </div> </div> </div> <div class="sect2"> <h3 id="new-features-oracle">Oracle</h3> <div class="sect3"> <h4 id="new_oracle_rawtostring_custom_converter">New Oracle "RawToString" custom converter</h4> <div class="paragraph"> <p>While Oracle recommends that users avoid using <code>RAW</code>-based columns, these columns are still widely used in standard Oracle tables for backward compatibility reasons. But there are also business use cases where it makes sense to continue to use <code>RAW</code> columns rather than other data types.</p> </div> <div class="paragraph"> <p>Debezium 2.7 introduces a new custom converter specifically for Oracle called <code>RawToStringConverter</code> (<a href="https://issues.redhat.com/browse/DBZ-7753">DBZ-7753</a>). This custom converter is designed to allow you to quickly convert the byte-array contents of the <code>RAW</code> column to a string-based field using a <code>STRING</code> schema type. This can be useful for situations where you use a <code>RAW</code> column to store character data that doesn&#8217;t require the collation overhead of <code>VARCHAR2</code>, but you still have the need for this field to be sent to consumers as string-based data.</p> </div> <div class="paragraph"> <p>To get started with this custom converter, please see the <a href="https://debezium.io/documentation/reference/2.7/connectors/oracle.html#_raw_to_string">documentation</a> for more details.</p> </div> </div> <div class="sect3"> <h4 id="improved_nls_character_set_support_for_oracle">Improved NLS character-set support for Oracle</h4> <div class="paragraph"> <p>When installing the Debezium 2.7 Oracle connector, you may notice a new dependency, <code>orai18n.jar</code>. This dependency is being automatically distributed to provide extended character-set support for certain dialects (<a href="https://issues.redhat.com/browse/DBZ-7761">DBZ-7761</a>).</p> </div> </div> <div class="sect3"> <h4 id="oracle_row_id_included_in_change_events">Oracle ROW_ID included in change events</h4> <div class="paragraph"> <p>While <code>ROW_ID</code> is not unique across all rows of a table for the table&#8217;s lifespan, it can be used in certain situations when the lifecycle of the table and rows are managed in a very strict way. At the community&#8217;s request, we&#8217;ve added a new <code>row_id</code> field to the Oracle connector&#8217;s change event source information block (<a href="https://issues.redhat.com/browse/DBZ-4332">DBZ-4332</a>). This new field will be populated with the <code>ROW_ID</code> value under the following conditions:</p> </div> <div class="ulist"> <ul> <li> <p>Only populated from streaming events for inserts, updates, and deletes.</p> </li> <li> <p>Snapshot evnets will not contain a <code>row_id</code> value.</p> </li> <li> <p>Only provided by the LogMiner and XStream streaming adapters, OpenLogReplicator is not supported.</p> </li> </ul> </div> <div class="paragraph"> <p>Any event that does not match the criteria will not include a <code>row_id</code> field as its marked as <em>optional</em>.</p> </div> </div> <div class="sect3"> <h4 id="oracle_flush_table_with_custom_schema_names">Oracle flush table with custom schema names</h4> <div class="paragraph"> <p>In prior versions of Debezium, the Oracle connector was strictly designed to create the LogMiner flush table in the default tablespace of the connector user account. This wasn&#8217;t always useful in situations where the user&#8217;s default tablespace may not be the ideal destination and the DBA would prefer that table to exist in a separate tablespace.</p> </div> <div class="paragraph"> <p>Previously, users would need to modify the user account or use a new user with the correct tablespace to have the table created in the right tablespace location. With Debezium 2.7, this is no longer required, and you can safely include the name of the target schema/tablespace in the configuration (<a href="https://issues.redhat.com/browse/DBZ-7819">DBZ-7819</a>).</p> </div> <div class="listingblock"> <div class="title">Example using a custom schema name</div> <div class="content"> <pre class="CodeRay highlight"><code>log.mining.flush.table.name=THE_OTHER_SCHEMA.LOG_MINING_FLUSH_TABLE</code></pre> </div> </div> <div class="paragraph"> <p>The schema name is optional and if not supplied, the connector continues to use the same legacy behavior of creating the flush table and checking for its existence in the user&#8217;s default tablespace.</p> </div> </div> <div class="sect3"> <h4 id="oracle_query_filter_with_large_numbers_of_tables">Oracle query filter with large numbers of tables</h4> <div class="paragraph"> <p>The Debezium Oracle connector can support thousands of tables in a single connector deployment with ease; however, you may have found you wanted to customize the query filter using the <code>IN</code> mode. This mode is used in situations where you may have a high volume of changes for other tables and you want to filter that dataset out at the database level before the changes are passed to Debezium for processing.</p> </div> <div class="paragraph"> <p>In earlier versions, users may have noticed that setting <code>log.mining.query.filter.mode</code> with a value of <code>in</code> and where your table include list contained more than 1000 elements generated a SQL error. Oracle does not permit more than 1000 elements within an in-clause; however, Debezium 2.7 addresses this limitation by using a disjunction between multiple buckets of 1000 item in-clause lists (<a href="https://issues.redhat.com/browse/DBZ-7847">DBZ-7847</a>).</p> </div> </div> </div> <div class="sect2"> <h3 id="new-features-postgres">PostgreSQL</h3> <div class="sect3"> <h4 id="postresql_arrays_with_the_jdbc_sink">PostreSQL Arrays with the JDBC sink</h4> <div class="paragraph"> <p>The JDBC sink connector supports the use of mapping source columns to Kafka ARRAY-based payload field types. With Debezium 2.7, you can now serialize ARRAY-based fields to a target PostgreSQL database, with no change in configuration. The new support should be completely transparent (<a href="https://issues.redhat.com/browse/DBZ-7752">DBZ-7752</a>).</p> </div> </div> <div class="sect3"> <h4 id="read_only_incremental_snapshots">Read-only incremental snapshots</h4> <div class="paragraph"> <p>An incremental snapshot is feature of Debezium to capture all or a subset of historical data from one or more tables in your source database using an ad-hoc signal to start the snapshot. This process normally requires writing to the signal database table to maintain open/close watermarks in the transaction log for deduplication with the change stream that overlaps with the incremental snapshot stream.</p> </div> <div class="paragraph"> <p>Debezium has supported read-only incremental snapshots with other database vendors such as MySQL and MariaDB; however, Debezium 2.7 introduces support for read-only incremental snapshots with PostgreSQL. If you would like information, please check out the <a href="https://github.com/debezium/debezium-design-documents/blob/main/DDD-8.md">design proposal</a>.</p> </div> <div class="paragraph"> <p>This process works by using the <code>pg_current_snapshot</code> function to obtain information about what transactions are currently active in the database, which is only available on PostgreSQL 13. This means that to utilize read-only incremental snapshots, you must be using PostgreSQL 13 or later.</p> </div> <div class="paragraph"> <p>In order to activate read-only incremental snapshots on PostgreSQL 13 or later, you simply need to add the <code>read.only</code> connector configuration property set to <code>true</code> in the connector configuration. The incremental snapshot implementation will choose to use the read-only implementation when this is set to <code>true</code>, similar to the same behavior for MySQL and MariaDB (<a href="https://issues.redhat.com/browse/DBZ-7917">DBZ-7917</a>).</p> </div> </div> </div> <div class="sect2"> <h3 id="new-features-sqlserver">SQL Server</h3> <div class="sect3"> <h4 id="heartbeat_action_query_now_supported">Heartbeat action query now supported</h4> <div class="paragraph"> <p>The <code>heartbeat.action.query</code> connector configuration property enables the connector to perform a write operation to the source database on an interval defined by <code>heartbeat.interval.ms</code>. The write operation is meant to produce a change event that is captured by the connector, and is sent to Kafka or the target system.</p> </div> <div class="paragraph"> <p>In an active database that is capturing changes regularly, you do not need to worry setting <code>heartbeat.action.query</code>, as the constant stream of changes is sufficient to keep the offsets synchronized with the read position in the transaction logs. However, if the connector is capturing changes from a source that has a higher volume of changes to non-captured tables than to captured tables, this can be useful to keep the read position in the offsets synchronized with the lower capture activity.</p> </div> <div class="paragraph"> <p>In Debezium 2.7, we&#8217;ve added support for this property for SQL Server (<a href="https://issues.redhat.com/browse/DBZ-7801">DBZ-7801</a>). For additional details, please see the SQL Server <a href="https://debezium.io/documentation/reference/2.7/connectors/sqlserver.html#sqlserver-property-heartbeat-action-query">documentation</a>.</p> </div> </div> </div> <div class="sect2"> <h3 id="new-features-cassandra">Cassandra</h3> <div class="sect3"> <h4 id="cassandra_performance_improvement">Cassandra performance improvement</h4> <div class="paragraph"> <p>The Cassandra connector also saw some changes in Debezium 2.7, specifically to performance optimizations. The implementation of the <code>KafkaRecordEmitter</code> relied on a thread-synchronization block that reduced the throughput. In addition, the implementation also performed some unnecessary flushing which also impacted performance. This code has been rewritten to improve both throughput and reduce the unnecessary flush calls (<a href="https://issues.redhat.com/browse/DBZ-7722">DBZ-7722</a>).</p> </div> </div> </div> <div class="sect2"> <h3 id="new-features-vitess">Vitess</h3> <div class="sect3"> <h4 id="improved_temporal_support_in_vitess">Improved temporal support in Vitess</h4> <div class="paragraph"> <p>Debezium relational connectors rely on a configuration option, <code>time.precision.mode</code>, to control how temporal values are added to change events. In some cases, you may want to use modes that align with Kafka types, using the <code>connect</code> mode. In other cases, you may prefer to avoid precision loss by using the default, <code>adaptive_milliseconds</code> mode.</p> </div> <div class="paragraph"> <p>The Debezium for Vitess connector has traditionally not followed this model, and instead has emitted temporal values as string-based types. While this helps avoid the loss of precision problem when using the <code>connect</code> mode, this adds unnecessary overhead on consumers to parse and manipulate these values.</p> </div> <div class="paragraph"> <p>In Debezium 2.7, Vitess aligns this behavior with other relational connectors, using the <code>time.precision.mode</code> to control how temporal values are sent (<a href="https://issues.redhat.com/browse/DBZ-7773">DBZ-7773</a>). By default, it will use the <code>adaptive_milliseconds</code> mode, but you can customize this to use <code>connect</code> mode if you prefer. The emission of string-based temporal values has been removed.</p> </div> </div> <div class="sect3"> <h4 id="support_heartbeat_events">Support heartbeat events</h4> <div class="paragraph"> <p>Debezium provides a mechanism to write to the database periodically to emit synchronizing events for offsets using the <code>heartbeat.action.query</code> connector configuration property. For Vitess, this is unnecessary since the Vitess/VStream provides this out of the box with the <a href="https://vitess.io/docs/17.0/reference/vreplication/vstream/#heartbeatinterval">HeartbeatInterval</a> flag.</p> </div> <div class="paragraph"> <p>Debezium 2.7 uses the <code>HeartbeatInterval</code> VStream flag, only requiring users to set the <code>heartbeat.interval.ms</code> in the connector configuration. As the heartbeat flag is observed in the VStream, a heartbeat event will be emitted based on that interval (<a href="https://issues.redhat.com/browse/DBZ-7962">DBZ-7962</a>)</p> </div> </div> </div> <div class="sect2"> <h3 id="new-features-server">Debezium Server</h3> <div class="sect3"> <h4 id="nats_authentication_with_jwtseed">NATS authentication with JWT/seed</h4> <div class="paragraph"> <p>The Debezium Server NATs streaming sink adapter was improved, supporting JWT/seed based authentication (<a href="https://issues.redhat.com/browse/DBZ-7829">DBZ-7829</a>). To get started using the JWT/seed-based authentication, supply the following necessary values in the configuration:</p> </div> <div class="listingblock"> <div class="title">JWT authentication example</div> <div class="content"> <pre class="CodeRay highlight"><code>debezium.sink.nats-jetstream.auth.jwt=&lt;your_jwt_token&gt;</code></pre> </div> </div> <div class="listingblock"> <div class="title">Seed authentication example</div> <div class="content"> <pre class="CodeRay highlight"><code>debezium.sink.nats-jetstream.auth.seed=&lt;your_nkey_seed&gt;</code></pre> </div> </div> <div class="paragraph"> <p>For this and more, please see the NATS documentation for details about JWT and NKey seed based authentication.</p> </div> </div> <div class="sect3"> <h4 id="nats_jetstream_sink_authentication_improvements">NATS JetStream sink authentication improvements</h4> <div class="paragraph"> <p>The Debezium Server NATS JetStream sink also includes improvements to support authentication and encryption in Debezium 2.7. Several new configuration properties are now supported to pass keystore details to the sink adapter (<a href="https://issues.redhat.com/browse/DBZ-7922">DBZ-7922</a>).</p> </div> <div class="listingblock"> <div class="title">New configuration properties</div> <div class="content"> <pre class="CodeRay highlight"><code data-lang="properties">...
debezium.sink.nats-jetstream.auth.tls.keystore=&lt;path-to-keystore-file&gt;
debezium.sink.nats-jetstream.auth.tls.keystore.password=secret-password
debezium.sink.nats-jetstream.auth.tls.password=&lt;tls-password&gt;</code></pre> </div> </div> <div class="paragraph"> <p>To get started using the new authentication and encryption features, simply include the above three configurations into your Debezium Server configuration with appropriate values.</p> </div> </div> <div class="sect3"> <h4 id="jmx_exporter_added">JMX Exporter added</h4> <div class="paragraph"> <p>The JMX Exporter agent has been added as part of the Debezium Server container image. This should enable users to easily fetch connector metrics while running Debezium Server out of the box (<a href="https://issues.redhat.com/browse/DBZ-7913">DBZ-7913</a>).</p> </div> <div class="paragraph"> <p>To enable the JMX Exporter, simply specify the <code>JMX_EXPORTER_PORT</code> environment variable when creating a container based on <code>debezium/debezium-server:2.7</code> or later, and making sure that the agent&#8217;s port is accessible to the outside world on the container.</p> </div> <div class="admonitionblock note"> <table> <tr> <td class="icon"> <i class="fa icon-note" title="Note"></i> </td> <td class="content"> <div class="paragraph"> <p>The JMX Exporter uses the configuration in <code>config/metrics.yml</code> by default. If this configuration is insufficient, you will need to explicitly mount a custom file with the desired configuration to override the container&#8217;s file.</p> </div> </td> </tr> </table> </div> </div> </div> <div class="sect2"> <h3 id="new-features-operator">Kubernetes Operator</h3> <div class="sect3"> <h4 id="install_debezium_operator_with_helm_chart">Install Debezium Operator with Helm Chart</h4> <div class="paragraph"> <p>To improve the deployment of the Debezium Operator, it can be installed with a helm chart at <a href="https://charts.debezium.io" class="bare">https://charts.debezium.io</a>. This avoids the overly complicated deployment model of installing the operator into separate namespaces, minimizing the complexities for managing multiple Debezium Server deployments on Kubernetes.</p> </div> </div> <div class="sect3"> <h4 id="enabling_jmx_exporter_with_debezium_operator">Enabling JMX Exporter with Debezium Operator</h4> <div class="paragraph"> <p>If you are deploying Debezium Server on Kubernetes using the Debezium Operator, the new JMX Exporter feature in Debezium Server can be enabled directly through the operator custom resource (<a href="https://issues.redhat.com/browse/DBZ-7914">DBZ-7914</a>). To get started using the exporter with the operator, new configuration operations were added:</p> </div> <div class="listingblock"> <div class="content"> <pre class="CodeRay highlight"><code data-lang="yml"><span class="key">runtime</span>:
  <span class="key">metrics</span>:
    <span class="key">jmxExporter</span>:
      <span class="key">enabled</span>: <span class="string"><span class="content">true</span></span>
      <span class="key">configFrom</span>:
        <span class="key">key1</span>: <span class="string"><span class="content">value1</span></span>
        <span class="key">key2</span>: <span class="string"><span class="content">value2</span></span></code></pre> </div> </div> <div class="paragraph"> <p>In the custom resource, the <code>jmxExporter.enabled</code> toggles the exporter on or off. Additionally, the metrics configuration can be supplied using key/value pairs in the <code>jmxExporter.configFrom</code> section.</p> </div> </div> <div class="sect3"> <h4 id="stopping_debezium_server_when_scaled_to_zero">Stopping Debezium Server when scaled to zero</h4> <div class="paragraph"> <p>Debezium Server is stopped when scaling the replicas to zero using the annotation, <code>debezium.io/stop=true</code> (<a href="https://issues.redhat.com/browse/DBZ-7953">DBZ-7953</a>).</p> </div> </div> </div> </div> </div> <div class="sect1"> <h2 id="other-changes">Other changes</h2> <div class="sectionbody"> <div class="paragraph"> <p>In total, <a href="https://issues.redhat.com/issues/?jql=project%20%3D%20DBZ%20and%20fixVersion%20%20in%20(2.7.0.Alpha1%2C%202.7.0.Alpha2%2C%202.7.0.Beta1%2C%202.7.0.CR1%2C%202.7.0.Final)">140 issues</a> were resolved in Debezium 2.7. The list of changes can also be found in our <a href="https://debezium.io/releases/2.7">release notes</a>. A big thank you to all the contributors from the community who worked diligently on this release: Ashwin Murali Krishnan, <a href="https://github.com/acristu">Alexandru Cristu</a>, <a href="https://github.com/samssh">Amirmohammad Sadat Shokouhi</a>, <a href="https://github.com/jchipmunk">Andrey Pustovetov</a>, <a href="https://github.com/adasari">Anil Dasari</a>, <a href="https://github.com/ani-sha">Anisha Mohanty</a>, <a href="https://github.com/ankurg03">Ankur Gupta</a>, <a href="https://github.com/aristofanisl">Aristofanis Lekkos</a>, <a href="https://github.com/bpaquet">Bertrand Paquet</a>, <a href="https://github.com/cjho0316">Choi Jang Ho</a>, <a href="https://github.com/Naros">Chris Cranford</a>, <a href="https://github.com/chrisrecalis">Chris Recalis</a>, <a href="https://github.com/chungeun-choi">Chungeun Choi</a>, <a href="https://github.com/calmera">Daan Gerits</a>, <a href="https://github.com/DLT1412">Duc Le Tu</a>, <a href="https://github.com/gaurav7261">Gaurav Miglani</a>, <a href="https://github.com/ilyasahsan123">Ilyas Ahsan</a>, <a href="https://github.com/ismailsimsek">Ismail Simsek</a>, <a href="https://github.com/jcechace">Jakub Cechacek</a>, <a href="https://github.com/novotnyJiri">Jiri Novotny</a>, <a href="https://github.com/jpechane">Jiri Pechanec</a>, <a href="https://github.com/joschi">Jochen Schalanda</a>, <a href="https://github.com/zeldanerd24">Kevin Rothenberger</a>, <a href="https://github.com/nrkljo">Lars M. Johansson</a>, <a href="https://github.com/methodmissing">Lourens Naudé</a>, <a href="https://github.com/Maithem">Maithem</a>, <a href="https://github.com/mfvitale">Mario Fiore Vitale</a>, <a href="https://github.com/markbanierink">Mark Banierink</a>, <a href="https://github.com/MartinMedek">Martin Medek</a>, <a href="https://github.com/augi">Michal Augustýn</a>, <a href="https://github.com/michal-k-gl">Michal Pioun</a>, <a href="https://github.com/obabec">Ondrej Babec</a>, <a href="https://github.com/ppiastucki-vgw">Piotr Piastucki</a>, <a href="https://github.com/PradeepNain">Pradeep Nain</a>, <a href="https://github.com/rajdangwal">Rajendra Dangwal</a>, <a href="https://github.com/roldanbob">Robert Roldan</a>, <a href="https://github.com/rmoff">Robin Moffatt</a>, <a href="https://github.com/rkudryashov">Roman Kudryashov</a>, <a href="https://github.com/sullis">Sean C. Sullivan</a>, <a href="https://github.com/selman-genc-alg">Selman Genç</a>, <a href="https://github.com/joontube">Seongjoon Jeong</a>, Indra Shukla, <a href="https://github.com/SylvainMarty">Sylvain Marty</a>, <a href="https://github.com/twthorn">Thomas Thornton</a>, <a href="https://github.com/TomaszGaweda">Tomasz Gawęda</a>, <a href="https://github.com/ramanenka">Vadzim Ramanenka</a>, <a href="https://github.com/vjuranek">Vojtech Juranek</a>, <a href="https://github.com/vjuranek">Vojtěch Juránek</a>, <a href="https://github.com/einar-rt">einar-rt</a>, <a href="https://github.com/ismailsimsek">ismail simsek</a>, <a href="https://github.com/leoloel">leoloel</a>, and Mathijs van den Worm!</p> </div> </div> </div> <div class="sect1"> <h2 id="whats-next">What&#8217;s next &amp; Outlook</h2> <div class="sectionbody"> <div class="paragraph"> <p>With the release of Debezium 2.7, the team is now switching gears and heavily focusing on the next major milestone, <strong>Debezium 3.0</strong>. This next major release includes a variety of changes, including but not limited to:</p> </div> <div class="ulist"> <ul> <li> <p>Java 17 as baseline</p> </li> <li> <p>Kafka 3.1+ as baseline</p> </li> <li> <p>New off-heap Oracle cache implementations based on EhCache &amp; Hazelcast</p> </li> <li> <p>Exactly-once semantics support for other relational connectors</p> </li> <li> <p>Sink connector for MongoDB</p> </li> <li> <p>and more</p> </li> </ul> </div> <div class="paragraph"> <p>This list represents a quick glance view at just what&#8217;s at the top of our queue, and is subject to change. If you&#8217;d like to get involved in the conversation about Debezium 3.0 and the next evolution of the project, contact us on the <a href="https://groups.google.com/g/debezium">mailing list</a> or <a href="https://debezium.zulipchat.com/login/#narrow/stream/302529-users">Zulip chat</a>. As always, please review our <a href="https://debezium.io/roadmap">road map</a> for more details.</p> </div> <div class="paragraph"> <p>As summer is in full swing and holiday plans are starting for many, be safe. Until next time&#8230;&#8203;</p> </div> </div> </div>]]></content><author><name>Chris Cranford</name></author><category term="releases"/><category term="mongodb"/><category term="mysql"/><category term="mariadb"/><category term="postgres"/><category term="sqlserver"/><category term="cassandra"/><category term="oracle"/><category term="db2"/><category term="vitess"/><category term="outbox"/><category term="spanner"/><category term="jdbc"/><category term="informix"/><category term="ibmi"/><summary type="html"><![CDATA[As the team leaps into Q3, we&#8217;re happy to announce the fruits of our Q2 work, Debezium 2.7.0.Final is now generally available. This release includes changes for 140 issues with contributions from over 51 contributors. Let&#8217;s take a moment and review all the changes.]]></summary></entry><entry><title type="html">Debezium 2.7.0.Beta1 Released</title><link href="https://debezium.io/blog/2024/06/06/debezium-2-7-beta1-released/" rel="alternate" type="text/html" title="Debezium 2.7.0.Beta1 Released"/><published>2024-06-06T00:00:00+00:00</published><updated>2024-06-06T00:00:00+00:00</updated><id>https://debezium.io/blog/2024/06/06/debezium-2-7-beta1-released</id><content type="html" xml:base="https://debezium.io/blog/2024/06/06/debezium-2-7-beta1-released/"><![CDATA[<div class="paragraph"> <p>Although half of 2024 is nearly behind us, the team is pleased to announce the first beta preview release for Debezium, <strong>2.7.0.Beta1</strong>.</p> </div> <div class="paragraph"> <p>This release includes incubating support for Db2 on z/OS, authentication and encryption with NATS JetStream, improvements for the MariaDB JDBC sink dialect, JMX Exporter with Debezium Server images, configurable metrics in Debezium Operator, and more.</p> </div> <div class="paragraph"> <p>Let&#8217;s walk through all the highlights and discuss these in more depth&#8230;&#8203;</p> </div> <div class="paragraph"> <p></p> </div> <div class="sect1"> <h2 id="breaking-changes">Breaking changes</h2> <div class="sectionbody"> <div class="paragraph"> <p>The team aims to avoid any potential breaking changes between minor releases; however, such changes are sometimes inevitable.</p> </div> <div class="dlist"> <dl> <dt class="hdlist1">Snapshot Artifacts</dt> <dd> <p>Debezium snapshots were previously published to <code>oss.sonatype.org</code>. Sonatype has retired this repository and replaced it with <code>s01.oss.sonatype.org</code> (<a href="https://issues.redhat.com/browse/DBZ-7641">DBZ-7641</a>). If you wish to fetch Debezium snapshot artifacts, be sure to migrate your scripts and resources to use the new infrastructure.</p> </dd> <dt class="hdlist1">Oracle</dt> <dd> <p>In previous versions, <code>NUMERIC</code> data types with zero-scale ignored <code>decimal.handling.mode</code>, which prevented these values from being emitted as <code>FLOAT64</code> (double) or <code>STRING</code> based types when using a non-default decimal handling mode configuration. We have adjusted the behavior so that zero-scale numeric data types honor the decimal handling mode (<a href="https://issues.redhat.com/browse/DBZ-7882">DBZ-7882</a>).</p> </dd> </dl> </div> <div class="admonitionblock note"> <table> <tr> <td class="icon"> <i class="fa icon-note" title="Note"></i> </td> <td class="content"> <div class="paragraph"> <p>If you use strict compatibility with schema registries, this will lead to incompatible schema concerns, and you&#8217;ll need to adjust the compatibility settings in the schema registry.</p> </div> </td> </tr> </table> </div> </div> </div> <div class="sect1"> <h2 id="new-features-and-improvements">New features and improvements</h2> <div class="sectionbody"> <div class="paragraph"> <p>Debezium 2.7.0.Beta1 also introduces many improvements and features, lets take a look at each individually.</p> </div> <div class="sect2"> <h3 id="support_db2_on_zos">Support Db2 on z/OS</h3> <div class="paragraph"> <p>Debezium 2.7 introduces incubating support for using the Db2 connector on the z/OS platform. For the Db2 connector to work with z/OS, several configuration options are required to toggle the connector to work with the z/OS platform database (<a href="https://issues.redhat.com/browse/DBZ-4812">DBZ-4812</a>).</p> </div> <div class="listingblock"> <div class="title">New connector properties</div> <div class="content"> <pre class="CodeRay highlight"><code data-lang="json">{
  <span class="error">.</span><span class="error">.</span><span class="error">.</span>,
  <span class="key"><span class="delimiter">&quot;</span><span class="content">db2.platform</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">ZOS</span><span class="delimiter">&quot;</span></span>,
  <span class="key"><span class="delimiter">&quot;</span><span class="content">cdc.control.schema</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">ASNCDC</span><span class="delimiter">&quot;</span></span>,
  <span class="key"><span class="delimiter">&quot;</span><span class="content">cdc.change.tables.schema</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">ASNCDC</span><span class="delimiter">&quot;</span></span>
}</code></pre> </div> </div> <div class="paragraph"> <p>The primary toggle to run in z/OS mode is done using the <code>db2.platform</code>, which defaults to <code>LUW</code> for running on Linux, Unix, and Windows. Setting this configuration option to <code>ZOS</code> enables z/OS.</p> </div> <div class="paragraph"> <p>In addition, we have also added the <code>cdc.control.schema</code> and <code>cdc.change.tables.schema</code> connector configuration properties. These were previously hardcoded as <code>ASNCDC</code>, and while this remains the default, if your installation uses different schemas, this is now possible.</p> </div> <div class="admonitionblock note"> <table> <tr> <td class="icon"> <i class="fa icon-note" title="Note"></i> </td> <td class="content"> <div class="paragraph"> <p>For existing Db2 connectors for Linux, Unix, and Windows, no configuration changes are required when upgrading. The <code>db2.platform</code> is only required for z/OS and the schema properties only if you put these objects in a different schema than <code>ASNCDC</code>.</p> </div> </td> </tr> </table> </div> </div> <div class="sect2"> <h3 id="nats_jetstream_sink_authentication_improvements">NATS JetStream sink authentication improvements</h3> <div class="paragraph"> <p>The Debezium Server NATS JetStream sink also includes improvements to support authentication and encryption in Debezium 2.7. Several new configuration properties are now supported to pass keystore details to the sink adapter (<a href="https://issues.redhat.com/browse/DBZ-7922">DBZ-7922</a>).</p> </div> <div class="listingblock"> <div class="title">New configuration properties</div> <div class="content"> <pre class="CodeRay highlight"><code data-lang="properties">...
debezium.sink.nats-jetstream.auth.tls.keystore=&lt;path-to-keystore-file&gt;
debezium.sink.nats-jetstream.auth.tls.keystore.password=secret-password
debezium.sink.nats-jetstream.auth.tls.password=&lt;tls-password&gt;</code></pre> </div> </div> <div class="paragraph"> <p>To get started using the new authentication and encryption features, simply include the above three configurations into your Debezium Server configuration with appropriate values.</p> </div> </div> <div class="sect2"> <h3 id="jdbc_sink_mariadb_dialect_support">JDBC sink MariaDB dialect support</h3> <div class="paragraph"> <p>While MariaDB and MySQL often share a lot of similar syntax, unfortunately there are corner cases where these two vary slightly that introduces incompatibilities. One such incompatibility was found with now the Debezium JDBC sink constructed <em>upsert</em> statements, which could not be executed when using a MariaDB target database.</p> </div> <div class="paragraph"> <p>Debezium 2.7 officially introduces MariaDB dialect support for the JDBC sink connector, enabling users to configure the JDBC sink to write changes from Kafka topics to a MariaDB target (<a href="https://issues.redhat.com/browse/DBZ-7874">DBZ-7874</a>). In general, no special configuration should be necessary as both Hibernate and Debezium should detect the target is MariaDB and use the correct dialects.</p> </div> <div class="admonitionblock note"> <table> <tr> <td class="icon"> <i class="fa icon-note" title="Note"></i> </td> <td class="content"> <div class="paragraph"> <p>If you find the dialect resolution does not resolve to MariaDB, you can enforce its use by setting the connector configuration <code>hibernate.dialect</code> with the fully qualified class name <code>org.hibernate.dialect.MariaDBDialect</code>.</p> </div> </td> </tr> </table> </div> <div class="admonitionblock note"> <table> <tr> <td class="icon"> <i class="fa icon-note" title="Note"></i> </td> <td class="content"> <div class="paragraph"> <p>We are currently aware that if you wish to use MariaDB, the driver is not shipped as part of the JDBC sink connector dependency stack. This has been recorded in <a href="https://issues.redhat.com/browse/DBZ-7918">DBZ-7818</a> and will be fixed in the next release. For now, download and install the driver manually alongside the JDBC connector jars.</p> </div> </td> </tr> </table> </div> </div> <div class="sect2"> <h3 id="jmx_exporter_added_to_debezium_server">JMX Exporter added to Debezium Server</h3> <div class="paragraph"> <p>The JMX Exporter agent has been added as part of the Debezium Server container image. This should enable users to easily fetch connector metrics while running Debezium Server out of the box (<a href="https://issues.redhat.com/browse/DBZ-7913">DBZ-7913</a>).</p> </div> <div class="paragraph"> <p>To enable the JMX Exporter, simply specify the <code>JMX_EXPORTER_PORT</code> environment variable when creating a container based on <code>debezium/debezium-server:2.7</code> or later, and making sure that the agent&#8217;s port is accessible to the outside world on the container.</p> </div> <div class="admonitionblock note"> <table> <tr> <td class="icon"> <i class="fa icon-note" title="Note"></i> </td> <td class="content"> <div class="paragraph"> <p>The JMX Exporter uses the configuration in <code>config/metrics.yml</code> by default. If this configuration is insufficient, you will need to explicitly mount a custom file with the desired configuration to override the container&#8217;s file.</p> </div> </td> </tr> </table> </div> </div> <div class="sect2"> <h3 id="enabling_jmx_exporter_with_debezium_operator">Enabling JMX Exporter with Debezium Operator</h3> <div class="paragraph"> <p>If you are deploying Debezium Server on Kubernetes using the Debezium Operator, the new JMX Exporter feature in Debezium Server can be enabled directly through the operator custom resource (<a href="https://issues.redhat.com/browse/DBZ-7914">DBZ-7914</a>). To get started using the exporter with the operator, new configuration operations were added:</p> </div> <div class="listingblock"> <div class="content"> <pre class="CodeRay highlight"><code data-lang="yml"><span class="key">runtime</span>:
  <span class="key">metrics</span>:
    <span class="key">jmxExporter</span>:
      <span class="key">enabled</span>: <span class="string"><span class="content">true</span></span>
      <span class="key">configFrom</span>:
        <span class="key">key1</span>: <span class="string"><span class="content">value1</span></span>
        <span class="key">key2</span>: <span class="string"><span class="content">value2</span></span></code></pre> </div> </div> <div class="paragraph"> <p>In the custom resource, the <code>jmxExporter.enabled</code> toggles the exporter on or off. Additionally, the metrics configuration can be supplied using key/value pairs in the <code>jmxExporter.configFrom</code> section.</p> </div> </div> <div class="sect2"> <h3 id="optional_delay_between_snapshot_streaming">Optional delay between snapshot &amp; streaming</h3> <div class="paragraph"> <p>Debezium 2.7 ships with a new global configuration option, <code>streaming.delay.ms</code>. This new option causes the connector to perform a delay before it starts the streaming phase (<a href="https://issues.redhat.com/browse/DBZ-7902">DBZ-7902</a>).</p> </div> <div class="paragraph"> <p>For some deployment use cases, you may want to guarantee that at least one offset flush interval has happened before the streaming phase begins. In such use cases, uses should guarantee that both properties, <code>streaming.delay.ms</code> and <code>offset.flush.interval.ms</code> are aligned.</p> </div> <div class="paragraph"> <p>By default, Debezium will not perform a delay and immediately transitions to the streaming phase to remain consistent with prior version behavior.</p> </div> </div> </div> </div> <div class="sect1"> <h2 id="other-changes">Other changes</h2> <div class="sectionbody"> <div class="paragraph"> <p>Altogether, <a href="https://issues.redhat.com/issues/?jql=project%20%3D%20DBZ%20AND%20fixVersion%20%3D%202.7.0.Beta1%20ORDER%20BY%20issuetype%20DESC">36 issues</a> were fixed in this release. Here are a list of some additional noteworthy changes:</p> </div> <div class="ulist"> <ul> <li> <p>Debezium 1.9.2 cannot capture field that is date type of postgres <a href="https://issues.redhat.com/browse/DBZ-5182">DBZ-5182</a></p> </li> <li> <p>Ensure vgtid remains local to shards streamed by task <a href="https://issues.redhat.com/browse/DBZ-6721">DBZ-6721</a></p> </li> <li> <p>Decompose provide.transaction.metadata into components <a href="https://issues.redhat.com/browse/DBZ-6722">DBZ-6722</a></p> </li> <li> <p>Handle Enum as String or Int <a href="https://issues.redhat.com/browse/DBZ-7792">DBZ-7792</a></p> </li> <li> <p>Rewrite batch statement not supported for jdbc debezium sink <a href="https://issues.redhat.com/browse/DBZ-7845">DBZ-7845</a></p> </li> <li> <p>Debezium MySQL Snapshot Connector Fails <a href="https://issues.redhat.com/browse/DBZ-7858">DBZ-7858</a></p> </li> <li> <p>Reduce enum array allocation <a href="https://issues.redhat.com/browse/DBZ-7859">DBZ-7859</a></p> </li> <li> <p>Snapshot retrying logic falls into infinite retry loop <a href="https://issues.redhat.com/browse/DBZ-7860">DBZ-7860</a></p> </li> <li> <p>Bump Java in Debezium Server images <a href="https://issues.redhat.com/browse/DBZ-7861">DBZ-7861</a></p> </li> <li> <p>Default value of error retries not interpreted correctly <a href="https://issues.redhat.com/browse/DBZ-7870">DBZ-7870</a></p> </li> <li> <p>Avro schema compatibility issues when upgrading from Oracle Debezium 2.5.3.Final to 2.6.1.Final <a href="https://issues.redhat.com/browse/DBZ-7880">DBZ-7880</a></p> </li> <li> <p>Improve offset and history storage configuration <a href="https://issues.redhat.com/browse/DBZ-7884">DBZ-7884</a></p> </li> <li> <p>Oracle Debezium Connector cannot startup due to failing incremental snapshot <a href="https://issues.redhat.com/browse/DBZ-7886">DBZ-7886</a></p> </li> <li> <p>Allow customizing ObjectMapper in JsonSerde <a href="https://issues.redhat.com/browse/DBZ-7887">DBZ-7887</a></p> </li> <li> <p>Multiple completed reading from a capture instance notifications <a href="https://issues.redhat.com/browse/DBZ-7889">DBZ-7889</a></p> </li> <li> <p>Debezium can&#8217;t handle columns with # in its name <a href="https://issues.redhat.com/browse/DBZ-7893">DBZ-7893</a></p> </li> <li> <p>Oracle interval default values are not properly parsed <a href="https://issues.redhat.com/browse/DBZ-7898">DBZ-7898</a></p> </li> <li> <p>Debezium server unable to shutdown on pubsub error <a href="https://issues.redhat.com/browse/DBZ-7904">DBZ-7904</a></p> </li> <li> <p>Handle gtid without range only single position <a href="https://issues.redhat.com/browse/DBZ-7905">DBZ-7905</a></p> </li> <li> <p>Enhancing the threads utility class for broader use <a href="https://issues.redhat.com/browse/DBZ-7906">DBZ-7906</a></p> </li> <li> <p>Oracle connector cannot parse SUBPARTITION when altering table <a href="https://issues.redhat.com/browse/DBZ-7908">DBZ-7908</a></p> </li> <li> <p>Make column exclude use keyspace not shard <a href="https://issues.redhat.com/browse/DBZ-7910">DBZ-7910</a></p> </li> <li> <p>The explanation in the documentation is insufficient - metric <a href="https://issues.redhat.com/browse/DBZ-7912">DBZ-7912</a></p> </li> </ul> </div> <div class="paragraph"> <p>A huge thank you to all contributors from the community who worked on this release: Ashwin Murali Krishnan, Mathijs van den Worm, <a href="https://github.com/ankurg03">Ankur Gupta</a>, <a href="https://github.com/aristofanisl">Aristofanis Lekkos</a>, <a href="https://github.com/Naros">Chris Cranford</a>, <a href="https://github.com/chungeun-choi">Chungeun Choi</a>, <a href="https://github.com/gaurav7261">Gaurav Miglani</a>, <a href="https://github.com/ankurg03">Ankur Gupta</a>, <a href="https://github.com/jcechace">Jakub Cechacek</a>, <a href="https://github.com/jpechane">Jiri Pechanec</a>, <a href="https://github.com/mfvitale">Mario Fiore Vitale</a>, <a href="https://github.com/markbanierink">Mark Banierink</a>, <a href="https://github.com/augi">Michal Augustýn</a>, <a href="https://github.com/rajdangwal">Rajendra Dangwal</a>, <a href="https://github.com/roldanbob">Robert Roldan</a>, <a href="https://github.com/rkudryashov">Roman Kudryashov</a>, <a href="https://github.com/sullis">Sean C. Sullivan</a>, <a href="https://github.com/joontube">Seongjoon Jeong</a>, <a href="https://github.com/SylvainMarty">Sylvain Marty</a>, <a href="https://github.com/twthorn">Thomas Thornton</a>, <a href="https://github.com/ramanenka">Vadzim Ramanenka</a>, <a href="https://github.com/vjuranek">Vojtech Juranek</a>, and <a href="https://github.com/einar-rt">einar-rt</a>!</p> </div> </div> </div>]]></content><author><name>Chris Cranford</name></author><category term="releases"/><category term="mongodb"/><category term="mysql"/><category term="mariadb"/><category term="postgres"/><category term="sqlserver"/><category term="cassandra"/><category term="oracle"/><category term="db2"/><category term="vitess"/><category term="outbox"/><category term="spanner"/><category term="jdbc"/><category term="informix"/><category term="ibmi"/><summary type="html"><![CDATA[Although half of 2024 is nearly behind us, the team is pleased to announce the first beta preview release for Debezium, 2.7.0.Beta1. This release includes incubating support for Db2 on z/OS, authentication and encryption with NATS JetStream, improvements for the MariaDB JDBC sink dialect, JMX Exporter with Debezium Server images, configurable metrics in Debezium Operator, and more. Let&#8217;s walk through all the highlights and discuss these in more depth&#8230;&#8203;]]></summary></entry><entry><title type="html">Debezium 2.6.2.Final Released</title><link href="https://debezium.io/blog/2024/05/30/debezium-2-6-2-final-released/" rel="alternate" type="text/html" title="Debezium 2.6.2.Final Released"/><published>2024-05-30T00:00:00+00:00</published><updated>2024-05-30T00:00:00+00:00</updated><id>https://debezium.io/blog/2024/05/30/debezium-2-6-2-final-released</id><content type="html" xml:base="https://debezium.io/blog/2024/05/30/debezium-2-6-2-final-released/"><![CDATA[<div class="paragraph"> <p>I&#8217;m pleased to announce the immediate availability of Debezium <strong>2.6.2.Final</strong>. This release is the second maintenance release that focuses on addressing several critical stability issues with the 2.6.1.Final release, support for Oracle database query filtering with more than one thousand tables, fixed race condition with PostgreSQL offset flushing, fixed Avro compatibility, and more.</p> </div> <div class="paragraph"> <p>Let&#8217;s take a few moments and dive into these and more&#8230;&#8203;</p> </div> <div class="paragraph"> <p></p> </div> <div class="sect1"> <h2 id="new-features-and-improvements">New features and improvements</h2> <div class="sectionbody"> <div class="paragraph"> <p>Debezium 2.6.2.Final introduces one new feature, lets take a look at it.</p> </div> <div class="sect2"> <h3 id="oracle_database_query_filtering_with_1000_tables">Oracle database query filtering with 1000+ tables</h3> <div class="paragraph"> <p>The Debezium Oracle connector allows configuring the table include and exclude lists to be applied as part of the database query for efficiency reasons using the <code>log.mining.query.filter.mode</code>. When setting this configuration property to a value of <code>in</code>, the query is constructed using a SQL in-clause. In Oracle, an in-clause is restricted to one thousand elements, and if your connector configuration exceeded this limit, the query would fail to execute.</p> </div> <div class="paragraph"> <p>Debezium 2.6 addresses this by creating sub-buckets of exactly one thousand elements and constructs the query using multiple in-clauses separated by a disjunction if the table include and exclude lists are too large. This improves the user experience, allowing a single connector to capture more than one thousand tables with a single deployment, using the query filter mode, and without resorting to regular expressions. (<a href="https://issues.redhat.com/browse/DBZ-7847">DBZ-7847</a>).</p> </div> </div> </div> </div> <div class="sect1"> <h2 id="important-fixes">Fixes and stability improvements</h2> <div class="sectionbody"> <div class="paragraph"> <p>Debezium 2.6.2.Final introduces several new bug fixes and stability improvements, lets take a look at a few of them.</p> </div> <div class="sect2"> <h3 id="postgresql_offset_flush_race_condition">PostgreSQL offset flush race condition</h3> <div class="paragraph"> <p>The Debezium PostgreSQL connector requires that not only do we publish offset metadata to Kafka to handle connector restarts, but the connector must also flush these details to the database&#8217;s underlying replication slot to prevent unbounded WAL growth.</p> </div> <div class="paragraph"> <p>Using an example, let&#8217;s propose we have two changes for LSN <code>1</code> and <code>2</code>. Both of these changes are written to two different partitions, <code>A</code> and <code>B</code>, respectively. As this happens asynchronously, it&#8217;s possible that the write to partition <code>B</code> succeeds while the write to partition <code>A</code> fails.</p> </div> <div class="paragraph"> <p>If Debezium receives acknowledgement for partition <code>B</code> before <code>A</code>, the connector will synchronize the WAL confirmed LSN as <code>2</code>. Should the connector fail before acknowledging partition <code>A</code> or get restarted due to a rebalance, upon connector restart the change for LSN <code>1</code> is lost.</p> </div> <div class="paragraph"> <p>This problem has been fixed in Debezium 2.6 onward, and the replication slot&#8217;s confirmed LSN will correctly match the state in the topics (<a href="https://issues.redhat.com/browse/DBZ-7816">DBZ-7816</a>).</p> </div> </div> <div class="sect2"> <h3 id="avro_compatibility">Avro compatibility</h3> <div class="paragraph"> <p>In Debezium 2.5, we introduced several new timestamp fields, <code>ts_us</code>, and <code>ts_ns</code>, which represent the millisecond-based time values in microseconds and nanoseconds. Unfortunately, these fields were not introduced in a compatible way for users who use Avro (<a href="https://issues.redhat.com/browse/DBZ-7880">DBZ-7880</a>).</p> </div> <div class="paragraph"> <p>We have adjusted the change event schema so that the new fields introduced are optional, making the change event schema compatible with old versions so that users can upgrade to Debezium 2.6 or later without issues using Avro.</p> </div> </div> </div> </div> <div class="sect1"> <h2 id="other_fixes">Other fixes</h2> <div class="sectionbody"> <div class="ulist"> <ul> <li> <p>After the initial deployment of Debezium, if a new table is added to MSSQL, its schema is was captured <a href="https://issues.redhat.com/browse/DBZ-7697">DBZ-7697</a></p> </li> <li> <p>NO_DATA snapshot mode validation throw DebeziumException on restarts if snapshot is not completed <a href="https://issues.redhat.com/browse/DBZ-7780">DBZ-7780</a></p> </li> <li> <p>DDL statement couldn&#8217;t be parsed <a href="https://issues.redhat.com/browse/DBZ-7788">DBZ-7788</a></p> </li> <li> <p>old class reference in ibmi-connector services <a href="https://issues.redhat.com/browse/DBZ-7795">DBZ-7795</a></p> </li> <li> <p>Ad-hoc blocking snapshot not working through file channeling without inserting a row in the database. <a href="https://issues.redhat.com/browse/DBZ-7806">DBZ-7806</a></p> </li> <li> <p>Postgres: Potential data loss on connector restart <a href="https://issues.redhat.com/browse/DBZ-7816">DBZ-7816</a></p> </li> <li> <p>Add c3p0 timeout configuration example to JDBC sink <a href="https://issues.redhat.com/browse/DBZ-7822">DBZ-7822</a></p> </li> <li> <p>Sql Server incorrectly applying quoted snapshot statement overrides <a href="https://issues.redhat.com/browse/DBZ-7828">DBZ-7828</a></p> </li> <li> <p>Debezium JDBC Sink not handle order correctly <a href="https://issues.redhat.com/browse/DBZ-7830">DBZ-7830</a></p> </li> <li> <p>in the Cassandra documentation, there is a typo which should have been disable not Dusable. <a href="https://issues.redhat.com/browse/DBZ-7851">DBZ-7851</a></p> </li> <li> <p>Debezium MySQL Snapshot Connector Fails <a href="https://issues.redhat.com/browse/DBZ-7858">DBZ-7858</a></p> </li> <li> <p>Support Oracle DDL Alter Audit Policy <a href="https://issues.redhat.com/browse/DBZ-7864">DBZ-7864</a></p> </li> <li> <p>Support Oracle DDL Create Audit Policy <a href="https://issues.redhat.com/browse/DBZ-7865">DBZ-7865</a></p> </li> <li> <p>Default value of error retries not interpreted correctly <a href="https://issues.redhat.com/browse/DBZ-7870">DBZ-7870</a></p> </li> <li> <p>Too much logs after Debezium update <a href="https://issues.redhat.com/browse/DBZ-7871">DBZ-7871</a></p> </li> <li> <p>Avro schema compatibility issues when upgrading from Oracle Debezium 2.5.3.Final to 2.6.1.Final <a href="https://issues.redhat.com/browse/DBZ-7880">DBZ-7880</a></p> </li> <li> <p>ParsingException (MySQL 8): create trigger if exists <a href="https://issues.redhat.com/browse/DBZ-7881">DBZ-7881</a></p> </li> <li> <p>Debezium can&#8217;t handle columns with # in its name <a href="https://issues.redhat.com/browse/DBZ-7893">DBZ-7893</a></p> </li> <li> <p>Oracle interval default values are not properly parsed <a href="https://issues.redhat.com/browse/DBZ-7898">DBZ-7898</a></p> </li> </ul> </div> <div class="paragraph"> <p>In total there were <a href="https://issues.redhat.com/issues/?jql=project%20%3D%20DBZ%20and%20fixVersion%20%20in%20(2.6.2.Final)">20 issues</a> resolved in Debezium 2.6.2.Final. The list of changes can also be found in our <a href="https://debezium.io/releases/2.6">release notes</a>.</p> </div> <div class="paragraph"> <p>A big thank you to all the contributors from the community who worked diligently on this release: <a href="https://github.com/adasari">Anil Dasari</a>, <a href="https://github.com/Naros">Chris Cranford</a>, <a href="https://github.com/DLT1412">Duc Le Tu</a>, <a href="https://github.com/ilyasahsan123">Ilyas Ahsan</a>, <a href="https://github.com/jpechane">Jiri Pechanec</a>, <a href="https://github.com/joschi">Jochen Schalanda</a>, <a href="https://github.com/mfvitale">Mario Fiore Vitale</a>, <a href="https://github.com/augi">Michal Augustýn</a>, <a href="https://github.com/PradeepNain">Pradeep Nain</a>, <a href="https://github.com/roldanbob">Robert Roldan</a>, <a href="https://github.com/rmoff">Robin Moffatt</a>, <a href="https://github.com/rkudryashov">Roman Kudryashov</a>, and <a href="https://github.com/ramanenka">Vadzim Ramanenka</a>!</p> </div> </div> </div>]]></content><author><name>Chris Cranford</name></author><category term="releases"/><category term="mongodb"/><category term="mysql"/><category term="mariadb"/><category term="postgres"/><category term="sqlserver"/><category term="cassandra"/><category term="oracle"/><category term="db2"/><category term="vitess"/><category term="outbox"/><category term="spanner"/><category term="jdbc"/><category term="informix"/><category term="ibmi"/><summary type="html"><![CDATA[I&#8217;m pleased to announce the immediate availability of Debezium 2.6.2.Final. This release is the second maintenance release that focuses on addressing several critical stability issues with the 2.6.1.Final release, support for Oracle database query filtering with more than one thousand tables, fixed race condition with PostgreSQL offset flushing, fixed Avro compatibility, and more. Let&#8217;s take a few moments and dive into these and more&#8230;&#8203;]]></summary></entry><entry><title type="html">Debezium 2.7.0.Alpha2 Released</title><link href="https://debezium.io/blog/2024/05/13/debezium-2-7-alpha2-released/" rel="alternate" type="text/html" title="Debezium 2.7.0.Alpha2 Released"/><published>2024-05-13T00:00:00+00:00</published><updated>2024-05-13T00:00:00+00:00</updated><id>https://debezium.io/blog/2024/05/13/debezium-2-7-alpha2-released</id><content type="html" xml:base="https://debezium.io/blog/2024/05/13/debezium-2-7-alpha2-released/"><![CDATA[<div class="paragraph"> <p>The old saying is "April showers bring May flowers"; however, in this case it seems a new Debezium release has sprouted packed with many new features. We&#8217;re pleased to announce the release of Debezium <strong>2.7.0.Alpha2</strong>, the next pre-release in the Debezium 2.7 stream, is now available for testing.</p> </div> <div class="paragraph"> <p>This release includes new ROW_ID serialization for the Oracle connector, PostgreSQL array support for the JDBC sink connector, NATs authentication with Debezium Server, performance improvements with Oracle LogMiner and large tables, and more. Let&#8217;s walk through the highlights of this release and discuss these and more in-depth&#8230;&#8203;</p> </div> <div class="paragraph"> <p></p> </div> <div class="sect1"> <h2 id="new-features-and-improvements">New features and improvements</h2> <div class="sectionbody"> <div class="paragraph"> <p>Debezium 2.7.0.Alpha2 also introduces many improvements and features, lets take a look at each individually.</p> </div> <div class="sect2"> <h3 id="oracle_row_id_included_in_change_events">Oracle ROW_ID included in change events</h3> <div class="paragraph"> <p>While <code>ROW_ID</code> is not unique across all rows of a table for the table&#8217;s lifespan, it can be used in certain situations when the lifecycle of the table and rows are managed in a very strict way. At the community&#8217;s request, we&#8217;ve added a new <code>row_id</code> field to the Oracle connector&#8217;s change event source information block (<a href="https://issues.redhat.com/browse/DBZ-4332">DBZ-4332</a>). This new field will be populated with the <code>ROW_ID</code> value under the following conditions:</p> </div> <div class="ulist"> <ul> <li> <p>Only populated from streaming events for inserts, updates, and deletes.</p> </li> <li> <p>Snapshot evnets will not contain a <code>row_id</code> value.</p> </li> <li> <p>Only provided by the LogMiner and XStream streaming adapters, OpenLogReplicator is not supported.</p> </li> </ul> </div> <div class="paragraph"> <p>Any event that does not match the criteria will not include a <code>row_id</code> field as its marked as <em>optional</em>.</p> </div> </div> <div class="sect2"> <h3 id="postresql_arrays_with_the_jdbc_sink">PostreSQL Arrays with the JDBC sink</h3> <div class="paragraph"> <p>The JDBC sink connector supports the use of mapping source columns to Kafka ARRAY-based payload field types. With Debezium 2.7, you can now serialize ARRAY-based fields to a target PostgreSQL database, with no change in configuration. The new support should be completely transparent (<a href="https://issues.redhat.com/browse/DBZ-7752">DBZ-7752</a>).</p> </div> </div> <div class="sect2"> <h3 id="oracle_flush_table_with_custom_schema_names">Oracle flush table with custom schema names</h3> <div class="paragraph"> <p>In prior versions of Debezium, the Oracle connector was strictly designed to create the LogMiner flush table in the default tablespace of the connector user account. This wasn&#8217;t always useful in situations where the user&#8217;s default tablespace may not be the ideal destination and the DBA would prefer that table to exist in a separate tablespace.</p> </div> <div class="paragraph"> <p>Previously, users would need to modify the user account or use a new user with the correct tablespace to have the table created in the right tablespace location. With Debezium 2.7, this is no longer required, and you can safely include the name of the target schema/tablespace in the configuration (<a href="https://issues.redhat.com/browse/DBZ-7819">DBZ-7819</a>).</p> </div> <div class="listingblock"> <div class="title">Example using a custom schema name</div> <div class="content"> <pre class="CodeRay highlight"><code>log.mining.flush.table.name=THE_OTHER_SCHEMA.LOG_MINING_FLUSH_TABLE</code></pre> </div> </div> <div class="paragraph"> <p>The schema name is optional and if not supplied, the connector continues to use the same legacy behavior of creating the flush table and checking for its existence in the user&#8217;s default tablespace.</p> </div> </div> <div class="sect2"> <h3 id="nats_authentication_with_jwtseed">NATS authentication with JWT/seed</h3> <div class="paragraph"> <p>The Debezium Server NATs streaming sink adapter was improved, supporting JWT/seed based authentication (<a href="https://issues.redhat.com/browse/DBZ-7829">DBZ-7829</a>). To get started using the JWT/seed-based authentication, supply the following necessary values in the configuration:</p> </div> <div class="listingblock"> <div class="title">JWT authentication example</div> <div class="content"> <pre class="CodeRay highlight"><code>debezium.sink.nats-jetstream.auth.jwt=&lt;your_jwt_token&gt;</code></pre> </div> </div> <div class="listingblock"> <div class="title">Seed authentication example</div> <div class="content"> <pre class="CodeRay highlight"><code>debezium.sink.nats-jetstream.auth.seed=&lt;your_nkey_seed&gt;</code></pre> </div> </div> <div class="paragraph"> <p>For this and more, please see the NATS documentation for details about JWT and NKey seed based authentication.</p> </div> </div> <div class="sect2"> <h3 id="oracle_query_filter_with_large_numbers_of_tables">Oracle query filter with large numbers of tables</h3> <div class="paragraph"> <p>The Debezium Oracle connector can support thousands of tables in a single connector deployment with ease; however, you may have found you wanted to customize the query filter using the <code>IN</code> mode. This mode is used in situations where you may have a high volume of changes for other tables and you want to filter that dataset out at the database level before the changes are passed to Debezium for processing.</p> </div> <div class="paragraph"> <p>In earlier versions, users may have noticed that setting <code>log.mining.query.filter.mode</code> with a value of <code>in</code> and where your table include list contained more than 1000 elements generated a SQL error. Oracle does not permit more than 1000 elements within an in-clause; however, Debezium 2.7 addresses this limitation by using a disjunction between multiple buckets of 1000 item in-clause lists (<a href="https://issues.redhat.com/browse/DBZ-7847">DBZ-7847</a>).</p> </div> </div> </div> </div> <div class="sect1"> <h2 id="other-changes">Other changes</h2> <div class="sectionbody"> <div class="paragraph"> <p>Altogether, <a href="https://issues.redhat.com/issues/?jql=project%20%3D%20DBZ%20AND%20fixVersion%20%3D%202.7.0.Alpha2%20ORDER%20BY%20issuetype%20DESC">27 issues</a> were fixed in this release. Here are a list of some additional noteworthy changes:</p> </div> <div class="ulist"> <ul> <li> <p>Log exception details early in case MySQL keep-alive causes deadlock on shutdown <a href="https://issues.redhat.com/browse/DBZ-7570">DBZ-7570</a></p> </li> <li> <p>Extend mongodb system tests with ssl option <a href="https://issues.redhat.com/browse/DBZ-7605">DBZ-7605</a></p> </li> <li> <p>&gt; io.debezium.text.ParsingException : SQL Contains Partition <a href="https://issues.redhat.com/browse/DBZ-7805">DBZ-7805</a></p> </li> <li> <p>Ad-hoc blocking snapshot not working through file channeling without inserting a row in the database. <a href="https://issues.redhat.com/browse/DBZ-7806">DBZ-7806</a></p> </li> <li> <p>Postgres: Potential data loss on connector restart <a href="https://issues.redhat.com/browse/DBZ-7816">DBZ-7816</a></p> </li> <li> <p>DEBEZIUM_VERSION is wrongly set to 2.6.0.Alpha1 <a href="https://issues.redhat.com/browse/DBZ-7827">DBZ-7827</a></p> </li> <li> <p>Sql Server incorrectly applying quoted snapshot statement overrides <a href="https://issues.redhat.com/browse/DBZ-7828">DBZ-7828</a></p> </li> <li> <p>Debezium JDBC Sink not handle order correctly <a href="https://issues.redhat.com/browse/DBZ-7830">DBZ-7830</a></p> </li> <li> <p>Bump Outbox Extension to Quarkus 3.10.0 <a href="https://issues.redhat.com/browse/DBZ-7842">DBZ-7842</a></p> </li> <li> <p>Support Oracle DDL Alter Audit Policy <a href="https://issues.redhat.com/browse/DBZ-7864">DBZ-7864</a></p> </li> <li> <p>Support Oracle DDL Create Audit Policy <a href="https://issues.redhat.com/browse/DBZ-7865">DBZ-7865</a></p> </li> </ul> </div> <div class="paragraph"> <p>A huge thank you to all contributors from the community who worked on this release: <a href="https://github.com/acristu">Alexandru Cristu</a>, <a href="https://github.com/adasari">Anil Dasari</a>, <a href="https://github.com/bpaquet">Bertrand Paquet</a>, <a href="https://github.com/cjho0316">Choi Jang Ho</a>, <a href="https://github.com/Naros">Chris Cranford</a>, <a href="https://github.com/calmera">Daan Gerits</a>, <a href="https://github.com/DLT1412">Duc Le Tu</a>, <a href="https://github.com/ilyasahsan123">Ilyas Ahsan</a>, <a href="https://github.com/ismailsimsek">Ismail Simsek</a>, <a href="https://github.com/jpechane">Jiri Pechanec</a>, <a href="https://github.com/zeldanerd24">Kevin Rothenberger</a>, <a href="https://github.com/mfvitale">Mario Fiore Vitale</a>, <a href="https://github.com/MartinMedek">Martin Medek</a>, <a href="https://github.com/PradeepNain">Pradeep Nain</a>, <a href="https://github.com/roldanbob">Robert Roldan</a>, and <a href="https://github.com/leoloel">leoloel</a>!</p> </div> </div> </div> <div class="sect1"> <h2 id="whats-next">What&#8217;s next?</h2> <div class="sectionbody"> <div class="paragraph"> <p>We have our team face-to-face next week, and it&#8217;s going to be absolutely fantastic since its the first time we get to meet in person since the Covid pandemic. We&#8217;re going to use this time to discuss all the community feedback we&#8217;re received throughout Debezium 2, reflect on what worked, and put together action plans for what didn&#8217;t.</p> </div> <div class="paragraph"> <p>The main focus for our meeting is to develop an action plan for Debezium 3.0 and beyond, assign tasks and priorities across the team so that as we focus on Debezium 3 next quarter, we can make this next major release an easy replacement for the community while also delivering a new, refreshing, feature-rich major version. We will be updating the roadmap and deliverables when we&#8217;re back, so be sure to stay tuned to our <a href="/docs/roadmap">road map</a>.</p> </div> <div class="paragraph"> <p>In terms of Debezium 2.7, we&#8217;re halfway through the quarter, and we&#8217;re about to turn our focus on the last half where we will address any bugs, regressions, and polish new features. If you have the chance to test-drive the pre-releases, we strongly encourage you to do so and file bug reports.</p> </div> <div class="paragraph"> <p>Until next time&#8230;&#8203;</p> </div> </div> </div>]]></content><author><name>Chris Cranford</name></author><category term="releases"/><category term="mongodb"/><category term="mysql"/><category term="mariadb"/><category term="postgres"/><category term="sqlserver"/><category term="cassandra"/><category term="oracle"/><category term="db2"/><category term="vitess"/><category term="outbox"/><category term="spanner"/><category term="jdbc"/><category term="informix"/><category term="ibmi"/><summary type="html"><![CDATA[The old saying is "April showers bring May flowers"; however, in this case it seems a new Debezium release has sprouted packed with many new features. We&#8217;re pleased to announce the release of Debezium 2.7.0.Alpha2, the next pre-release in the Debezium 2.7 stream, is now available for testing. This release includes new ROW_ID serialization for the Oracle connector, PostgreSQL array support for the JDBC sink connector, NATs authentication with Debezium Server, performance improvements with Oracle LogMiner and large tables, and more. Let&#8217;s walk through the highlights of this release and discuss these and more in-depth&#8230;&#8203;]]></summary></entry><entry><title type="html">Debezium 2.7.0.Alpha1 Released</title><link href="https://debezium.io/blog/2024/04/25/debezium-2-7-alpha1-released/" rel="alternate" type="text/html" title="Debezium 2.7.0.Alpha1 Released"/><published>2024-04-25T00:00:00+00:00</published><updated>2024-04-25T00:00:00+00:00</updated><id>https://debezium.io/blog/2024/04/25/debezium-2-7-alpha1-released</id><content type="html" xml:base="https://debezium.io/blog/2024/04/25/debezium-2-7-alpha1-released/"><![CDATA[<div class="paragraph"> <p>As the temperature for summer continues to rise, I&#8217;m please to announce that Debezium has some really cool news, Debezium <strong>2.7.0.Alpha1</strong> is now available for testing. This release includes a variety of new changes and improvements across various connectors like MongoDB, MariaDB, MySQL, Oracle, Vitess, and the Kubernetes Operator, to a myriad of subtle fixes and improvements across the entire Debezium portfolio. Let&#8217;s take a moment and dive into some highlights&#8230;&#8203;</p> </div> <div class="paragraph"> <p></p> </div> <div class="sect1"> <h2 id="breaking-changes">Breaking changes</h2> <div class="sectionbody"> <div class="paragraph"> <p>The team aims to avoid any potential breaking changes between minor releases; however, such changes are sometimes inevitable.</p> </div> <div class="dlist"> <dl> <dt class="hdlist1">Core</dt> <dd> <div class="ulist"> <ul> <li> <p>It was identified that certain JDBC queries could indefinitely block in the case of certain communication failures. To combat this problem, a new configurable timeout option, <code>query.timeout.ms</code> is available to set the maximum time that a JDBC query can execute before being terminated (<a href="https://issues.redhat.com/browse/DBZ-7616">DBZ-7616</a>).</p> </li> </ul> </div> </dd> <dt class="hdlist1">SQL Server</dt> <dd> <div class="ulist"> <ul> <li> <p>The SQL Server connector previously processed all transactions captured during a single database round trip. This behavior is configurable and is based on <code>max.iterations.transactions</code>, which defaults to processing all transactions (value of <code>0</code>). This could lead to unexpected out of memory conditions if your database has a high volume of transactions.<br> <br> To address this for these use cases, the default value for <code>max.iterations.transactions</code> has changed to <code>500</code>, to be more resilient for these deployment use cases out-of-the-box. If you want to return to the previous behavior, simply add this configuration option to your connector with a value of <code>0</code> (<a href="https://issues.redhat.com/browse/DBZ-7750">DBZ-7750</a>).</p> </li> </ul> </div> </dd> </dl> </div> </div> </div> <div class="sect1"> <h2 id="new-features-and-improvements">New features and improvements</h2> <div class="sectionbody"> <div class="paragraph"> <p>Debezium 2.7.0.Alpha1 also introduces many improvements and features, lets take a look at each individually.</p> </div> <div class="sect2"> <h3 id="install_debezium_operator_with_helm_chart">Install Debezium Operator with Helm Chart</h3> <div class="paragraph"> <p>To improve the deployment of the Debezium Operator, it can be installed with a helm chart at <a href="https://charts.debezium.io" class="bare">https://charts.debezium.io</a>. This avoids the overly complicated deployment model of installing the operator into separate namespaces, minimizing the complexities for managing multiple Debezium Server deployments on Kubernetes.</p> </div> </div> <div class="sect2"> <h3 id="support_predicate_conditions_for_mongodb_incremental_snapshots">Support predicate conditions for MongoDB incremental snapshots</h3> <div class="paragraph"> <p>The incremental snapshot process is an instrumental part in various recovery situations to collect whole or part of the data set from a source table or collection. Relational connectors have long supported the idea of supplying an <code>additional-conditions</code> value on the incremental snapshot signal to restrict the data set, providing for targeted resynchronization of specific rows of data.</p> </div> <div class="paragraph"> <p>We&#8217;re happy to announce that this is now possible with MongoDB (<a href="https://issues.redhat.com/browse/DBZ-7138">DBZ-7138</a>). Unlike relational databases, the <code>additional-conditions</code> should be supplied in JSON format. It will be applied to the specified collection using the <code>find</code> operation to obtain the subset list of documents that are to be incrementally snapshotted.</p> </div> </div> <div class="sect2"> <h3 id="new_mariadb_standalone_connector">New MariaDB standalone connector</h3> <div class="paragraph"> <p>Debezium 2.5 introduced official support for MariaDB as part of the existing MySQL connector. The next step in that evolution is here, with a new standalone connector implementation for MariaDB (<a href="https://issues.redhat.com/browse/DBZ-7693">DBZ-7693</a>).</p> </div> <div class="paragraph"> <p>There are few things worth noting here:</p> </div> <div class="ulist"> <ul> <li> <p>MariaDB and MySQL both have a common shared dependency on a new abstract connector called <code>debezium-connector-binlog</code>, which provides the common framework for both binlog-based connectors.</p> </li> <li> <p>Each standalone connector now specifically is tailored only to its target database, so MySQL users should use MySQL and MariaDB users should use MariaDB. As a result, the <code>connection.adapter</code> configuration option has been removed, and the <code>jdbc.protocol</code> configuration option is now only specific to certain MySQL use cases and not used by MariaDB.</p> </li> </ul> </div> <div class="paragraph"> <p>The documentation for this connector is still a work-in-progress and will be added in the future. For the moment, you can refer to the MySQL connector documentation for most things related to MariaDB.</p> </div> </div> <div class="sect2"> <h3 id="extractnewdocumentstate_includes_document_id_for_mongodb_deletes">ExtractNewDocumentState includes document id for MongoDB deletes</h3> <div class="paragraph"> <p>In prior release of the MongoDB <code>ExtractNewDocumentState</code> single message transformation, a delete event did not provide the identifier as part of the payload. This reduced the meaningfulness of delete events as consumers were supplied with insufficient data to act on these events. This behavior has been improved, and the delete event now includes an <code>_id</code> attribute in the payload (<a href="https://issues.redhat.com/browse/DBZ-7695">DBZ-7695</a>).</p> </div> </div> <div class="sect2"> <h3 id="transaction_metadata_encoded_ordering">Transaction metadata encoded ordering</h3> <div class="paragraph"> <p>In some pipelines, ordering is critical for consuming applications. There are certain scenarios that can impact this aspect of your data pipeline, such as when Kafka re-partition occur. This leads to problems that can be error-prone trying to reconstruct the ordering after-the-fact.</p> </div> <div class="paragraph"> <p>Now when Transaction Metadata is enabled, these metadata events will also encode their transaction order, so that in the event that a Kafka re-partition or other scenarios occur that alter the ordering semantics, consumers can simply use the new encoded ordering field instead for deterministic ordering of transactions (<a href="https://issues.redhat.com/browse/DBZ-7698">DBZ-7698</a>).</p> </div> </div> <div class="sect2"> <h3 id="blocking_incremental_snapshot_improvements">Blocking incremental snapshot improvements</h3> <div class="paragraph"> <p>There are some use cases where incremental snapshot signals require escaping certain characters in the fully-qualified table name. This caused some problems with blocking snapshots because the process to resolve what tables to snapshot used a slightly different mechanism. In Debezium 2.7, we&#8217;ve unified this approach, and you can now use escaped table names with blocking snapshots where applicable (<a href="https://issues.redhat.com/browse/DBZ-7718">DBZ-7718</a>).</p> </div> </div> <div class="sect2"> <h3 id="cassandra_performance_improvement">Cassandra performance improvement</h3> <div class="paragraph"> <p>The Cassandra connector also saw some changes in Debezium 2.7, specifically to performance optimizations. The implementation of the <code>KafkaRecordEmitter</code> relied on a thread-synchronization block that reduced the throughput. In addition, the implementation also performed some unnecessary flushing which also impacted performance. This code has been rewritten to improve both throughput and reduce the unnecessary flush calls (<a href="https://issues.redhat.com/browse/DBZ-7722">DBZ-7722</a>).</p> </div> </div> <div class="sect2"> <h3 id="new_oracle_rawtostring_custom_converter">New Oracle "RawToString" custom converter</h3> <div class="paragraph"> <p>While Oracle recommends that users avoid using <code>RAW</code>-based columns, these columns are still widely used in standard Oracle tables for backward compatibility reasons. But there are also business use cases where it makes sense to continue to use <code>RAW</code> columns rather than other data types.</p> </div> <div class="paragraph"> <p>Debezium 2.7 introduces a new custom converter specifically for Oracle called <code>RawToStringConverter</code> (<a href="https://issues.redhat.com/browse/DBZ-7753">DBZ-7753</a>). This custom converter is designed to allow you to quickly convert the byte-array contents of the <code>RAW</code> column to a string-based field using a <code>STRING</code> schema type. This can be useful for situations where you use a <code>RAW</code> column to store character data that doesn&#8217;t require the collation overhead of <code>VARCHAR2</code>, but you still have the need for this field to be sent to consumers as string-based data.</p> </div> <div class="paragraph"> <p>To get started with this custom converter, please see the <a href="https://debezium.io/documentation/reference/2.7/connectors/oracle.html#_raw_to_string">documentation</a> for more details.</p> </div> </div> <div class="sect2"> <h3 id="improved_nls_character_set_support_for_oracle">Improved NLS character-set support for Oracle</h3> <div class="paragraph"> <p>When installing the Debezium 2.7 Oracle connector, you may notice a new dependency, <code>orai18n.jar</code>. This dependency is being automatically distributed to provide extended character-set support for certain dialects (<a href="https://issues.redhat.com/browse/DBZ-7761">DBZ-7761</a>).</p> </div> </div> <div class="sect2"> <h3 id="improved_temporal_support_in_vitess">Improved temporal support in Vitess</h3> <div class="paragraph"> <p>Debezium relational connectors rely on a configuration option, <code>time.precision.mode</code>, to control how temporal values are added to change events. In some cases, you may want to use modes that align with Kafka types, using the <code>connect</code> mode. In other cases, you may prefer to avoid precision loss by using the default, <code>adaptive_milliseconds</code> mode.</p> </div> <div class="paragraph"> <p>The Debezium for Vitess connector has traditionally not followed this model, and instead has emitted temporal values as string-based types. While this helps avoid the loss of precision problem when using the <code>connect</code> mode, this adds unnecessary overhead on consumers to parse and manipulate these values.</p> </div> <div class="paragraph"> <p>In Debezium 2.7, Vitess aligns this behavior with other relational connectors, using the <code>time.precision.mode</code> to control how temporal values are sent (<a href="https://issues.redhat.com/browse/DBZ-7773">DBZ-7773</a>). By default, it will use the <code>adaptive_milliseconds</code> mode, but you can customize this to use <code>connect</code> mode if you prefer. The emission of string-based temporal values has been removed.</p> </div> </div> </div> </div> <div class="sect1"> <h2 id="other-changes">Other changes</h2> <div class="sectionbody"> <div class="paragraph"> <p>Altogether, <a href="https://issues.redhat.com/issues/?jql=project%20%3D%20DBZ%20AND%20fixVersion%20%3D%202.7.0.Alpha1%20ORDER%20BY%20component%20ASC">50 issues</a> were fixed in this release. Here are a list of some additional noteworthy changes:</p> </div> <div class="ulist"> <ul> <li> <p>Builtin database name filter is incorrectly applied only to collections instead of databases in snapshot <a href="https://issues.redhat.com/browse/DBZ-7485">DBZ-7485</a></p> </li> <li> <p>Upgrade Debezium Quarkus Outbox to Quarkus 3.9.2 <a href="https://issues.redhat.com/browse/DBZ-7663">DBZ-7663</a></p> </li> <li> <p>After the initial deployment of Debezium, if a new table is added to MSSQL, its schema is was captured <a href="https://issues.redhat.com/browse/DBZ-7697">DBZ-7697</a></p> </li> <li> <p>The test is failing because wrong topics are used <a href="https://issues.redhat.com/browse/DBZ-7715">DBZ-7715</a></p> </li> <li> <p>Incremental Snapshot: read duplicate data when database has 1000 tables <a href="https://issues.redhat.com/browse/DBZ-7716">DBZ-7716</a></p> </li> <li> <p>Handle instability in JDBC connector system tests <a href="https://issues.redhat.com/browse/DBZ-7726">DBZ-7726</a></p> </li> <li> <p>SQLServerConnectorIT.shouldNotStreamWhenUsingSnapshotModeInitialOnly check an old log message <a href="https://issues.redhat.com/browse/DBZ-7729">DBZ-7729</a></p> </li> <li> <p>Fix MongoDB unwrap SMT test <a href="https://issues.redhat.com/browse/DBZ-7731">DBZ-7731</a></p> </li> <li> <p>Snapshot fails with an error of invalid lock <a href="https://issues.redhat.com/browse/DBZ-7732">DBZ-7732</a></p> </li> <li> <p>Column CON_ID queried on V$THREAD is not available in Oracle 11 <a href="https://issues.redhat.com/browse/DBZ-7737">DBZ-7737</a></p> </li> <li> <p>Redis NOAUTH Authentication Error when DB index is specified <a href="https://issues.redhat.com/browse/DBZ-7740">DBZ-7740</a></p> </li> <li> <p>Getting oldest transaction in Oracle buffer can cause NoSuchElementException with Infinispan <a href="https://issues.redhat.com/browse/DBZ-7741">DBZ-7741</a></p> </li> <li> <p>The MySQL Debezium connector is not doing the snapshot after the reset. <a href="https://issues.redhat.com/browse/DBZ-7743">DBZ-7743</a></p> </li> <li> <p>MongoDb connector doesn&#8217;t work with Load Balanced cluster <a href="https://issues.redhat.com/browse/DBZ-7744">DBZ-7744</a></p> </li> <li> <p>Align unwrap tests to respect AT LEAST ONCE delivery <a href="https://issues.redhat.com/browse/DBZ-7746">DBZ-7746</a></p> </li> <li> <p>Exclude reload4j from Kafka connect dependencies in system testsuite <a href="https://issues.redhat.com/browse/DBZ-7748">DBZ-7748</a></p> </li> <li> <p>Pod Security Context not set from template <a href="https://issues.redhat.com/browse/DBZ-7749">DBZ-7749</a></p> </li> <li> <p>Apply MySQL binlog client version 0.29.1 - bugfix: read long value when deserializing gtid transaction&#8217;s length <a href="https://issues.redhat.com/browse/DBZ-7757">DBZ-7757</a></p> </li> <li> <p>Change streaming exceptions are swallowed by BufferedChangeStreamCursor <a href="https://issues.redhat.com/browse/DBZ-7759">DBZ-7759</a></p> </li> <li> <p>Use thread cap only for default value <a href="https://issues.redhat.com/browse/DBZ-7763">DBZ-7763</a></p> </li> <li> <p>Evaluate cached thread pool as the default option for async embedded engine <a href="https://issues.redhat.com/browse/DBZ-7764">DBZ-7764</a></p> </li> <li> <p>Sql-Server connector fails after initial start / processed record on subsequent starts <a href="https://issues.redhat.com/browse/DBZ-7765">DBZ-7765</a></p> </li> <li> <p>Valid resume token is considered invalid which leads to new snapshot with some snapshot modes <a href="https://issues.redhat.com/browse/DBZ-7770">DBZ-7770</a></p> </li> <li> <p>Improve processing speed of async engine processors which use List#get() <a href="https://issues.redhat.com/browse/DBZ-7777">DBZ-7777</a></p> </li> <li> <p>NO_DATA snapshot mode validation throw DebeziumException on restarts if snapshot is not completed <a href="https://issues.redhat.com/browse/DBZ-7780">DBZ-7780</a></p> </li> <li> <p>DDL statement couldn&#8217;t be parsed <a href="https://issues.redhat.com/browse/DBZ-7788">DBZ-7788</a></p> </li> <li> <p>Document potential null values in the after field for lookup full update type <a href="https://issues.redhat.com/browse/DBZ-7789">DBZ-7789</a></p> </li> <li> <p>old class reference in ibmi-connector services <a href="https://issues.redhat.com/browse/DBZ-7795">DBZ-7795</a></p> </li> <li> <p>Documentation for Debezium Scripting mentions wrong property <a href="https://issues.redhat.com/browse/DBZ-7798">DBZ-7798</a></p> </li> <li> <p>Fix invalid date/timestamp check &amp; logging level <a href="https://issues.redhat.com/browse/DBZ-7811">DBZ-7811</a></p> </li> </ul> </div> <div class="paragraph"> <p>A huge thank you to all contributors from the community who worked on this release: <a href="https://github.com/samssh">Amirmohammad Sadat Shokouhi</a>, <a href="https://github.com/jchipmunk">Andrey Pustovetov</a>, <a href="https://github.com/ani-sha">Anisha Mohanty</a>, <a href="https://github.com/Naros">Chris Cranford</a>, <a href="https://github.com/chrisrecalis">Chris Recalis</a>, <a href="https://github.com/jcechace">Jakub Cechacek</a>, <a href="https://github.com/novotnyJiri">Jiri Novotny</a>, <a href="https://github.com/jpechane">Jiri Pechanec</a>, <a href="https://github.com/joschi">Jochen Schalanda</a>, <a href="https://github.com/methodmissing">Lourens Naudé</a>, <a href="https://github.com/mfvitale">Mario Fiore Vitale</a>, <a href="https://github.com/MartinMedek">Martin Medek</a>, <a href="https://github.com/obabec">Ondrej Babec</a>, <a href="https://github.com/rajdangwal">Rajendra Dangwal</a>, <a href="https://github.com/roldanbob">Robert Roldan</a>, <a href="https://github.com/rmoff">Robin Moffatt</a>, <a href="https://github.com/rkudryashov">Roman Kudryashov</a>, <a href="https://github.com/selman-genc-alg">Selman Genç</a>, <a href="https://github.com/twthorn">Thomas Thornton</a>, <a href="https://github.com/vjuranek">Vojtech Juranek</a>, and <a href="https://github.com/ismailsimsek">ismail simsek</a>!</p> </div> </div> </div> <div class="sect1"> <h2 id="whats-next">What&#8217;s next?</h2> <div class="sectionbody"> <div class="paragraph"> <p>Debezium 2.7 is just getting underway and we have a number of additional changes planned, including a MongoDB sink connector, expanding Oracle 23 support, a new SPI to aid in the memory-footprint of certain multi-tenant schema architectures and more. You can find more about what is planned for Debezium 2.7 on our <a href="/docs/roadmap">road map</a>.</p> </div> <div class="paragraph"> <p>The team is also in the final stages of defining our face-to-face agenda. if you have any suggestions or ideas that you would like for us to discuss or would like to see planned in 2.7 or a future release, please feel free to get in touch with us on our <a href="https://groups.google.com/forum/#!forum/debezium">mailing list</a> or in our <a href="https://debezium.zulipchat.com/login/#narrow/stream/302529-users">Zulip chat</a>.</p> </div> <div class="paragraph"> <p>Until next time&#8230;&#8203;</p> </div> </div> </div>]]></content><author><name>Chris Cranford</name></author><category term="releases"/><category term="mongodb"/><category term="mysql"/><category term="mariadb"/><category term="postgres"/><category term="sqlserver"/><category term="cassandra"/><category term="oracle"/><category term="db2"/><category term="vitess"/><category term="outbox"/><category term="spanner"/><category term="jdbc"/><category term="informix"/><category term="ibmi"/><summary type="html"><![CDATA[As the temperature for summer continues to rise, I&#8217;m please to announce that Debezium has some really cool news, Debezium 2.7.0.Alpha1 is now available for testing. This release includes a variety of new changes and improvements across various connectors like MongoDB, MariaDB, MySQL, Oracle, Vitess, and the Kubernetes Operator, to a myriad of subtle fixes and improvements across the entire Debezium portfolio. Let&#8217;s take a moment and dive into some highlights&#8230;&#8203;]]></summary></entry><entry><title type="html">Debezium 2.6.1.Final Released</title><link href="https://debezium.io/blog/2024/04/12/debezium-2-6-1-final-released/" rel="alternate" type="text/html" title="Debezium 2.6.1.Final Released"/><published>2024-04-12T00:00:00+00:00</published><updated>2024-04-12T00:00:00+00:00</updated><id>https://debezium.io/blog/2024/04/12/debezium-2-6-1-final-released</id><content type="html" xml:base="https://debezium.io/blog/2024/04/12/debezium-2-6-1-final-released/"><![CDATA[<div class="paragraph"> <p>I&#8217;m pleased to announce the immediate availability of Debezium <strong>2.6.1.Final</strong>. This release is the first maintenance release that focuses on addressing several critical stability issues with the 2.6.0.Final release, including classpath loading problems with Debezium Server, MongoDB silently stops gathering changes, and a race condition with the Oracle Infinispan buffer implementation.</p> </div> <div class="paragraph"> <p>Let&#8217;s take a few moments and dive into these and more&#8230;&#8203;</p> </div> <div class="paragraph"> <p></p> </div> <div class="sect1"> <h2 id="new-features-and-improvements">New features and improvements</h2> <div class="sectionbody"> <div class="paragraph"> <p>Debezium 2.6.1.Final also introduces many improvements and features, lets take a look at each individually.</p> </div> <div class="sect2"> <h3 id="oracle_raw_data_type_to_string_converter">Oracle RAW data type to STRING converter</h3> <div class="paragraph"> <p>Debezium treats a <code>RAW</code> column type as a series of bytes, and therefore, change events that contain <code>RAW</code> columns use a schema type of <code>BYTES</code>. This is a reasonable default because Debezium does not know the application&#8217;s purpose for using a <code>RAW</code> column, and it is packaging the data from the column as-is. However, this may not be ideal for consumer applications that would prefer the data emitted as a <code>STRING</code> type rather than as <code>BYTES</code>.</p> </div> <div class="paragraph"> <p>To help users, we&#8217;ve introduced a new <code>RawToStringConverter</code>, which automatically emits <code>RAW</code> columns as <code>STRING</code> based types rather than the default of <code>BYTES</code> (<a href="https://issues.redhat.com/browse/DBZ-7753">DBZ-7753</a>).</p> </div> <div class="paragraph"> <p>To configure the converter, simply add the following configuration:</p> </div> <div class="listingblock"> <div class="content"> <pre class="CodeRay highlight"><code data-lang="properties">converters=raw-to-string
converters.raw-to-string.type=io.debezium.connector.oracle.converters.RawToStringConverter
converters.raw-to-string.selector=.*.MY_TABLE.MY_RAW_COLUMN</code></pre> </div> </div> <div class="paragraph"> <p>The <code>selector</code> property allows the converter to specifically target one or multiply <code>RAW</code> columns across one or more tables by providing a comma-separated list of regular expressions.</p> </div> <div class="admonitionblock important"> <table> <tr> <td class="icon"> <i class="fa icon-important" title="Important"></i> </td> <td class="content"> <div class="paragraph"> <p>The <code>selector</code> property is optional, and if omitted, the converter applies to <em>ALL</em> <code>RAW</code> columns.</p> </div> </td> </tr> </table> </div> </div> </div> </div> <div class="sect1"> <h2 id="important-fixes">Fixes and stability improvements</h2> <div class="sectionbody"> <div class="sect2"> <h3 id="debezium_server_snapshotting_fixed">Debezium Server snapshotting fixed</h3> <div class="paragraph"> <p>If you attempted to perform or re-execute the snapshot phase with Debezium Server in 2.6.0.Final, the process would fail with an error about acquiring a lock. This was quickly identified as it severely affected the ability to use any Debezium Connector under Debezium Server based on 2.6.0.Final.</p> </div> <div class="paragraph"> <p>We have adjusted how we resolve the components needed for the new Snapshotter API so that when multiple connectors exist on the same class path, the resolution appropriate picks the right component. In addition, we&#8217;ve also improved the Debezium Server test suite to look specifically for these types of issues moving forward to avoid the potential release of such a build that has similar problems.</p> </div> <div class="admonitionblock tip"> <table> <tr> <td class="icon"> <i class="fa icon-tip" title="Tip"></i> </td> <td class="content"> <div class="paragraph"> <p>Debezium Server users should move to 2.6.1.Final and not use 2.6.0.Final.</p> </div> </td> </tr> </table> </div> </div> </div> </div> <div class="sect1"> <h2 id="other_fixes">Other fixes</h2> <div class="sectionbody"> <div class="ulist"> <ul> <li> <p>Incremental Snapshot: read duplicate data when database has 1000 tables <a href="https://issues.redhat.com/browse/DBZ-7716">DBZ-7716</a></p> </li> <li> <p>SQLServerConnectorIT.shouldNotStreamWhenUsingSnapshotModeInitialOnly check an old log message <a href="https://issues.redhat.com/browse/DBZ-7729">DBZ-7729</a></p> </li> <li> <p>Snapshot fails with an error of invalid lock <a href="https://issues.redhat.com/browse/DBZ-7732">DBZ-7732</a></p> </li> <li> <p>Column CON_ID queried on V$THREAD is not available in Oracle 11 <a href="https://issues.redhat.com/browse/DBZ-7737">DBZ-7737</a></p> </li> <li> <p>Redis NOAUTH Authentication Error when DB index is specified <a href="https://issues.redhat.com/browse/DBZ-7740">DBZ-7740</a></p> </li> <li> <p>Getting oldest transaction in Oracle buffer can cause NoSuchElementException with Infinispan <a href="https://issues.redhat.com/browse/DBZ-7741">DBZ-7741</a></p> </li> <li> <p>The MySQL Debezium connector is not doing the snapshot after the reset. <a href="https://issues.redhat.com/browse/DBZ-7743">DBZ-7743</a></p> </li> <li> <p>MongoDb connector doesn&#8217;t work with Load Balanced cluster <a href="https://issues.redhat.com/browse/DBZ-7744">DBZ-7744</a></p> </li> <li> <p>Pod Security Context not set from template <a href="https://issues.redhat.com/browse/DBZ-7749">DBZ-7749</a></p> </li> <li> <p>Apply MySQL binlog client version 0.29.1 - bugfix: read long value when deserializing gtid transaction&#8217;s length <a href="https://issues.redhat.com/browse/DBZ-7757">DBZ-7757</a></p> </li> <li> <p>Change streaming exceptions are swallowed by BufferedChangeStreamCursor <a href="https://issues.redhat.com/browse/DBZ-7759">DBZ-7759</a></p> </li> <li> <p>Sql-Server connector fails after initial start / processed record on subsequent starts <a href="https://issues.redhat.com/browse/DBZ-7765">DBZ-7765</a></p> </li> <li> <p>Valid resume token is considered invalid which leads to new snapshot with some snapshot modes <a href="https://issues.redhat.com/browse/DBZ-7770">DBZ-7770</a></p> </li> </ul> </div> <div class="paragraph"> <p>In total there were <a href="https://issues.redhat.com/issues/?jql=project%20%3D%20DBZ%20and%20fixVersion%20%20in%20(2.6.1.Final">14 issues</a> resolved in Debezium 2.6.1.Final. The list of changes can also be found in our <a href="https://debezium.io/releases/2.6">release notes</a>.</p> </div> <div class="paragraph"> <p>A big thank you to all the contributors from the community who worked diligently on this release: <a href="https://github.com/jchipmunk">Andrey Pustovetov</a>, <a href="https://github.com/ani-sha">Anisha Mohanty</a>, <a href="https://github.com/Naros">Chris Cranford</a>, <a href="https://github.com/chrisrecalis">Chris Recalis</a>, <a href="https://github.com/jcechace">Jakub Cechacek</a>, <a href="https://github.com/jpechane">Jiri Pechanec</a>, <a href="https://github.com/methodmissing">Lourens Naudé</a>, <a href="https://github.com/mfvitale">Mario Fiore Vitale</a>, <a href="https://github.com/roldanbob">Robert Roldan</a>, and <a href="https://github.com/selman-genc-alg">Selman Genç</a>!</p> </div> </div> </div>]]></content><author><name>Chris Cranford</name></author><category term="releases"/><category term="mongodb"/><category term="mysql"/><category term="mariadb"/><category term="postgres"/><category term="sqlserver"/><category term="cassandra"/><category term="oracle"/><category term="db2"/><category term="vitess"/><category term="outbox"/><category term="spanner"/><category term="jdbc"/><category term="informix"/><category term="ibmi"/><summary type="html"><![CDATA[I&#8217;m pleased to announce the immediate availability of Debezium 2.6.1.Final. This release is the first maintenance release that focuses on addressing several critical stability issues with the 2.6.0.Final release, including classpath loading problems with Debezium Server, MongoDB silently stops gathering changes, and a race condition with the Oracle Infinispan buffer implementation. Let&#8217;s take a few moments and dive into these and more&#8230;&#8203;]]></summary></entry><entry><title type="html">Debezium 2.6.0.Final Released</title><link href="https://debezium.io/blog/2024/04/02/debezium-2-6-final-released/" rel="alternate" type="text/html" title="Debezium 2.6.0.Final Released"/><published>2024-04-02T00:00:00+00:00</published><updated>2024-04-02T00:00:00+00:00</updated><id>https://debezium.io/blog/2024/04/02/debezium-2-6-final-released</id><content type="html" xml:base="https://debezium.io/blog/2024/04/02/debezium-2-6-final-released/"><![CDATA[<div class="paragraph"> <p>As the team has sprung forward into action, with spring upon us, and we&#8217;re in the summer spirit, we are pleased to announce the immediate release of Debezium <strong>2.6.0.Final</strong>. This release includes dozens of new features, bug fixes, and improvements from the valiant efforts of the team and community contributors. Overall, there were <a href="https://issues.redhat.com/issues/?jql=project%20%3D%20DBZ%20and%20fixVersion%20%20in%20(2.6.0.Alpha1%2C%202.6.0.Alpha2%2C%202.6.0.Beta1%2C%202.6.0.CR1%2C%202.6.0.Final">249 issues</a> resolved with contributions from over <strong>56</strong> contributors. Lets a moment and review all the changes.</p> </div> <div class="paragraph"> <p></p> </div> <div class="sect1"> <h2 id="breaking-changes">Breaking changes</h2> <div class="sectionbody"> <div class="paragraph"> <p>While we try to avoid any potential breaking changes between minor releases, such changes are sometimes inevitable. The upgrade to Debezium 2.6 includes a total of 7 unique breaking changes:</p> </div> <div class="dlist"> <dl> <dt class="hdlist1">MySQL</dt> <dd> <div class="ulist"> <ul> <li> <p>The MysQL driver was updated to version 8.3.0, and this driver is not compatible with MySQL 5.x. If you still need to use an older MySQL version, please downgrade the driver after installation to a version that is compatible with your database (<a href="https://issues.redhat.com/browse/DBZ-7652">DBZ-7652</a>).</p> </li> </ul> </div> </dd> <dt class="hdlist1">MongoDB</dt> <dd> <div class="ulist"> <ul> <li> <p>The MongoDB connector no longer supports the <code>replica_set</code> mode (<a href="https://issues.redhat.com/browse/DBZ-7260)">DBZ-7260</a>). This has been a feature that has been deprecated for several versions and there has been ongoing work over Debezium 2.x to achieve this goal. If you are using the <code>replica_set</code> mode, you will need to make adjustments when using Debezium 2.6+.</p> </li> </ul> </div> </dd> <dt class="hdlist1">SQL Server</dt> <dd> <div class="ulist"> <ul> <li> <p>The SQL Server connector was not capturing all schemas when the connector was first deployed, and instead, was only capturing the schemas based on the tables defined in the configuration&#8217;s include list. This was a bug that could prevent users from easily adding new tables to the connector when expecting that the new table&#8217;s schema would already exist in the schema history topic. The connector now correctly honors the <code>store.only.captured.tables.ddl</code> configuration option (<a href="https://issues.redhat.com/browse/DBZ-7593">DBZ-7593</a>).<br> <br> For existing connector deployments, if you do not specifically set the <code>store.only.captured.tables.ddl</code> property for the schema history topic, the connector will begin capturing schema changes for all relevant tables in your database. If you want to prevent this and retain the prior behavior, you will need to adjust your connector configuration by adding <code>schema.history.internal.store.only.captured.tables.ddl</code> with a value of <code>true</code>.</p> </li> </ul> </div> </dd> <dt class="hdlist1">Oracle</dt> <dd> <div class="ulist"> <ul> <li> <p>In older versions of Debezium, users were required to manually install the <code>ojdbc8.jar</code> JDBC driver. With 2.6, the connector now bundles the Oracle JDBC driver with the connector, so manual installation is no longer necessary (<a href="https://issues.redhat.com/browse/DBZ-7364">DBZ-7364</a>).</p> </li> </ul> </div> </dd> </dl> </div> <div class="admonitionblock note"> <table> <tr> <td class="icon"> <i class="fa icon-note" title="Note"></i> </td> <td class="content"> <div class="paragraph"> <p>We&#8217;ve also updated the driver to version <code>21.11.0.0</code>, please verify that you do not have multiple versions after upgrading to Debezium 2.6 (<a href="https://issues.redhat.com/browse/DBZ-7365">DBZ-7365</a>).</p> </div> </td> </tr> </table> </div> <div class="dlist"> <dl> <dt class="hdlist1">Vitess</dt> <dd> <div class="ulist"> <ul> <li> <p>The task configuration format used by previous versions of the connector could de-stabilize the Kafka Connect cluster. To resolve the problem, Debezium 2.6 introduces a new configuration format that is incompatible with the previous format (<a href="https://issues.redhat.com/browse/DBZ-7250">DBZ-7250</a>). When upgrading, you may experience a <code>NullPointerException</code> and the error indicating that the connector was unable to instantiate a task because it contains an invalid task configuration.<br> <br> If you experience this problem, delete and re-create the connector, using the same name and configuration as before. The connector(s) will start and re-use the offsets last stored by using the same name, but will not re-use the old task configurations, avoiding the start-up failure. <br></p> </li> <li> <p>The Vitess connector previously used the timestamp of <code>BEGIN</code> message as the source timestamp. This has been changed to the usage of the <code>COMMIT</code> timestamp to reflect the behaviour of other connectors (<a href="https://issues.redhat.com/browse/DBZ-7628">DBZ-7628</a>).</p> </li> </ul> </div> </dd> <dt class="hdlist1">Container Images</dt> <dd> <div class="ulist"> <ul> <li> <p>The handling of the <code>MAVEN_DEP_DESTINATION</code> environment variable has changed in the <code>connect-base</code> container image, which is the basis for <code>debezium/connect</code>. It is no longer used for downloading all dependencies, including connectors, but only for general purpose Maven Central located dependencies (<a href="https://issues.redhat.com/browse/DBZ-7551">DBZ-7551</a>). If you were using custom images that relied on this environment variable, your image build steps may require modifications.</p> </li> </ul> </div> </dd> </dl> </div> </div> </div> <div class="sect1"> <h2 id="new-features-and-improvements">New features and improvements</h2> <div class="sectionbody"> <div class="paragraph"> <p>Debezium 2.6 also introduces many improvements and features, lets take a look at each individually.</p> </div> <div class="sect2"> <h3 id="db2_for_iseries_connector">Db2 for iSeries connector</h3> <div class="paragraph"> <p>Debezium 2.6 introduces a brand-new connector for IBM fans to stream changes from Db2 iSeries/AS400 using the IBM iJournal system. This collaboration is a multi-year development effort from the community, and we&#8217;re pleased that the community has allowed this to be distributed under the Debezium umbrella.</p> </div> <div class="paragraph"> <p>The new connector can be obtained from Maven Central using the following coordinates or a <a href="https://repo1.maven.org/maven2/io/debezium/debezium-connector-ibmi/2.6.0.Beta1/debezium-connector-ibmi-2.6.0.Beta1-plugin.zip">direct download</a>.</p> </div> <div class="listingblock"> <div class="content"> <pre class="CodeRay highlight"><code data-lang="xml"><span class="tag">&lt;dependency&gt;</span>
    <span class="tag">&lt;groupId&gt;</span>io.debezium<span class="tag">&lt;/groupId&gt;</span>
    <span class="tag">&lt;artifactId&gt;</span>debezium-connector-ibmi<span class="tag">&lt;/artifactId&gt;</span>
    <span class="tag">&lt;version&gt;</span>2.6.0.Beta1<span class="tag">&lt;/version&gt;</span>
<span class="tag">&lt;/dependency&gt;</span></code></pre> </div> </div> <div class="admonitionblock note"> <table> <tr> <td class="icon"> <i class="fa icon-note" title="Note"></i> </td> <td class="content"> <div class="paragraph"> <p>The documentation for this new connector is still a work-in-progress. If you have any questions, please be sure to reach out to the team on Zulip or the mailing list.</p> </div> </td> </tr> </table> </div> </div> <div class="sect2"> <h3 id="java_17_now_compile_time_requirement">Java 17 now compile-time requirement</h3> <div class="paragraph"> <p>Debezium 3.0 which will debut later this fall will once again shift the Java baseline requirement from Java 11 to 17 to use Debezium. In preparation for Debezium 3 later this year, we are making the shift to a compile-time baseline for Debezium 2.6 and 2.7 to require Java 17 (<a href="https://issues.redhat.com/browse/DBZ-7387">DBZ-7387</a>).</p> </div> <div class="paragraph"> <p>If you are a Debezium user, and you consume Debezium connectors, this will require no action on your part. You can continue to use Java 11 for now without issue, understanding that Debezium 3 will require Java 17 later this year.</p> </div> <div class="paragraph"> <p>If you are developing Debezium connectors, Java 17 is now baseline to compile the Debezium source. If you have been using Java 17, there should be no action taken on your part. If you previously were using Java 11, you will need to move to Java 17 in order to compile from source.</p> </div> <div class="paragraph"> <p>If you are using the Debezium Quarkus Outbox Extension (not the Outbox SMT), as Quarkus 3.7+ is making the move to Java 17 as their baseline, the Debezium Quarkus Outbox Extension will now require Java 17 as a baseline for both runtime and compile time.</p> </div> <div class="paragraph"> <p>We expect this transition to be mostly seamless for most users as this should have absolutely no impact on the runtime of Debezium&#8217;s connectors nor Debezium Server at this time.</p> </div> </div> <div class="sect2"> <h3 id="asynchronous_embedded_engine">Asynchronous Embedded Engine</h3> <div class="paragraph"> <p>If you&#8217;re hearing about the Embedded Engine for the first time, Debezium ships with three ways to run Debezium connectors. The most common is to deploy Debezium on Kafka Connect while the second most common is to use Debezium Server, a read-made runtime for Debezium connectors. However, there is a third option called the Embedded Engine, and it is what Debezium uses internally for its test suite, it&#8217;s the foundation for Debezium Server, and it&#8217;s meant to provide a way to embed Debezium connectors inside your own application. The embedded engine is used by a variety of external contributors and frameworks, most notably Apache Flink heavily relies on the embedded engine for their Debezium based CDC connectors.</p> </div> <div class="paragraph"> <p>One of the biggest and major new features of Debezium 2.6 is the work on the asynchronous embedded engine that we are debuting in this alpha release. This new asynchronous version the foundation for which Debezium Server and the future of embedding Debezium is based. This change focuses on several key goals and initiatives:</p> </div> <div class="ulist"> <ul> <li> <p>Run multiple source tasks for a given connector, if the connector supports multiple tasks</p> </li> <li> <p>Run time-consuming code (transformations or serialization) in dedicated threads</p> </li> <li> <p>Allow additional performance by disabling event dispatch order</p> </li> <li> <p>Provide future technology benefits of things such as virtual threads and delegating to external workers</p> </li> <li> <p>Better integration with Debezium Operator for Kubernetes and Debezium UI</p> </li> <li> <p>Seamlessly integrate with Quarkus for Debezium Server</p> </li> </ul> </div> <div class="paragraph"> <p>What this new asynchronous model does not include or focus on are the following:</p> </div> <div class="ulist"> <ul> <li> <p>Implement parallelization inside a connector&#8217;s main capture loop.</p> </li> <li> <p>Remove any dependency from Kafka Connect</p> </li> <li> <p>Add support for multiple source connectors per Engine deployment</p> </li> <li> <p>Add support for sink connectors</p> </li> </ul> </div> <div class="admonitionblock note"> <table> <tr> <td class="icon"> <i class="fa icon-note" title="Note"></i> </td> <td class="content"> <div class="paragraph"> <p>Even if a connector is single-threaded and does not support multiple tasks, a connector deployment using the Embedded Engine or Debezium Server can take advantage of the new asynchronous model. A large portion of time during even dispatch is spent on transformation and serialization phases, so utilizing the new dedicated worker threads for such stages improves throughput.</p> </div> </td> </tr> </table> </div> <div class="paragraph"> <p>For developers who want to get started with the new asynchronous embedded engine, a new package is now included in the <code>debezium-embedded</code> artifact called <code>io.debezium.embedded.async</code> and this package contains all the pertinent components to utilizing this new implementation. The asynchronous model can be constructed in a similar way to the serial version using the builder pattern, shown below.</p> </div> <div class="listingblock"> <div class="content"> <pre class="CodeRay highlight"><code data-lang="java"><span class="directive">final</span> DebeziumEngine engine = <span class="keyword">new</span> AsyncEngine.AsyncEngineBuilder()
    .using(properties)
    .notifying(<span class="local-variable">this</span>::changeConsumerHandler)
    .build();</code></pre> </div> </div> <div class="paragraph"> <p>We encourage everyone to take a look at the new Asynchronous Embedded Engine model, let us know your thoughts and if you spot any bugs or problems. We will be updating the documentation in coming releases to highlight all the benefits and changes, including examples. Until then, you can find all the details in the design document, <a href="https://github.com/vjuranek/debezium-design-documents/blob/DBZ-7073/DDD-7.md">DDD-7</a>.</p> </div> </div> <div class="sect2"> <h3 id="new_unified_snapshot_modes">New Unified Snapshot Modes</h3> <div class="paragraph"> <p>The snapshot process is an integral part of each connector&#8217;s lifecycle, and it&#8217;s responsible for collecting and sending all the historical data that exists in your data store to your target systems, if desired. For Debezium users who work with multiple connector types, we understand that having differing snapshot modes across connectors can sometimes be confusing to work with. So this change is designed to address that.</p> </div> <div class="paragraph"> <p>For many of you who may have already tried or installed Debezium 2.6 pre-releases, you&#8217;re already using the unified snapshot SPI as it was designed to be a drop-in-replacement initially, requiring no changes. This release finishes that work for MongoDB and DB2.</p> </div> <div class="paragraph"> <p>Of these changes, the most notable include the following:</p> </div> <div class="ulist"> <ul> <li> <p>All snapshot modes are available to all connectors, excluding <code>never</code> which remains specific to MySQL. This means that connectors that may have previously not supported a snapshot mode, such as <code>when_needed</code>, can now use this mode to retake a snapshot when the connector identifies that its necessary.</p> </li> <li> <p>The <code>schema_only_recovery</code> mode has been deprecated and replaced by <code>recovery</code>.</p> </li> <li> <p>The <code>schema_only</code> mode has also been deprecated and replaced by <code>no_data</code>.</p> </li> </ul> </div> <div class="admonitionblock important"> <table> <tr> <td class="icon"> <i class="fa icon-important" title="Important"></i> </td> <td class="content"> <div class="paragraph"> <p>All deprecated modes will remain available until Debezium 3 later this year. This provides users with about six months to adjust scripts, configurations, and processes in advance.</p> </div> </td> </tr> </table> </div> </div> <div class="sect2"> <h3 id="new_matching_collections_api_added">New Matching Collections API added</h3> <div class="paragraph"> <p>One of the team&#8217;s ongoing tasks include the migration of Debezium UI&#8217;s backend into the main Debezium repository. One of the unique benefits with doing this is we can identify where there is code overlap between a connector&#8217;s runtime and the UI, and develop interface contracts to expose this shared data.</p> </div> <div class="paragraph"> <p>Thanks to a community contribution for <a href="https://issues.redhat.com/browse/DBZ-7167">DBZ-7167</a>, the <code>RelationalBaseSourceConnector</code> contract has been adjusted and a new method introduced to return a list of table names that match the connector&#8217;s specific configuration. Any connector that implements this abstract base class will need to implement this new method.</p> </div> </div> <div class="sect2"> <h3 id="source_transaction_id_changes">Source transaction id changes</h3> <div class="paragraph"> <p>All Debezium change events contain a special metadata block called the <code>source</code> information block. This part of the event payload is responsible for providing metadata about the change event, including the unique identifier of the change, the time the change happened, the database and table the change is in reference to, as well as transaction metadata about the transaction that the change participated in.</p> </div> <div class="paragraph"> <p>In Debezium 2.6, the <code>transaction_id</code> field in the source information block will no longer be provided unless the field is populated with a value. This should present no issue for users as this field was only populated when the connector was configured with <code>provide.transaction.metadata</code> set to <code>true</code> (<a href="https://issues.redhat.com/browse/DBZ-7380">DBZ-7380</a>).</p> </div> <div class="paragraph"> <p>If you have tooling that expects the existence of the source information block&#8217;s <code>transaction_id</code> field although its optional, you will need to adjust that behavior as the field will no longer be present unless populated.</p> </div> </div> <div class="sect2"> <h3 id="improved_event_timestamp_precision">Improved event timestamp precision</h3> <div class="paragraph"> <p>Debezium 2.6 introduces a new community requested feature to improve the precision of timestamps in change events. Users will now notice the addition of 4 new fields, two at the envelope level and two in the <code>source</code> information block as shown below:</p> </div> <div class="listingblock"> <div class="content"> <pre class="CodeRay highlight"><code data-lang="json">{
  <span class="key"><span class="delimiter">&quot;</span><span class="content">source</span><span class="delimiter">&quot;</span></span>: {
    <span class="error">.</span><span class="error">.</span><span class="error">.</span>,
    <span class="key"><span class="delimiter">&quot;</span><span class="content">ts_us</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">1559033904863123</span><span class="delimiter">&quot;</span></span>,
    <span class="key"><span class="delimiter">&quot;</span><span class="content">ts_ns</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">1559033904863123000</span><span class="delimiter">&quot;</span></span>
  },
  <span class="key"><span class="delimiter">&quot;</span><span class="content">ts_us</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">1580390884335451</span><span class="delimiter">&quot;</span></span>,
  <span class="key"><span class="delimiter">&quot;</span><span class="content">ts_ns</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">1580390884335451325</span><span class="delimiter">&quot;</span></span>,
}</code></pre> </div> </div> <div class="paragraph"> <p>The envelope values will always provide both microsecond (<code>ts_us</code>) and nanosecond (<code>ts_ns</code>) values while the <code>source</code> information block may have both micro and nano -second precision values truncated to a lower precision if the source database does not provide that level of precision.</p> </div> </div> <div class="sect2"> <h3 id="scoped_keytrust_store_support_with_mongodb">Scoped Key/Trust - store support with MongoDB</h3> <div class="paragraph"> <p>Debezium supports secure connections; however, MongoDB requires that the key/trust -store configurations be supplied as JVM process arguments, which is less than ideal for environments like the cloud. As a first step toward aligning how secure connection configuration is specified across our connectors, Debezium 2.6 for MongoDB now supports specifying scoped key/trust -store configurations in the connector configuration (<a href="https://issues.redhat.com/browse/DBZ-7379">DBZ-7379</a>).</p> </div> <div class="paragraph"> <p>The MongoDB connector now includes the following new configuration properties:</p> </div> <div class="dlist"> <dl> <dt class="hdlist1"><code>mongodb.ssl.keystore</code></dt> <dd> <p>Specifies the path to the SSL keystore file.</p> </dd> <dt class="hdlist1"><code>mongodb.ssl.keystore.password</code></dt> <dd> <p>Specifies the credentials to open and access the SSL keystore provided by <em>mongodb.ssl.keystore</em>.</p> </dd> <dt class="hdlist1"><code>mongodb.ssl.keystore.type</code></dt> <dd> <p>Specifies the SSL keystore file type, defaults to <code>PKC512</code>.</p> </dd> <dt class="hdlist1"><code>mongodb.ssl.truststore</code></dt> <dd> <p>Specifies the path to the SSL truststore file.</p> </dd> <dt class="hdlist1"><code>mongodb.ssl.truststore.password</code></dt> <dd> <p>Specifies the credentials to open and access the SSL truststore provided by <em>mongodb.ssl.truststore</em>.</p> </dd> <dt class="hdlist1"><code>mongodb.ssl.truststore.type</code></dt> <dd> <p>Specifies the SSL truststore file type, defaults to <code>PKC512</code>.</p> </dd> </dl> </div> </div> <div class="sect2"> <h3 id="mongodb_uuid_key_support_for_incremental_snapshots">MongoDB UUID key support for Incremental snapshots</h3> <div class="paragraph"> <p>As a small improvement to the Incremental Snapshot process for the Debezium for MongoDB connector, Debezium 2.6 adds support for the UUID data type, allowing this data type to be used within the Incremental Snapshot process like other data types (<a href="https://issues.redhat.com/browse/DBZ-7451">DBZ-7451</a>).</p> </div> </div> <div class="sect2"> <h3 id="mongodb_post_image_changes">MongoDB post-image changes</h3> <div class="paragraph"> <p>The MongoDB connector&#8217;s event payload can be configured to include the full document that was changed in an update. The connector previously made an opinionated choice about how the full document would be fetched as part of the change stream; however, this behavior was not consistent with our expectations in all use cases.</p> </div> <div class="paragraph"> <p>Debezium 2.6 introduces a new configuration option, <code>capture.mode.full.update.type</code>, allowing the connector to explicitly control how the change stream&#8217;s full document lookup should be handled (<a href="https://issues.redhat.com/browse/DBZ-7299">DBZ-7299</a>). The default value for this option is <code>lookup</code>, meaning that the database will make a separate look-up to fetch the full document. If you are working with MongoDB 6+, you can also elect to use <code>post_image</code> to rely on MongoDB change stream&#8217;s post-image support.</p> </div> </div> <div class="sect2"> <h3 id="incremental_snapshot_row_value_constructors_for_postgresql">Incremental snapshot row-value constructors for PostgreSQL</h3> <div class="paragraph"> <p>The PostgreSQL driver supports a SQL syntax called a row-value constructor using the <code>ROW()</code> function. This allows a query to express predicate conditions in a more efficient way when working with multi-columned primary keys that have a suitable index. The incremental snapshot process is an ideal candidate for the use of the <code>ROW()</code> function, the process involves issuing a series of select SQL statements to fetch data in chunks. Each statement, aka chunk query, should ideally be as efficient as possible to minimize the cost overhead of these queries to maximize throughput of your WAL changes to your topics.</p> </div> <div class="paragraph"> <p>There are no specific changes needed, but the query issued for PostgreSQL incremental snapshots has been adjusted to take advantage of this new syntax, and therefore users who utilize incremental snapshots should see performance improvements.</p> </div> <div class="paragraph"> <p>An example of the old query used might look like this for a simple table:</p> </div> <div class="listingblock"> <div class="content"> <pre class="CodeRay highlight"><code data-lang="sql"><span class="class">SELECT</span> *
  <span class="keyword">FROM</span> users
 <span class="keyword">WHERE</span> (a = <span class="integer">10</span> <span class="keyword">AND</span> (b &gt; <span class="integer">2</span> <span class="keyword">OR</span> b <span class="keyword">IS</span> <span class="predefined-constant">NULL</span>)) <span class="keyword">OR</span> (a &gt; <span class="integer">10</span>) <span class="keyword">OR</span> (a <span class="keyword">IS</span> <span class="predefined-constant">NULL</span>)
 <span class="keyword">ORDER</span> <span class="keyword">BY</span> a, b LIMIT <span class="integer">1024</span></code></pre> </div> </div> <div class="paragraph"> <p>The new implementation constructs this query using the <code>ROW()</code> function as follows:</p> </div> <div class="listingblock"> <div class="content"> <pre class="CodeRay highlight"><code data-lang="sql"><span class="class">SELECT</span> *
  <span class="keyword">FROM</span> users
 <span class="keyword">WHERE</span> <span class="type">row</span>(a,b) &gt; <span class="type">row</span>(<span class="integer">10</span>,<span class="integer">2</span>)
<span class="keyword">ORDER</span> <span class="keyword">BY</span> a, b LIMIT <span class="integer">1024</span></code></pre> </div> </div> <div class="paragraph"> <p>We&#8217;d be interested in any feedback on this change, and what performance improvements are observed.</p> </div> </div> <div class="sect2"> <h3 id="sql_server_query_improvements">SQL Server query improvements</h3> <div class="paragraph"> <p>The Debezium SQL Server utilizes a common SQL Server stored procedure called <code>fn_cdc_get_all_changes&#8230;&#8203;</code> to fetch all the relevant captured changes for a given table. This query performs several unions and only ever returns data from one of the union sub-queries, which can be inefficient.</p> </div> <div class="paragraph"> <p>Debezium 2.6 for SQL Server introduces a new configuration property <code>data.query.mode</code> that can be used to influence which specific method the connector will use to gather the details about table changes (<a href="https://issues.redhat.com/browse/DBZ-7273">DBZ-7273</a>). The default remains unchanged from older releases, using the value <code>function</code> to delegate to the above aforementioned stored procedure. A new option, called <code>direct</code>, can be used instead to build the query directly within the connector to gather the changes more efficiently.</p> </div> </div> <div class="sect2"> <h3 id="oracle_infinispan_cache_improvements">Oracle Infinispan cache improvements</h3> <div class="paragraph"> <p>The Debezium Oracle connector maintains a buffer of all in-flight transactions, and this buffer can be allocated off-heap using Infinispan. Sometimes, the user configuration specifies that if an in-flight transaction lasts longer than the specified number of milliseconds, the transaction can be abandoned or discarded by the buffer. This means that the transaction will be forgotten and not emitted by the connector.</p> </div> <div class="paragraph"> <p>In order to improve metrics integration with frameworks like Grafana and Prometheus, a new JMX metric, <code>AbandonedTransactionCount</code>, was added to track the number of transactions that are abandoned by the connector during it&#8217;s runtime.</p> </div> </div> <div class="sect2"> <h3 id="oracle_redo_sql_per_event_with_logminer">Oracle Redo SQL per event with LogMiner</h3> <div class="paragraph"> <p>We have improved the Oracle connector&#8217;s event structure for inserts, updates, and deletes to optionally contain the SQL that was reconstructed by LogMiner in the <code>source</code> information block. This feature is an opt-in only feature that you must enable as this can easily more than double the size of your existing event payload.</p> </div> <div class="paragraph"> <p>To enable the inclusion of the REDO SQL as part of the change event, add the following connector configuration:</p> </div> <div class="listingblock"> <div class="content"> <pre class="CodeRay highlight"><code data-lang="json"><span class="key"><span class="delimiter">&quot;</span><span class="content">log.mining.include.redo.sql</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">true</span><span class="delimiter">&quot;</span></span></code></pre> </div> </div> <div class="paragraph"> <p>With this option enabled, the <code>source</code> information block contains a new field <code>redo_sql</code>, as shown below:</p> </div> <div class="listingblock"> <div class="content"> <pre class="CodeRay highlight"><code data-lang="json"><span class="key"><span class="delimiter">&quot;</span><span class="content">source</span><span class="delimiter">&quot;</span></span>: {
  <span class="error">.</span><span class="error">.</span><span class="error">.</span>
  <span class="key"><span class="delimiter">&quot;</span><span class="content">redo_sql</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">INSERT INTO </span><span class="char">\&quot;</span><span class="content">DEBEZIUM</span><span class="char">\&quot;</span><span class="content">.</span><span class="char">\&quot;</span><span class="content">TEST</span><span class="char">\&quot;</span><span class="content"> (</span><span class="char">\&quot;</span><span class="content">ID</span><span class="char">\&quot;</span><span class="content">,</span><span class="char">\&quot;</span><span class="content">DATA</span><span class="char">\&quot;</span><span class="content">) values ('1', 'Test');</span><span class="delimiter">&quot;</span></span>
}</code></pre> </div> </div> <div class="admonitionblock warning"> <table> <tr> <td class="icon"> <i class="fa icon-warning" title="Warning"></i> </td> <td class="content"> <div class="paragraph"> <p>This feature cannot be used with <code>lob.enabled</code> set to <code>true</code> due to how LogMiner reconstructs the SQL related to CLOB, BLOB, and XML data types. If the above configuration is added with <code>lob.enabled</code> set to <code>true</code>, the connector will start with an error about this misconfiguration.</p> </div> </td> </tr> </table> </div> </div> <div class="sect2"> <h3 id="oracle_logminer_transaction_buffer_improvements">Oracle LogMiner transaction buffer improvements</h3> <div class="paragraph"> <p>A new delay-strategy for transaction registration has been added when using LogMiner. This strategy effectively delays the creation of the transaction record in the buffer until we observe the first captured change for that transaction.</p> </div> <div class="admonitionblock note"> <table> <tr> <td class="icon"> <i class="fa icon-note" title="Note"></i> </td> <td class="content"> <div class="paragraph"> <p>For users who use the Infinispan cache or who have enabled <code>lob.enabled</code>, this delayed strategy cannot be used due to how specific operations are handled in these two modes of the connector.</p> </div> </td> </tr> </table> </div> <div class="paragraph"> <p>Delaying transaction registration has a number of benefits, which include:</p> </div> <div class="ulist"> <ul> <li> <p>Reducing the overhead on the transaction cache, especially in a highly concurrent transaction scenario.</p> </li> <li> <p>Avoids long-running transactions that have no changes that are being captured by the connector.</p> </li> <li> <p>Should aid in advancing the low-watermark SCN in the offsets more efficiently in specific scenarios.</p> </li> </ul> </div> <div class="paragraph"> <p>We are looking into how we can explore this change for Infinispan-based users in a future build; however, due to the nature of how <code>lob.enabled</code> works with LogMiner, this feature won&#8217;t be possible for that use case.</p> </div> </div> <div class="sect2"> <h3 id="oracle_logminer_hybrid_mining_strategy">Oracle LogMiner Hybrid Mining Strategy</h3> <div class="paragraph"> <p>Debezium 2.6 also introduces a new Oracle LogMiner mining strategy called <em>hyrid</em>, which can be enabled by setting the configuration property <code>log.mining.strategy</code> with the value of <code>hybrid</code>. This new strategy is designed to support all schema evolution features of the default mining strategy while taking advantage of all the performance optimizations from the online catalog strategy.</p> </div> <div class="paragraph"> <p>The main problem with the <code>online_catalog</code> strategy is that if a mining step observes a schema change and a data change in the same mining step, LogMiner is incapable of reconstructing the SQL correctly, which will result in the table name being <code>OBJ# xxxxxx</code> or the columns represented as <code>COL1</code>, <code>COL2</code>, and so on. To avoid this while using the online catalog strategy, users are recommended to perform schema changes in a lock-step pattern to avoid a mining step that observes both a schema change and a data change together; however, this is not always feasible.</p> </div> <div class="paragraph"> <p>The new hybrid strategy works by tracking a table&#8217;s object id at the database level and then using this identifier to look up the schema associated with the table from Debezium&#8217;s relational table model. In short, this allows Debezium to do what Oracle LogMiner is unable to do in these specific corner cases. The table name will be taken from the relational model&#8217;s table name and columns will be mapped by column position.</p> </div> <div class="paragraph"> <p>Unfortunately, Oracle does not provide a way to reconstruct failed SQL operations for CLOB, BLOB, and XML data types. This means that the new hybrid strategy cannot be configured with configurations that use <code>lob.enabled</code> set to <code>true</code>. If a connector is started using the hybrid strategy and has <code>lob.enabled</code> set to <code>true</code>, the connector will fail to start and report a configuration failure.</p> </div> </div> <div class="sect2"> <h3 id="xml_support_for_openlogreplicator">XML Support for OpenLogReplicator</h3> <div class="paragraph"> <p>The Debezium for Oracle connector supports connections with OpenLogReplicator, allowing Oracle users to stream changes directly from the transaction logs. The latest build of OpenLogReplicator, version <strong>1.5.0</strong> has added support for XML column types.</p> </div> <div class="paragraph"> <p>To get started streaming XML with OpenLogReplicator, please upgrade the OpenLogReplicator process to 1.5.0 and restart the replicator process. Be aware that if you want to stream binary-based XML column data, you will need to toggle this feature as enabled in the OpenLogReplicator configuration.</p> </div> </div> <div class="sect2"> <h3 id="informix_appends_lsn_to_transaction_identifier">Informix appends LSN to Transaction Identifier</h3> <div class="paragraph"> <p>Informix databases only increases the transaction identifier when there are concurrent transactions, otherwise the value remains identical for sequential transactions. This can prove difficult for users who may want to utilize the transaction metadata to order change events in a post processing step.</p> </div> <div class="paragraph"> <p>Debezium 2.6 for Informix will now append the log sequence number (LSN) to the transaction identifier so that users can easily sort change events based on the transaction metadata. The transaction identifier field will now use the format <code>&lt;id&gt;:&lt;lsn&gt;</code>. This change affects transaction metadata events and the <code>source</code> information block for change events, as shown below:</p> </div> <div class="listingblock"> <div class="title">Transaction Begin Event</div> <div class="content"> <pre class="CodeRay highlight"><code data-lang="json">{
  <span class="key"><span class="delimiter">&quot;</span><span class="content">status</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">BEGIN</span><span class="delimiter">&quot;</span></span>,
  <span class="key"><span class="delimiter">&quot;</span><span class="content">id</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">571:53195829</span><span class="delimiter">&quot;</span></span>,
  <span class="error">.</span><span class="error">.</span><span class="error">.</span>
}</code></pre> </div> </div> <div class="listingblock"> <div class="title">Transaction End Event</div> <div class="content"> <pre class="CodeRay highlight"><code data-lang="json">{
  <span class="key"><span class="delimiter">&quot;</span><span class="content">status</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">END</span><span class="delimiter">&quot;</span></span>,
  <span class="key"><span class="delimiter">&quot;</span><span class="content">id</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">571:53195832</span><span class="delimiter">&quot;</span></span>,
  <span class="error">.</span><span class="error">.</span><span class="error">.</span>
}</code></pre> </div> </div> <div class="listingblock"> <div class="title">Change Events</div> <div class="content"> <pre class="CodeRay highlight"><code data-lang="json">{
  <span class="error">.</span><span class="error">.</span><span class="error">.</span>
  <span class="key"><span class="delimiter">&quot;</span><span class="content">source</span><span class="delimiter">&quot;</span></span>: {
    <span class="key"><span class="delimiter">&quot;</span><span class="content">id</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">571:53195832</span><span class="delimiter">&quot;</span></span>
    <span class="error">.</span><span class="error">.</span><span class="error">.</span>
  }
}</code></pre> </div> </div> </div> <div class="sect2"> <h3 id="supports_spanner_new_row_and_old_values_value_capture_type">Supports Spanner <code>NEW_ROW_AND_OLD_VALUES</code> value capture type</h3> <div class="paragraph"> <p>Google Spanner&#8217;s value capture type is responsible for controlling how the change stream represents the change data in the event stream and are configured when constructing the change stream.</p> </div> <div class="paragraph"> <p>Spanner introduced a new value capture mode called <code>NEW_ROW_AND_OLD_VALUES</code>, which is responsible for capturing all values of tracked columns, both modified and unmodified, whenever any column changes. This new mode is an improvement over <code>NEW_ROW</code> because it also includes the capture of old values, making it align with what you typically observe with other Debezium connectors.</p> </div> </div> <div class="sect2"> <h3 id="new_arbitrary_based_payload_formats">New Arbitrary-based payload formats</h3> <div class="paragraph"> <p>While it&#8217;s common for users to utilize serialization based on Json, Avro, Protobufs, or CloudEvents, there may be reasons to use a more simplistic format. Thanks to a community contribution as part of <a href="https://issues.redhat.com/browse/DBZ-7512">DBZ-7512</a>, Debezium can be configured to use two new formats called <code>simplestring</code> and <code>binary</code>.</p> </div> <div class="paragraph"> <p>The <code>simplestring</code> and <code>binary</code> formats are configured in Debezium server using the <code>debezium.format</code> configurations. For <code>simplestring</code>, the payload will be serialized as a single <code>STRING</code> data type into the topic. For <code>binary</code>, the payload will be serialized as a <code>BYTES</code> using a <code>byte[]</code> (byte array).</p> </div> </div> <div class="sect2"> <h3 id="trace_level_logging_for_debezium_server">TRACE level logging for Debezium Server</h3> <div class="paragraph"> <p>Debezium Server is a ready-made runtime for Debezium source connectors that uses the Quarkus framework to manage the source and sink deployments. As most Debezium Server users are aware who have reached out with questions or bugs, we often ask for TRACE-level logs and this has often proven difficult as it requires a full rebuild of Debezium Server due to how minimum logging level is a build-time configuration in Quarkus.</p> </div> <div class="paragraph"> <p>With Debezium 2.6.0.CR1 release and later, this will no longer be required. The build time configuration has been adjusted by default to include TRACE logging levels, so moving forward users can simply set the log level to TRACE and restart Debezium Server to obtain the logs (<a href="https://issues.redhat.com/brwose/DBZ-7369">DBZ-7369</a>).</p> </div> </div> <div class="sect2"> <h3 id="google_pubsub_ordering_key_support">Google PubSub Ordering Key Support</h3> <div class="paragraph"> <p>The Debezium Server Google PubSub sink adapter has received a small update in Debezium 2.6. If you are streaming changes that have foreign key relationships, you may have wondered whether it was possible to specify an ordering key so that foreign key constraints could be maintained.</p> </div> <div class="paragraph"> <p>Debezium 2.6 introduces a new configurable property for the Google PubSub sink adapter, <code>ordering.key</code>, which allows the sink adapter to use an externally provided ordering key from the connector configuration for the events rather than using the default behavior based on the event&#8217;s key (<a href="https://issues.redhat.com/browse/DBZ-7435">DBZ-7435</a>).</p> </div> </div> <div class="sect2"> <h3 id="cloudevents_schema_name_customization">CloudEvents schema name customization</h3> <div class="paragraph"> <p>When using schema registry, event schemas need to be registered with a name so that they can be looked up upon later inquiries by pipelines. So when pairing CloudEvents formatted messages with schema registry, the same applies and in Debezium 2.6, you can explicitly control how the name is registered.</p> </div> <div class="paragraph"> <p>By default, the schema for a CloudEvent message will be automatically generated by the converter. However, if the auto generated schema names are not sufficient, you can adjust the configuration by specifying <code>dataSchemaName</code>, which can be set either to <code>generate</code> (the default behavior) or <code>header</code> to pull the schema name directly from the specified event header field.</p> </div> </div> <div class="sect2"> <h3 id="timestamp_converter_improvements">Timestamp converter improvements</h3> <div class="paragraph"> <p>Debezium released the new <code>TimezoneConverter</code> in Debezium 2.4, allowing users to target a specific time zone and to convert the outgoing payload time values to that targeted time zone. The original implementation was specifically restricted to allow conversion of values within the <code>before</code> or <code>after</code> parts of the payload; however, thanks to an improvement as a part of <a href="https://issues.redhat.com/browse/DBZ-7022">DBZ-7022</a>, the converter can now be used to convert other time-based fields in the metadata, such as <code>ts_ms</code> in the <code>source</code> information block.</p> </div> <div class="paragraph"> <p>This change helps to improve lag metric calculations in situations where the JVM running the connector is using a time zone that differs from the database and the calculation of the <em>envelope ts_ms</em> - <em>source ts_ms</em> results in a variance caused by the time zone. By using the <code>TimezoneConverter</code> to convert metadata fields, you can easily calculate the lag between those two fields without the time zone interfering.</p> </div> </div> <div class="sect2"> <h3 id="signal_table_watermark_metadata">Signal table watermark metadata</h3> <div class="paragraph"> <p>An incremental snapshot process requires a signal table to write open/close markers to coordinate the change boundaries with the data recorded in the transaction logs, unless you&#8217;re using MySQL&#8217;s read-only flavor. In some cases, users would like to be able to track the window time slot, knowing when the window was opened and closed.</p> </div> <div class="paragraph"> <p>Starting with Debezium 2.6, the <code>data</code> column in the signal table will be populated with the time window details, allowing users to obtain when the window was opened and closed. The following shows the details of the <code>data</code> column for each of the two signal markers:</p> </div> <div class="listingblock"> <div class="title">Window Open Marker</div> <div class="content"> <pre class="CodeRay highlight"><code data-lang="json">{<span class="key"><span class="delimiter">&quot;</span><span class="content">openWindowTimestamp</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">&lt;window-open-time&gt;</span><span class="delimiter">&quot;</span></span>}</code></pre> </div> </div> <div class="listingblock"> <div class="title">Window Close Marker</div> <div class="content"> <pre class="CodeRay highlight"><code data-lang="json">{<span class="key"><span class="delimiter">&quot;</span><span class="content">openWindowTimestamp</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">&lt;window-open-time&gt;</span><span class="delimiter">&quot;</span></span>, <span class="key"><span class="delimiter">&quot;</span><span class="content">closeWindowTimestamp</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">&lt;window-close-time&gt;</span><span class="delimiter">&quot;</span></span>}</code></pre> </div> </div> </div> <div class="sect2"> <h3 id="trace_level_logging_for_debezium_server_2">TRACE level logging for Debezium Server</h3> <div class="paragraph"> <p>Debezium Server is a ready-made runtime for Debezium source connectors that uses the Quarkus framework to manage the source and sink deployments. As most Debezium Server users are aware who have reached out with questions or bugs, we often ask for TRACE-level logs and this has often proven difficult as it requires a full rebuild of Debezium Server due to how minimum logging level is a build-time configuration in Quarkus.</p> </div> <div class="paragraph"> <p>With Debezium 2.6+ release, this will no longer be required. The build time configuration has been adjusted by default to include TRACE logging levels, so moving forward users can simply set the log level to TRACE and restart Debezium Server to obtain the logs (<a href="https://issues.redhat.com/brwose/DBZ-7369">DBZ-7369</a>).</p> </div> </div> <div class="sect2"> <h3 id="cassandra_configurable_partition_modes">Cassandra configurable partition modes</h3> <div class="paragraph"> <p>When a Debezium Cassandra connector read the commit logs, events are processed sequentially and added to a queue. If multiple queues exist, events become distributed between these queues based on the hash of the commit log filename. This resulted in situations where events could be emitted in non-chronological order.</p> </div> <div class="paragraph"> <p>With Debezium 2.6, the Cassandra connector&#8217;s hashing algorithm now uses the partition column names to resolve the queue index for insertion. This should provide a more stable insert order so that events are emitted in the correct order.</p> </div> <div class="paragraph"> <p>A new configuration option has been added to opt-in to this new behavior. Debezium users can add the new configuration property <code>event.order.guarantee.mode</code> set to <code>partition_values</code> to take advantage of this new mode. By default, the property retains the old behavior using a default of <code>commitlog_file</code>.</p> </div> </div> <div class="sect2"> <h3 id="other_fixes">Other fixes</h3> <div class="paragraph"> <p>In total, <a href="https://issues.redhat.com/issues/?jql=project%20%3D%20DBZ%20and%20fixVersion%20%20in%20(2.6.0.Alpha1%2C%202.6.0.Alpha2%2C%202.6.0.Beta1%2C%202.6.0.CR1%2C%202.6.0.Final">249 issues</a> were resolved in Debezium 2.6. The list of changes can also be found in our <a href="https://debezium.io/releases/2.6">release notes</a>. A big thank you to all the contributors from the community who worked diligently on this release: <a href="https://github.com/akulapid">Akula</a>, <a href="https://github.com/samssh">Amirmohammad Sadat Shokouhi</a>, <a href="https://github.com/andreas-ibm">Andreas Martens</a>, <a href="https://github.com/jchipmunk">Andrey Pustovetov</a>, <a href="https://github.com/akanimesh7">Animesh Kumar</a>, <a href="https://github.com/ani-sha">Anisha Mohanty</a>, <a href="https://github.com/shybovycha">Artem Shubovych</a>, <a href="https://github.com/ArthurLERAY">Arthur Le Ray</a>, <a href="https://github.com/roldanbob">Bob Roldan</a>, <a href="https://github.com/brenoavm">Breno Moreira</a>, <a href="https://github.com/Bue-von-hon">Bue Von Hun</a>, <a href="https://github.com/Naros">Chris Cranford</a>, <a href="https://github.com/coreillylocus">Ciaran O&#8217;Reilly</a>, <a href="https://github.com/CliffordCheefoon">Clifford Cheefoon</a>, <a href="https://github.com/enzo-cappa">Enzo Cappa</a>, <a href="https://github.com/gunnarmorling">Gunnar Morling</a>, <a href="https://github.com/harveyyue">Harvey Yue</a>, <a href="https://github.com/ilyasahsan123">Ilyas Ahsan</a>, <a href="https://github.com/nicholas-fwang">Inki Hwang</a>, <a href="https://github.com/jcechace">Jakub Cechacek</a>, <a href="https://github.com/james-johnston-thumbtack">James Johnston</a>, <a href="https://github.com/iankko">Jan.Lieskovsky</a>, <a href="https://github.com/sherpa003">Jiri Kulhanek</a>, <a href="https://github.com/novotnyJiri">Jiri Novotny</a>, <a href="https://github.com/jpechane">Jiri Pechanec</a>, <a href="https://github.com/JordanP">Jordan Pittier</a>, <a href="https://github.com/nrkljo">Lars M. Johansson</a>, <a href="https://github.com/methodmissing">Lourens Naudé</a>, <a href="https://github.com/Lucascanna">Luca Scannapieco</a>, <a href="https://github.com/mfvitale">Mario Fiore Vitale</a>, <a href="https://github.com/MartinMedek">Martin Medek</a>, <a href="https://github.com/mimaison">Mickael Maison</a>, <a href="https://github.com/mostafaghadimi">Mostafa Ghadimi</a>, <a href="https://github.com/nancyxu123">Nancy Xu</a>, <a href="https://github.com/nivolg">Nick Golubev</a>, <a href="https://github.com/obabec">Ondrej Babec</a>, <a href="https://github.com/wukachn">Peter Hamer</a>, <a href="https://github.com/rk3rn3r">René Kerner</a>, <a href="https://github.com/richardharrington">Richard Harrington</a>, <a href="https://github.com/roldanbob">Robert Roldan</a>, <a href="https://github.com/rkudryashov">Roman Kudryashov</a>, <a href="https://github.com/VWagen1989">Sean Wu</a>, <a href="https://github.com/eizners">Sergey Eizner</a>, <a href="https://github.com/Fr0z3Nn">Sergey Ivanov</a>, <a href="https://github.com/ShuranZhang">Shuran Zhang</a>, <a href="https://github.com/schampilomatis">Stavros Champilomatis</a>, <a href="https://github.com/twthorn">Thomas Thornton</a>, <a href="https://github.com/koneru9999">V K</a>, <a href="https://github.com/ramanenka">Vadzim Ramanenka</a>, <a href="https://github.com/fourpointfour">Vaibhav Kushwaha</a>, <a href="https://github.com/vsantona">Vincenzo Santonastaso</a>, <a href="https://github.com/vjuranek">Vojtech Juranek</a>, <a href="https://github.com/xmzhou00">Xianming Zhou</a>, <a href="https://github.com/leoloel">leoloel</a>, and <a href="https://github.com/overwatcheddude">حمود سمبول</a>!</p> </div> </div> </div> </div> <div class="sect1"> <h2 id="outlook_whats_next">Outlook &amp; What&#8217;s next?</h2> <div class="sectionbody"> <div class="paragraph"> <p>With Debezium 2.6 released, the team has already started work on Debezium 2.7, which will be released later this year in June. This upcoming release will feature a standalone MariaDB connector, user-friendly offset manipulation, read-only incremental snapshots for relational connectors, and possibly a sneak peek at the first PoC for Debezium Server&#8217;s UI.</p> </div> <div class="paragraph"> <p>This next quarter is equally ambitious with its deliverables, and we&#8217;d like to ask you to join the conversation. You can read all the details on the project&#8217;s 2024 <a href="https://debezium.io/roadmap">road map</a>, and get in touch with us on the <a href="https://groups.google.com/g/debezium">mailing list</a> or <a href="https://debezium.zulipchat.com/login/#narrow/stream/302529-users">Zulip chat</a>. We would love to hear your feedback on the road map and any suggestions you may that may not be included.</p> </div> <div class="paragraph"> <p>This upcoming quarter will mark the last and final release in the Debezium 2.x release stream with Debezium 2.7. With a new major release brewing, this is now the time for code clean-up and deprecation removal. If you have not taken a moment to review features that may have been scheduled for removal, we ask that you do and offer your feedback as soon as possible. We want to guarantee that the transition to Debezium 3 is as much of a drop-in replacement as possible, but we cannot do that without your help.</p> </div> <div class="paragraph"> <p>With spring in full swing, don&#8217;t forget to stop and enjoy the roses. Until next time&#8230;&#8203;</p> </div> </div> </div>]]></content><author><name>Chris Cranford</name></author><category term="releases"/><category term="mongodb"/><category term="mysql"/><category term="mariadb"/><category term="postgres"/><category term="sqlserver"/><category term="cassandra"/><category term="oracle"/><category term="db2"/><category term="vitess"/><category term="outbox"/><category term="spanner"/><category term="jdbc"/><category term="informix"/><category term="ibmi"/><summary type="html"><![CDATA[As the team has sprung forward into action, with spring upon us, and we&#8217;re in the summer spirit, we are pleased to announce the immediate release of Debezium 2.6.0.Final. This release includes dozens of new features, bug fixes, and improvements from the valiant efforts of the team and community contributors. Overall, there were 249 issues resolved with contributions from over 56 contributors. Lets a moment and review all the changes.]]></summary></entry><entry><title type="html">Debezium 2.6.0.CR1 Released</title><link href="https://debezium.io/blog/2024/03/25/debezium-2-6-cr1-released/" rel="alternate" type="text/html" title="Debezium 2.6.0.CR1 Released"/><published>2024-03-25T00:00:00+00:00</published><updated>2024-03-25T00:00:00+00:00</updated><id>https://debezium.io/blog/2024/03/25/debezium-2-6-cr1-released</id><content type="html" xml:base="https://debezium.io/blog/2024/03/25/debezium-2-6-cr1-released/"><![CDATA[<div class="paragraph"> <p>As we are just a week away from Debezium 2.6.0.Final, I am pleased to announce Debezium <strong>2.6.0.CR1</strong>, the first release candidate for the 2.6 release stream. This release includes a number of improvements, including XML support for the Oracle OpenLogReplicator adapter, TRACE level logging support for Debezium Server, configurable partition modes for Cassandra, the new Snapshot API for MongoDB and Db2, and more.</p> </div> <div class="paragraph"> <p>Additionally, this release includes a variety of bug fixes and several breaking changes.</p> </div> <div class="paragraph"> <p>Let&#8217;s take a closer look at all these changes and improvements included in Debezium 2.6.0.CR1; as always, you can find the complete list of changes for this release in the <a href="/releases/2.6/release-notes">release notes</a>. Please remember to take special note to any breaking changes that could affect your upgrade path.</p> </div> <div class="paragraph"> <p></p> </div> <div class="sect1"> <h2 id="breaking_changes">Breaking changes</h2> <div class="sectionbody"> <div class="paragraph"> <p>While we strive to avoid breaking changes, sometimes those changes are inevitable to evolve the right direction. This release includes several breaking changes.</p> </div> <div class="dlist"> <dl> <dt class="hdlist1">MySQL</dt> <dd> <p>The MysQL driver was updated to version 8.3.0, and this driver is not compatible with MySQL 5.x. If you still need to use an older MySQL version, please downgrade the driver after installation to a version that is compatible with your database (<a href="https://issues.redhat.com/browse/DBZ-7652">DBZ-7652</a>).</p> </dd> <dt class="hdlist1">SQL Server</dt> <dd> <p>The SQL Server connector was not capturing all schemas when the connector was first deployed, and instead, was only capturing the schemas based on the tables defined in the configuration&#8217;s include list. This was a bug that could prevent users from easily adding new tables to the connector when expecting that the new table&#8217;s schema would already exist in the schema history topic. The connector now correctly honors the <code>store.only.captured.tables.ddl</code> configuration option (<a href="https://issues.redhat.com/browse/DBZ-7593">DBZ-7593</a>).<br> <br> For existing connector deployments, if you do not specifically set the <code>store.only.captured.tables.ddl</code> property for the schema history topic, the connector will begin capturing schema changes for all relevant tables in your database. If you want to prevent this and retain the prior behavior, you will need to adjust your connector configuration by adding <code>schema.history.internal.store.only.captured.tables.ddl</code> with a value of <code>true</code>.</p> </dd> <dt class="hdlist1">Vitess</dt> <dd> <p>The Vitess connector previously used the timestamp of <code>BEGIN</code> message as the source timestamp. This has been changed to the usage of the <code>COMMIT</code> timestamp to reflect the behaviour of other connectors (<a href="https://issues.redhat.com/browse/DBZ-7628">DBZ-7628</a>).</p> </dd> </dl> </div> </div> </div> <div class="sect1"> <h2 id="new_features_and_improvements">New features and improvements</h2> <div class="sectionbody"> <div class="paragraph"> <p>Debezium 2.6.CR1 also introduces more improvements and features, lets take a look at each individually.</p> </div> <div class="sect2"> <h3 id="xml_support_for_openlogreplicator">XML Support for OpenLogReplicator</h3> <div class="paragraph"> <p>The Debezium for Oracle connector supports connections with OpenLogReplicator, allowing Oracle users to stream changes directly from the transaction logs. The latest build of OpenLogReplicator, version <strong>1.5.0</strong> has added support for XML column types.</p> </div> <div class="paragraph"> <p>To get started streaming XML with OpenLogReplicator, please upgrade the OpenLogReplicator process to 1.5.0 and restart the replicator process. Be aware that if you want to stream binary-based XML column data, you will need to toggle this feature as enabled in the OpenLogReplicator configuration.</p> </div> </div> <div class="sect2"> <h3 id="trace_level_logging_for_debezium_server">TRACE level logging for Debezium Server</h3> <div class="paragraph"> <p>Debezium Server is a ready-made runtime for Debezium source connectors that uses the Quarkus framework to manage the source and sink deployments. As most Debezium Server users are aware who have reached out with questions or bugs, we often ask for TRACE-level logs and this has often proven difficult as it requires a full rebuild of Debezium Server due to how minimum logging level is a build-time configuration in Quarkus.</p> </div> <div class="paragraph"> <p>With Debezium 2.6.0.CR1 release and later, this will no longer be required. The build time configuration has been adjusted by default to include TRACE logging levels, so moving forward users can simply set the log level to TRACE and restart Debezium Server to obtain the logs (<a href="https://issues.redhat.com/brwose/DBZ-7369">DBZ-7369</a>).</p> </div> </div> <div class="sect2"> <h3 id="new_unified_snapshot_modes">New Unified Snapshot Modes</h3> <div class="paragraph"> <p>The snapshot process is an integral part of each connector&#8217;s lifecycle, and it&#8217;s responsible for collecting and sending all the historical data that exists in your data store to your target systems, if desired. For Debezium users who work with multiple connector types, we understand that having differing snapshot modes across connectors can sometimes be confusing to work with. So this change is designed to address that.</p> </div> <div class="paragraph"> <p>For many of you who may have already tried or installed Debezium 2.6 pre-releases, you&#8217;re already using the unified snapshot SPI as it was designed to be a drop-in-replacement initially, requiring no changes. This release finishes that work for MongoDB and DB2.</p> </div> <div class="paragraph"> <p>Of these changes, the most notable include the following:</p> </div> <div class="ulist"> <ul> <li> <p>All snapshot modes are available to all connectors, excluding <code>never</code> which remains specific to MySQL. This means that connectors that may have previously not supported a snapshot mode, such as <code>when_needed</code>, can now use this mode to retake a snapshot when the connector identifies that its necessary.</p> </li> <li> <p>The <code>schema_only_recovery</code> mode has been deprecated and replaced by <code>recovery</code>.</p> </li> <li> <p>The <code>schema_only</code> mode has also been deprecated and replaced by <code>no_data</code>.</p> </li> </ul> </div> <div class="admonitionblock important"> <table> <tr> <td class="icon"> <i class="fa icon-important" title="Important"></i> </td> <td class="content"> <div class="paragraph"> <p>All deprecated modes will remain available until Debezium 3 later this year. This provides users with about six months to adjust scripts, configurations, and processes in advance.</p> </div> </td> </tr> </table> </div> </div> <div class="sect2"> <h3 id="cassandra_configurable_partition_modes">Cassandra configurable partition modes</h3> <div class="paragraph"> <p>When a Debezium Cassandra connector read the commit logs, events are processed sequentially and added to a queue. If multiple queues exist, events become distributed between these queues based on the hash of the commit log filename. This resulted in situations where events could be emitted in non-chronological order.</p> </div> <div class="paragraph"> <p>With Debezium 2.6, the Cassandra connector&#8217;s hashing algorithm now uses the partition column names to resolve the queue index for insertion. This should provide a more stable insert order so that events are emitted in the correct order.</p> </div> <div class="paragraph"> <p>A new configuration option has been added to opt-in to this new behavior. Debezium users can add the new configuration property <code>event.order.guarantee.mode</code> set to <code>partition_values</code> to take advantage of this new mode. By default, the property retains the old behavior using a default of <code>commitlog_file</code>.</p> </div> </div> </div> </div> <div class="sect1"> <h2 id="other_fixes">Other fixes</h2> <div class="sectionbody"> <div class="paragraph"> <p>In addition, there were quite a number of stability and bug fixes that made it into this release. These include the following:</p> </div> <div class="ulist"> <ul> <li> <p>Log Mining Processor advances SCN incorrectly if LogMiner query returns no rows <a href="https://issues.redhat.com/browse/DBZ-6679">DBZ-6679</a></p> </li> <li> <p>debezium-connector-jdbc occurred java.sql.SQLException: ORA-01461: can bind a LONG value only <a href="https://issues.redhat.com/browse/DBZ-6900">DBZ-6900</a></p> </li> <li> <p>Align snapshot modes for MongoDB <a href="https://issues.redhat.com/browse/DBZ-7304">DBZ-7304</a></p> </li> <li> <p>Align snapshot modes for DB2 <a href="https://issues.redhat.com/browse/DBZ-7305">DBZ-7305</a></p> </li> <li> <p>Align all snapshot mode on all connectors <a href="https://issues.redhat.com/browse/DBZ-7308">DBZ-7308</a></p> </li> <li> <p>Oracle connector unable to find SCN after Exadata maintenance updates <a href="https://issues.redhat.com/browse/DBZ-7389">DBZ-7389</a></p> </li> <li> <p>Oracle LOB requery on Primary Key change does not work for all column types <a href="https://issues.redhat.com/browse/DBZ-7458">DBZ-7458</a></p> </li> <li> <p>Incorrect value of TIME(n) replicate from MySQL if the original value is negative <a href="https://issues.redhat.com/browse/DBZ-7594">DBZ-7594</a></p> </li> <li> <p>Re-select Post Processor not working for complex types <a href="https://issues.redhat.com/browse/DBZ-7596">DBZ-7596</a></p> </li> <li> <p>Null instead of toast placeholder written for binary types when "hex" mode configured <a href="https://issues.redhat.com/browse/DBZ-7599">DBZ-7599</a></p> </li> <li> <p>Poor snapshot performance during schema snapshot DDL processing <a href="https://issues.redhat.com/browse/DBZ-7608">DBZ-7608</a></p> </li> <li> <p>Remove LogMiner continuous mining configuration option <a href="https://issues.redhat.com/browse/DBZ-7610">DBZ-7610</a></p> </li> <li> <p>Re-select post processor performance <a href="https://issues.redhat.com/browse/DBZ-7611">DBZ-7611</a></p> </li> <li> <p>Uncaught exception during config validation in Engine <a href="https://issues.redhat.com/browse/DBZ-7614">DBZ-7614</a></p> </li> <li> <p>Enhanced event timestamp precision combined with ExtractNewRecordState not working <a href="https://issues.redhat.com/browse/DBZ-7615">DBZ-7615</a></p> </li> <li> <p>Incremental snapshot query doesn&#8217;t honor message.key.columns order <a href="https://issues.redhat.com/browse/DBZ-7617">DBZ-7617</a></p> </li> <li> <p>Metric ScnFreezeCount never increases <a href="https://issues.redhat.com/browse/DBZ-7619">DBZ-7619</a></p> </li> <li> <p>JDBC connector does not process ByteBuffer field value <a href="https://issues.redhat.com/browse/DBZ-7620">DBZ-7620</a></p> </li> <li> <p>Update Quarkus Outbox to Quarkus 3.8.2 <a href="https://issues.redhat.com/browse/DBZ-7623">DBZ-7623</a></p> </li> <li> <p>Upgrade Debezium Server to Quarkus 3.2.10 <a href="https://issues.redhat.com/browse/DBZ-7624">DBZ-7624</a></p> </li> <li> <p>MongoDbReplicaSet and MongoDbShardedCluster should not create a new network for each builder instance by default <a href="https://issues.redhat.com/browse/DBZ-7626">DBZ-7626</a></p> </li> <li> <p>Cassandra can have misaligned Jackson dependencies <a href="https://issues.redhat.com/browse/DBZ-7629">DBZ-7629</a></p> </li> <li> <p>Remove forgotten lombok code from system tests <a href="https://issues.redhat.com/browse/DBZ-7634">DBZ-7634</a></p> </li> <li> <p>Numerci value without mantissa cannot be parsed <a href="https://issues.redhat.com/browse/DBZ-7643">DBZ-7643</a></p> </li> <li> <p>Add JDBC connector to artifact server image preparation <a href="https://issues.redhat.com/browse/DBZ-7644">DBZ-7644</a></p> </li> <li> <p>Revert removal of Oracle LogMiner continuous mining <a href="https://issues.redhat.com/browse/DBZ-7645">DBZ-7645</a></p> </li> <li> <p>Add documentation for MongoDB capture.mode.full.update.type property <a href="https://issues.redhat.com/browse/DBZ-7647">DBZ-7647</a></p> </li> <li> <p>Missing test annotation in PostgresConnectorIT <a href="https://issues.redhat.com/browse/DBZ-7649">DBZ-7649</a></p> </li> <li> <p>Fix MySQL image fetch for tests <a href="https://issues.redhat.com/browse/DBZ-7651">DBZ-7651</a></p> </li> <li> <p>RedisSchemaHistoryIT continually fails <a href="https://issues.redhat.com/browse/DBZ-7654">DBZ-7654</a></p> </li> <li> <p>Upgrade Quarkus Outbox Extension to Quarkus 3.8.3 <a href="https://issues.redhat.com/browse/DBZ-7656">DBZ-7656</a></p> </li> <li> <p>Bump SQL Server test image to SQL Server 2022 <a href="https://issues.redhat.com/browse/DBZ-7657">DBZ-7657</a></p> </li> <li> <p>Upgrade Debezium Server to Quarkus 3.2.11.Final <a href="https://issues.redhat.com/browse/DBZ-7662">DBZ-7662</a></p> </li> <li> <p>Update QOSDK and Quarkus to fix vcs-url annotation CVE <a href="https://issues.redhat.com/browse/DBZ-7664">DBZ-7664</a></p> </li> <li> <p>Exclude jcl-over-slf4j dependency <a href="https://issues.redhat.com/browse/DBZ-7665">DBZ-7665</a></p> </li> <li> <p>MySQL connector fails to parse DDL with RETURNING keyword <a href="https://issues.redhat.com/browse/DBZ-7666">DBZ-7666</a></p> </li> <li> <p>Schema history comparator doesn&#8217;t handle SERVER_ID_KEY and TIMESTAMP_KEY properly <a href="https://issues.redhat.com/browse/DBZ-7690">DBZ-7690</a></p> </li> <li> <p>Duplicate envar generated in operator bundle <a href="https://issues.redhat.com/browse/DBZ-7703">DBZ-7703</a></p> </li> </ul> </div> <div class="paragraph"> <p>Altogether, <a href="https://issues.redhat.com/issues/?jql=project%20%3D%20DBZ%20AND%20fixVersion%20%3D%202.6.0.CR1%20ORDER%20BY%20component%20ASC">48 issues</a> were fixed for this release. A big thank you to all the contributors from the community who worked on this release: <a href="https://github.com/samssh">Amirmohammad Sadat Shokouhi</a>, <a href="https://github.com/andreas-ibm">Andreas Martens</a>, <a href="https://github.com/jchipmunk">Andrey Pustovetov</a>, <a href="https://github.com/Naros">Chris Cranford</a>, <a href="https://github.com/gunnarmorling">Gunnar Morling</a>, <a href="https://github.com/harveyyue">Harvey Yue</a>, <a href="https://github.com/indraraj">Indra Shukla</a>, <a href="https://github.com/jcechace">Jakub Cechacek</a>, <a href="https://github.com/novotnyJiri">Jiri Novotny</a>, <a href="https://github.com/jpechane">Jiri Pechanec</a>, <a href="https://github.com/Lucascanna">Luca Scannapieco</a>, <a href="https://github.com/mfvitale">Mario Fiore Vitale</a>, <a href="https://github.com/MartinMedek">Martin Medek</a>, <a href="https://github.com/nivolg">Nick Golubev</a>, <a href="https://github.com/roldanbob">Robert Roldan</a>, <a href="https://github.com/VWagen1989">Sean Wu</a>, <a href="https://github.com/eizners">Sergey Eizner</a>, <a href="https://github.com/twthorn">Thomas Thornton</a>, and <a href="https://github.com/fourpointfour">Vaibhav Kushwaha</a>!</p> </div> </div> </div> <div class="sect1"> <h2 id="whats_next">What&#8217;s next?</h2> <div class="sectionbody"> <div class="paragraph"> <p>We have just over a week before the Debezium 2.6 final release. If you have not given any of the latest pre-releases a try, we encourage everyone to do so and provide feedback if you face any problems or issues deploying this release candidate. Our goal is to release the 2.6.0.Final build immediately after the upcoming holiday break.</p> </div> <div class="paragraph"> <p>As the team begins to shift gears toward Debezium 2.7, here&#8217;s a speak peek at some upcoming highlights:</p> </div> <div class="ulist"> <ul> <li> <p>Standalone, Official MariaDB connector</p> </li> <li> <p>User-friendly offset manipulation</p> </li> <li> <p>Read-only incremental snapshots for all relational connectors</p> </li> <li> <p>Sneak peek at the first PoC of the Debezium Server UI</p> </li> </ul> </div> <div class="paragraph"> <p>For more details, please check out our <a href="https://debezium.io/roadmap">road map</a> for all upcoming details around Debezium 2.7 and beyond.</p> </div> <div class="paragraph"> <p>As always, please be sure to get in touch with us on the <a href="https://groups.google.com/g/debezium">mailing list</a> or <a href="https://debezium.zulipchat.com/login/#narrow/stream/302529-users">Zulip chat</a> if you have questions or feedback. We&#8217;re interested to know what you&#8217;d like to see changed in Debezium 3, so let us know!</p> </div> <div class="paragraph"> <p>Until next time&#8230;&#8203;</p> </div> </div> </div>]]></content><author><name>Chris Cranford</name></author><category term="releases"/><category term="mongodb"/><category term="mysql"/><category term="mariadb"/><category term="postgres"/><category term="sqlserver"/><category term="cassandra"/><category term="oracle"/><category term="db2"/><category term="vitess"/><category term="outbox"/><category term="spanner"/><category term="informix"/><category term="ibmi"/><summary type="html"><![CDATA[As we are just a week away from Debezium 2.6.0.Final, I am pleased to announce Debezium 2.6.0.CR1, the first release candidate for the 2.6 release stream. This release includes a number of improvements, including XML support for the Oracle OpenLogReplicator adapter, TRACE level logging support for Debezium Server, configurable partition modes for Cassandra, the new Snapshot API for MongoDB and Db2, and more. Additionally, this release includes a variety of bug fixes and several breaking changes. Let&#8217;s take a closer look at all these changes and improvements included in Debezium 2.6.0.CR1; as always, you can find the complete list of changes for this release in the release notes. Please remember to take special note to any breaking changes that could affect your upgrade path.]]></summary></entry><entry><title type="html">Debezium 2.5.3.Final Released</title><link href="https://debezium.io/blog/2024/03/19/debezium-2-5-3-final-released/" rel="alternate" type="text/html" title="Debezium 2.5.3.Final Released"/><published>2024-03-19T00:00:00+00:00</published><updated>2024-03-19T00:00:00+00:00</updated><id>https://debezium.io/blog/2024/03/19/debezium-2-5-3-final-released</id><content type="html" xml:base="https://debezium.io/blog/2024/03/19/debezium-2-5-3-final-released/"><![CDATA[<div class="paragraph"> <p>We are happy to announce the third maintenance release of the Debezium 2.5 release stream, <strong>Debezium 2.5.3.Final</strong>. This release includes some improvements and numerous bug fixes, so let&#8217;s dive right in&#8230;&#8203;</p> </div> <div class="paragraph"> <p></p> </div> <div class="sect1"> <h2 id="breaking_changes">Breaking changes</h2> <div class="sectionbody"> <div class="paragraph"> <p>The team aims to avoid any potential breaking changes between minor releases; however, such changes are sometimes inevitable.</p> </div> <div class="dlist"> <dl> <dt class="hdlist1">SQL Server</dt> <dd> <p>The SQL Server connector was not capturing all schemas when the connector was first deployed, and instead, was only capturing the schemas based on the tables defined in the configuration&#8217;s include list. This was a bug that could prevent users from easily adding new tables to the connector when expecting that the new table&#8217;s schema would already exist in the schema history topic. The connector now correctly honors the <code>store.only.captured.tables.ddl</code> configuration option (<a href="https://issues.redhat.com/browse/DBZ-7593">DBZ-7593</a>).<br> <br> For existing connector deployments, if you do not specifically set the <code>store.only.captured.tables.ddl</code> property for the schema history topic, the connector will begin capturing schema changes for all relevant tables in your database. If you want to prevent this and retain the prior behavior, you will need to adjust your connector configuration by adding <code>schema.history.internal.store.only.captured.tables.ddl</code> with a value of <code>true</code>.</p> </dd> </dl> </div> </div> </div> <div class="sect1"> <h2 id="improvements_and_changes">Improvements and changes</h2> <div class="sectionbody"> <div class="sect2"> <h3 id="trace_level_logging_for_debezium_server">TRACE level logging for Debezium Server</h3> <div class="paragraph"> <p>Debezium Server is a ready-made runtime for Debezium source connectors that uses the Quarkus framework to manage the source and sink deployments. As most Debezium Server users are aware who have reached out with questions or bugs, we often ask for TRACE-level logs and this has often proven difficult as it requires a full rebuild of Debezium Server due to how minimum logging level is a build-time configuration in Quarkus.</p> </div> <div class="paragraph"> <p>With Debezium 2.5.3.Final and the upcoming Debezium 2.6.0.Final releases, this will no longer be required. The build time configuration has been adjusted by default to include TRACE logging levels, so moving forward users can simply set the log level to TRACE and restart Debezium Server to obtain the logs (<a href="https://issues.redhat.com/brwose/DBZ-7369">DBZ-7369</a>).</p> </div> </div> <div class="sect2"> <h3 id="informix_appends_lsn_to_transaction_identifier">Informix appends LSN to Transaction Identifier</h3> <div class="paragraph"> <p>Informix databases only increases the transaction identifier when there are concurrent transactions, otherwise the value remains identical for sequential transactions. This can prove difficult for users who may want to utilize the transaction metadata to order change events in a post processing step.</p> </div> <div class="paragraph"> <p>In Debezium 2.5.3.Final and the upcoming 2.6, Informix will now append the log sequence number (LSN) to the transaction identifier so that users can easily sort change events based on the transaction metadata. The transaction identifier field will now use the format <code>&lt;id&gt;:&lt;lsn&gt;</code> (<a href="https://issues.redhat.com/browse/DBZ-7454">DBZ-7454</a>). This change affects transaction metadata events and the <code>source</code> information block for change events, as shown below:</p> </div> <div class="listingblock"> <div class="title">Transaction Begin Event</div> <div class="content"> <pre class="CodeRay highlight"><code data-lang="json">{
  <span class="key"><span class="delimiter">&quot;</span><span class="content">status</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">BEGIN</span><span class="delimiter">&quot;</span></span>,
  <span class="key"><span class="delimiter">&quot;</span><span class="content">id</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">571:53195829</span><span class="delimiter">&quot;</span></span>,
  <span class="error">.</span><span class="error">.</span><span class="error">.</span>
}</code></pre> </div> </div> <div class="listingblock"> <div class="title">Transaction End Event</div> <div class="content"> <pre class="CodeRay highlight"><code data-lang="json">{
  <span class="key"><span class="delimiter">&quot;</span><span class="content">status</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">END</span><span class="delimiter">&quot;</span></span>,
  <span class="key"><span class="delimiter">&quot;</span><span class="content">id</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">571:53195832</span><span class="delimiter">&quot;</span></span>,
  <span class="error">.</span><span class="error">.</span><span class="error">.</span>
}</code></pre> </div> </div> <div class="listingblock"> <div class="title">Change Events</div> <div class="content"> <pre class="CodeRay highlight"><code data-lang="json">{
  <span class="error">.</span><span class="error">.</span><span class="error">.</span>
  <span class="key"><span class="delimiter">&quot;</span><span class="content">source</span><span class="delimiter">&quot;</span></span>: {
    <span class="key"><span class="delimiter">&quot;</span><span class="content">id</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">571:53195832</span><span class="delimiter">&quot;</span></span>
    <span class="error">.</span><span class="error">.</span><span class="error">.</span>
  }
}</code></pre> </div> </div> </div> <div class="sect2"> <h3 id="postgresql_improvements">PostgreSQL improvements</h3> <div class="dlist"> <dl> <dt class="hdlist1">Updated JDBC driver</dt> <dd> <p>The PostgreSQL driver was upgraded to version 42.6.1.</p> </dd> <dt class="hdlist1">Improved logging</dt> <dd> <p>During the start-up of the PostgreSQL connector, some users reported the connector stuck or acting as though it could be caught in an infinite loop. (<a href="https://issues.redhat.com/browse/DBZ-7581">DBZ-7581</a>). The issue appeared that the <code>pg_replication_slot_advance</code> was taking longer than the read database timeout, and the exception thrown wasn&#8217;t satisfactory to identify the problem. In this case, the logging has been significantly improved to identify this root-cause so that users can make necessary adjustments if they encounter this problem.</p> </dd> </dl> </div> </div> </div> </div> <div class="sect1"> <h2 id="other_changes">Other changes</h2> <div class="sectionbody"> <div class="paragraph"> <p>Altogether, <a href="https://issues.redhat.com/issues/?jql=project%20%3D%20DBZ%20AND%20fixVersion%20%3D%202.5.3.Final%20ORDER%20BY%20component%20ASC">25 issues</a> were fixed in this release:</p> </div> <div class="ulist"> <ul> <li> <p>NullPointerException in MongoDB connector <a href="https://issues.redhat.com/browse/DBZ-6434">DBZ-6434</a></p> </li> <li> <p>Numeric default value decimal scale mismatch <a href="https://issues.redhat.com/browse/DBZ-7562">DBZ-7562</a></p> </li> <li> <p>Documentation conflict <a href="https://issues.redhat.com/browse/DBZ-7565">DBZ-7565</a></p> </li> <li> <p>Oracle connector always brings OLR dependencies <a href="https://issues.redhat.com/browse/DBZ-7579">DBZ-7579</a></p> </li> <li> <p>Correct JDBC connector dependencies <a href="https://issues.redhat.com/browse/DBZ-7580">DBZ-7580</a></p> </li> <li> <p>Unavailable Toasted HSTORE Json Storage Mode column causes serialization failure <a href="https://issues.redhat.com/browse/DBZ-7582">DBZ-7582</a></p> </li> <li> <p>Incorrect value of TIME(n) replicate from MySQL if the original value is negative <a href="https://issues.redhat.com/browse/DBZ-7594">DBZ-7594</a></p> </li> <li> <p>Re-select Post Processor not working for complex types <a href="https://issues.redhat.com/browse/DBZ-7596">DBZ-7596</a></p> </li> <li> <p>Serialization of XML columns with NULL values fails using Infinispan Buffer <a href="https://issues.redhat.com/browse/DBZ-7598">DBZ-7598</a></p> </li> <li> <p>Null instead of toast placeholder written for binary types when "hex" mode configured <a href="https://issues.redhat.com/browse/DBZ-7599">DBZ-7599</a></p> </li> <li> <p>Poor snapshot performance during schema snapshot DDL processing <a href="https://issues.redhat.com/browse/DBZ-7608">DBZ-7608</a></p> </li> <li> <p>Re-select post processor performance <a href="https://issues.redhat.com/browse/DBZ-7611">DBZ-7611</a></p> </li> <li> <p>Uncaught exception during config validation in Engine <a href="https://issues.redhat.com/browse/DBZ-7614">DBZ-7614</a></p> </li> <li> <p>Incremental snapshot query doesn&#8217;t honor message.key.columns order <a href="https://issues.redhat.com/browse/DBZ-7617">DBZ-7617</a></p> </li> <li> <p>Metric ScnFreezeCount never increases <a href="https://issues.redhat.com/browse/DBZ-7619">DBZ-7619</a></p> </li> <li> <p>Upgrade Debezium Server to Quarkus 3.2.10 <a href="https://issues.redhat.com/browse/DBZ-7624">DBZ-7624</a></p> </li> <li> <p>Cassandra can have misaligned Jackson dependencies <a href="https://issues.redhat.com/browse/DBZ-7629">DBZ-7629</a></p> </li> <li> <p>Numeric value without mantissa cannot be parsed <a href="https://issues.redhat.com/browse/DBZ-7643">DBZ-7643</a></p> </li> <li> <p>Fix MySQL image fetch for tests <a href="https://issues.redhat.com/browse/DBZ-7651">DBZ-7651</a></p> </li> </ul> </div> <div class="paragraph"> <p>A big thank you to all the contributors from the community who worked on this release: <a href="https://github.com/samssh">Amirmohammad Sadat Shokouhi</a>, <a href="https://github.com/andreas-ibm">Andreas Martens</a>, <a href="https://github.com/jchipmunk">Andrey Pustovetov</a>, <a href="https://github.com/ani-sha">Anisha Mohanty</a>, <a href="https://github.com/Naros">Chris Cranford</a>, <a href="https://github.com/enzo-cappa">Enzo Cappa</a>, <a href="https://github.com/indraraj">Indra Shukla</a>, <a href="https://github.com/jpechane">Jiri Pechanec</a>, <a href="https://github.com/mfvitale">Mario Fiore Vitale</a>, <a href="https://github.com/nivolg">Nick Golubev</a>, <a href="https://github.com/razvanz">Razvan Laurus</a>, <a href="https://github.com/roldanbob">Robert Roldan</a>, and <a href="https://github.com/VWagen1989">Sean Wu</a>!</p> </div> </div> </div> <div class="sect1"> <h2 id="outlook_whats_next">Outlook &amp; What&#8217;s next?</h2> <div class="sectionbody"> <div class="paragraph"> <p>We are only just a few weeks away from the final build of Debezium 2.6. I would anticipate 2.6.0.CR1 build later in the week, with 2.6.0.Final sometime next week, barring no unforeseen issues.</p> </div> <div class="paragraph"> <p>In a few short weeks, the team will begin to shift focus to what lies ahead with Debezium 2.7. This will be the last minor release of the Debezium 2.x release stream, which will include read-only incremental snapshots for other connectors, a new dedicated MariaDB source connector, and a MongoDB sink connector, just to name a few highlights. We will also be carrying over any work from 2.6 that we&#8217;re still working on but didn&#8217;t make it into that release.</p> </div> <div class="paragraph"> <p>And in closing, the last half of the year will be focusing on Debezium 3, where we&#8217;ll be moving to Java 17, work on new time-series source connectors, and more. Please take a moment and review our <a href="/docs/roadmap">road map</a>. If you have any suggestions or ideas, please feel free to get in touch with us on our <a href="https://groups.google.com/forum/#!forum/debezium">mailing list</a> or in our <a href="https://debezium.zulipchat.com/login/#narrow/stream/302529-users">Zulip chat</a>.</p> </div> <div class="paragraph"> <p>Until next time&#8230;&#8203;</p> </div> </div> </div>]]></content><author><name>Chris Cranford</name></author><category term="releases"/><category term="mongodb"/><category term="mysql"/><category term="postgres"/><category term="sqlserver"/><category term="cassandra"/><category term="oracle"/><category term="db2"/><category term="vitess"/><category term="outbox"/><category term="spanner"/><category term="jdbc"/><category term="informix"/><summary type="html"><![CDATA[We are happy to announce the third maintenance release of the Debezium 2.5 release stream, Debezium 2.5.3.Final. This release includes some improvements and numerous bug fixes, so let&#8217;s dive right in&#8230;&#8203;]]></summary></entry><entry><title type="html">Debezium 2.6.0.Beta1 Released</title><link href="https://debezium.io/blog/2024/03/06/debezium-2-6-beta1-released/" rel="alternate" type="text/html" title="Debezium 2.6.0.Beta1 Released"/><published>2024-03-06T00:00:00+00:00</published><updated>2024-03-06T00:00:00+00:00</updated><id>https://debezium.io/blog/2024/03/06/debezium-2-6-beta1-released</id><content type="html" xml:base="https://debezium.io/blog/2024/03/06/debezium-2-6-beta1-released/"><![CDATA[<div class="paragraph"> <p>We are pleased to announce the release of <strong>Debezium 2.6.0.Beta1</strong>. We enter the home stretch with this release, packed with many improvements, enhancements, bug fixes, and yes <em>a brand new Db2 connector for iSeries</em>. There is a lot to cover in this release, so lets dive right in!</p> </div> <div class="paragraph"> <p><!- more ---></p> </div> <div class="sect1"> <h2 id="breaking_changes">Breaking changes</h2> <div class="sectionbody"> <div class="paragraph"> <p>The team aims to avoid any potential breaking changes between minor releases; however, such changes are sometimes inevitable.</p> </div> <div class="dlist"> <dl> <dt class="hdlist1">Oracle</dt> <dd> <p>In older versions of Debezium, users were required to manually install the <code>ojdbc8.jar</code> JDBC driver. With 2.6, the connector now bundles the Oracle JDBC driver with the connector, so manual installation is no longer necessary (<a href="https://issues.redhat.com/browse/DBZ-7364">DBZ-7364</a>).</p> </dd> </dl> </div> <div class="admonitionblock note"> <table> <tr> <td class="icon"> <i class="fa icon-note" title="Note"></i> </td> <td class="content"> <div class="paragraph"> <p>We&#8217;ve also updated the driver to version <code>21.11.0.0</code>, please verify that you do not have multiple versions after upgrading to Debezium 2.6 (<a href="https://issues.redhat.com/browse/DBZ-7365">DBZ-7365</a>).</p> </div> </td> </tr> </table> </div> <div class="dlist"> <dl> <dt class="hdlist1">Container Images</dt> <dd> <p>The handling of the <code>MAVEN_DEP_DESTINATION</code> environment variable has changed in the <code>connect-base</code> container image, which is the basis for <code>debezium/connect</code>. It is no longer used for downloading all dependencies, including connectors, but only for general purpose Maven Central located dependencies (<a href="https://issues.redhat.com/browse/DBZ-7551">DBZ-7551</a>). If you were using custom images that relied on this environment variable, your image build steps may require modifications.</p> </dd> </dl> </div> </div> </div> <div class="sect1"> <h2 id="improvements_and_changes">Improvements and changes</h2> <div class="sectionbody"> <div class="sect2"> <h3 id="db2_for_iseries_connector">Db2 for iSeries connector</h3> <div class="paragraph"> <p>Debezium 2.6 introduces a brand-new connector for IBM fans to stream changes from Db2 iSeries/AS400 using the IBM iJournal system. This collaboration is a multi-year development effort from the community, and we&#8217;re pleased that the community has allowed this to be distributed under the Debezium umbrella.</p> </div> <div class="paragraph"> <p>The new connector can be obtained from Maven Central using the following coordinates or a <a href="https://repo1.maven.org/maven2/io/debezium/debezium-connector-ibmi/2.6.0.Beta1/debezium-connector-ibmi-2.6.0.Beta1-plugin.zip">direct download</a>.</p> </div> <div class="listingblock"> <div class="content"> <pre class="CodeRay highlight"><code data-lang="xml"><span class="tag">&lt;dependency&gt;</span>
    <span class="tag">&lt;groupId&gt;</span>io.debezium<span class="tag">&lt;/groupId&gt;</span>
    <span class="tag">&lt;artifactId&gt;</span>debezium-connector-ibmi<span class="tag">&lt;/artifactId&gt;</span>
    <span class="tag">&lt;version&gt;</span>2.6.0.Beta1<span class="tag">&lt;/version&gt;</span>
<span class="tag">&lt;/dependency&gt;</span></code></pre> </div> </div> <div class="admonitionblock note"> <table> <tr> <td class="icon"> <i class="fa icon-note" title="Note"></i> </td> <td class="content"> <div class="paragraph"> <p>The documentation for this new connector is still a work-in-progress. If you have any questions, please be sure to reach out to the team on Zulip or the mailing list.</p> </div> </td> </tr> </table> </div> </div> <div class="sect2"> <h3 id="incremental_snapshot_row_value_constructors_for_postgresql">Incremental snapshot row-value constructors for PostgreSQL</h3> <div class="paragraph"> <p>The PostgreSQL driver supports a SQL syntax called a row-value constructor using the <code>ROW()</code> function. This allows a query to express predicate conditions in a more efficient way when working with multi-columned primary keys that have a suitable index. The incremental snapshot process is an ideal candidate for the use of the <code>ROW()</code> function, the process involves issuing a series of select SQL statements to fetch data in chunks. Each statement, aka chunk query, should ideally be as efficient as possible to minimize the cost overhead of these queries to maximize throughput of your WAL changes to your topics.</p> </div> <div class="paragraph"> <p>There are no specific changes needed, but the query issued for PostgreSQL incremental snapshots has been adjusted to take advantage of this new syntax, and therefore users who utilize incremental snapshots should see performance improvements.</p> </div> <div class="paragraph"> <p>An example of the old query used might look like this for a simple table:</p> </div> <div class="listingblock"> <div class="content"> <pre class="CodeRay highlight"><code data-lang="sql"><span class="class">SELECT</span> *
  <span class="keyword">FROM</span> users
 <span class="keyword">WHERE</span> (a = <span class="integer">10</span> <span class="keyword">AND</span> (b &gt; <span class="integer">2</span> <span class="keyword">OR</span> b <span class="keyword">IS</span> <span class="predefined-constant">NULL</span>)) <span class="keyword">OR</span> (a &gt; <span class="integer">10</span>) <span class="keyword">OR</span> (a <span class="keyword">IS</span> <span class="predefined-constant">NULL</span>)
 <span class="keyword">ORDER</span> <span class="keyword">BY</span> a, b LIMIT <span class="integer">1024</span></code></pre> </div> </div> <div class="paragraph"> <p>The new implementation constructs this query using the <code>ROW()</code> function as follows:</p> </div> <div class="listingblock"> <div class="content"> <pre class="CodeRay highlight"><code data-lang="sql"><span class="class">SELECT</span> *
  <span class="keyword">FROM</span> users
 <span class="keyword">WHERE</span> <span class="type">row</span>(a,b) &gt; <span class="type">row</span>(<span class="integer">10</span>,<span class="integer">2</span>)
<span class="keyword">ORDER</span> <span class="keyword">BY</span> a, b LIMIT <span class="integer">1024</span></code></pre> </div> </div> <div class="paragraph"> <p>We&#8217;d be interested in any feedback on this change, and what performance improvements are observed.</p> </div> </div> <div class="sect2"> <h3 id="signal_table_watermark_metadata">Signal table watermark metadata</h3> <div class="paragraph"> <p>An incremental snapshot process requires a signal table to write open/close markers to coordinate the change boundaries with the data recorded in the transaction logs, unless you&#8217;re using MySQL&#8217;s read-only flavor. In some cases, users would like to be able to track the window time slot, knowing when the window was opened and closed.</p> </div> <div class="paragraph"> <p>Starting with Debezium 2.6, the <code>data</code> column in the signal table will be populated with the time window details, allowing users to obtain when the window was opened and closed. The following shows the details of the <code>data</code> column for each of the two signal markers:</p> </div> <div class="listingblock"> <div class="title">Window Open Marker</div> <div class="content"> <pre class="CodeRay highlight"><code data-lang="json">{<span class="key"><span class="delimiter">&quot;</span><span class="content">openWindowTimestamp</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">&lt;window-open-time&gt;</span><span class="delimiter">&quot;</span></span>}</code></pre> </div> </div> <div class="listingblock"> <div class="title">Window Close Marker</div> <div class="content"> <pre class="CodeRay highlight"><code data-lang="json">{<span class="key"><span class="delimiter">&quot;</span><span class="content">openWindowTimestamp</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">&lt;window-open-time&gt;</span><span class="delimiter">&quot;</span></span>, <span class="key"><span class="delimiter">&quot;</span><span class="content">closeWindowTimestamp</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">&lt;window-close-time&gt;</span><span class="delimiter">&quot;</span></span>}</code></pre> </div> </div> </div> <div class="sect2"> <h3 id="oracle_redo_sql_per_event_with_logminer">Oracle Redo SQL per event with LogMiner</h3> <div class="paragraph"> <p>We have improved the Oracle connector&#8217;s event structure for inserts, updates, and deletes to optionally contain the SQL that was reconstructed by LogMiner in the <code>source</code> information block. This feature is an opt-in only feature that you must enable as this can easily more than double the size of your existing event payload.</p> </div> <div class="paragraph"> <p>To enable the inclusion of the REDO SQL as part of the change event, add the following connector configuration:</p> </div> <div class="listingblock"> <div class="content"> <pre class="CodeRay highlight"><code data-lang="json"><span class="key"><span class="delimiter">&quot;</span><span class="content">log.mining.include.redo.sql</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">true</span><span class="delimiter">&quot;</span></span></code></pre> </div> </div> <div class="paragraph"> <p>With this option enabled, the <code>source</code> information block contains a new field <code>redo_sql</code>, as shown below:</p> </div> <div class="listingblock"> <div class="content"> <pre class="CodeRay highlight"><code data-lang="json"><span class="key"><span class="delimiter">&quot;</span><span class="content">source</span><span class="delimiter">&quot;</span></span>: {
  <span class="error">.</span><span class="error">.</span><span class="error">.</span>
  <span class="key"><span class="delimiter">&quot;</span><span class="content">redo_sql</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">INSERT INTO </span><span class="char">\&quot;</span><span class="content">DEBEZIUM</span><span class="char">\&quot;</span><span class="content">.</span><span class="char">\&quot;</span><span class="content">TEST</span><span class="char">\&quot;</span><span class="content"> (</span><span class="char">\&quot;</span><span class="content">ID</span><span class="char">\&quot;</span><span class="content">,</span><span class="char">\&quot;</span><span class="content">DATA</span><span class="char">\&quot;</span><span class="content">) values ('1', 'Test');</span><span class="delimiter">&quot;</span></span>
}</code></pre> </div> </div> <div class="admonitionblock warning"> <table> <tr> <td class="icon"> <i class="fa icon-warning" title="Warning"></i> </td> <td class="content"> <div class="paragraph"> <p>This feature cannot be used with <code>lob.enabled</code> set to <code>true</code> due to how LogMiner reconstructs the SQL related to CLOB, BLOB, and XML data types. If the above configuration is added with <code>lob.enabled</code> set to <code>true</code>, the connector will start with an error about this misconfiguration.</p> </div> </td> </tr> </table> </div> </div> <div class="sect2"> <h3 id="oracle_logminer_transaction_buffer_improvements">Oracle LogMiner transaction buffer improvements</h3> <div class="paragraph"> <p>A new delay-strategy for transaction registration has been added when using LogMiner. This strategy effectively delays the creation of the transaction record in the buffer until we observe the first captured change for that transaction.</p> </div> <div class="admonitionblock note"> <table> <tr> <td class="icon"> <i class="fa icon-note" title="Note"></i> </td> <td class="content"> <div class="paragraph"> <p>For users who use the Infinispan cache or who have enabled <code>lob.enabled</code>, this delayed strategy cannot be used due to how specific operations are handled in these two modes of the connector.</p> </div> </td> </tr> </table> </div> <div class="paragraph"> <p>Delaying transaction registration has a number of benefits, which include:</p> </div> <div class="ulist"> <ul> <li> <p>Reducing the overhead on the transaction cache, especially in a highly concurrent transaction scenario.</p> </li> <li> <p>Avoids long-running transactions that have no changes that are being captured by the connector.</p> </li> <li> <p>Should aid in advancing the low-watermark SCN in the offsets more efficiently in specific scenarios.</p> </li> </ul> </div> <div class="paragraph"> <p>We are looking into how we can explore this change for Infinispan-based users in a future build; however, due to the nature of how <code>lob.enabled</code> works with LogMiner, this feature won&#8217;t be possible for that use case.</p> </div> </div> <div class="sect2"> <h3 id="improved_event_timestamp_precision">Improved event timestamp precision</h3> <div class="paragraph"> <p>Debezium 2.6 introduces a new community requested feature to improve the precision of timestamps in change events. Users will now notice the addition of 4 new fields, two at the envelope level and two in the <code>source</code> information block as shown below:</p> </div> <div class="listingblock"> <div class="content"> <pre class="CodeRay highlight"><code data-lang="json">{
  <span class="key"><span class="delimiter">&quot;</span><span class="content">source</span><span class="delimiter">&quot;</span></span>: {
    <span class="error">.</span><span class="error">.</span><span class="error">.</span>,
    <span class="key"><span class="delimiter">&quot;</span><span class="content">ts_us</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">1559033904863123</span><span class="delimiter">&quot;</span></span>,
    <span class="key"><span class="delimiter">&quot;</span><span class="content">ts_ns</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">1559033904863123000</span><span class="delimiter">&quot;</span></span>
  },
  <span class="key"><span class="delimiter">&quot;</span><span class="content">ts_us</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">1580390884335451</span><span class="delimiter">&quot;</span></span>,
  <span class="key"><span class="delimiter">&quot;</span><span class="content">ts_ns</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">1580390884335451325</span><span class="delimiter">&quot;</span></span>,
}</code></pre> </div> </div> <div class="paragraph"> <p>The envelope values will always provide both microsecond (<code>ts_us</code>) and nanosecond (<code>ts_ns</code>) values while the <code>source</code> information block may have both micro and nano -second precision values truncated to a lower precision if the source database does not provide that level of precision.</p> </div> </div> <div class="sect2"> <h3 id="informix_appends_lsn_to_transaction_identifier">Informix appends LSN to Transaction Identifier</h3> <div class="paragraph"> <p>Informix databases only increases the transaction identifier when there are concurrent transactions, otherwise the value remains identical for sequential transactions. This can prove difficult for users who may want to utilize the transaction metadata to order change events in a post processing step.</p> </div> <div class="paragraph"> <p>Debezium 2.6 for Informix will now append the log sequence number (LSN) to the transaction identifier so that users can easily sort change events based on the transaction metadata. The transaction identifier field will now use the format <code>&lt;id&gt;:&lt;lsn&gt;</code>. This change affects transaction metadata events and the <code>source</code> information block for change events, as shown below:</p> </div> <div class="listingblock"> <div class="title">Transaction Begin Event</div> <div class="content"> <pre class="CodeRay highlight"><code data-lang="json">{
  <span class="key"><span class="delimiter">&quot;</span><span class="content">status</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">BEGIN</span><span class="delimiter">&quot;</span></span>,
  <span class="key"><span class="delimiter">&quot;</span><span class="content">id</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">571:53195829</span><span class="delimiter">&quot;</span></span>,
  <span class="error">.</span><span class="error">.</span><span class="error">.</span>
}</code></pre> </div> </div> <div class="listingblock"> <div class="title">Transaction End Event</div> <div class="content"> <pre class="CodeRay highlight"><code data-lang="json">{
  <span class="key"><span class="delimiter">&quot;</span><span class="content">status</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">END</span><span class="delimiter">&quot;</span></span>,
  <span class="key"><span class="delimiter">&quot;</span><span class="content">id</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">571:53195832</span><span class="delimiter">&quot;</span></span>,
  <span class="error">.</span><span class="error">.</span><span class="error">.</span>
}</code></pre> </div> </div> <div class="listingblock"> <div class="title">Change Events</div> <div class="content"> <pre class="CodeRay highlight"><code data-lang="json">{
  <span class="error">.</span><span class="error">.</span><span class="error">.</span>
  <span class="key"><span class="delimiter">&quot;</span><span class="content">source</span><span class="delimiter">&quot;</span></span>: {
    <span class="key"><span class="delimiter">&quot;</span><span class="content">id</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">571:53195832</span><span class="delimiter">&quot;</span></span>
    <span class="error">.</span><span class="error">.</span><span class="error">.</span>
  }
}</code></pre> </div> </div> </div> <div class="sect2"> <h3 id="new_arbitrary_based_payload_formats">New Arbitrary-based payload formats</h3> <div class="paragraph"> <p>While it&#8217;s common for users to utilize serialization based on Json, Avro, Protobufs, or CloudEvents, there may be reasons to use a more simplistic format. Thanks to a community contribution as part of <a href="https://issues.redhat.com/browse/DBZ-7512">DBZ-7512</a>, Debezium can be configured to use two new formats called <code>simplestring</code> and <code>binary</code>.</p> </div> <div class="paragraph"> <p>The <code>simplestring</code> and <code>binary</code> formats are configured in Debezium server using the <code>debezium.format</code> configurations. For <code>simplestring</code>, the payload will be serialized as a single <code>STRING</code> data type into the topic. For <code>binary</code>, the payload will be serialized as a <code>BYTES</code> using a <code>byte[]</code> (byte array).</p> </div> </div> <div class="sect2"> <h3 id="oracle_logminer_hybrid_mining_strategy">Oracle LogMiner Hybrid Mining Strategy</h3> <div class="paragraph"> <p>Debezium 2.6 also introduces a new Oracle LogMiner mining strategy called <em>hyrid</em>, which can be enabled by setting the configuration property <code>log.mining.strategy</code> with the value of <code>hybrid</code>. This new strategy is designed to support all schema evolution features of the default mining strategy while taking advantage of all the performance optimizations from the online catalog strategy.</p> </div> <div class="paragraph"> <p>The main problem with the <code>online_catalog</code> strategy is that if a mining step observes a schema change and a data change in the same mining step, LogMiner is incapable of reconstructing the SQL correctly, which will result in the table name being <code>OBJ# xxxxxx</code> or the columns represented as <code>COL1</code>, <code>COL2</code>, and so on. To avoid this while using the online catalog strategy, users are recommended to perform schema changes in a lock-step pattern to avoid a mining step that observes both a schema change and a data change together; however, this is not always feasible.</p> </div> <div class="paragraph"> <p>The new hybrid strategy works by tracking a table&#8217;s object id at the database level and then using this identifier to look up the schema associated with the table from Debezium&#8217;s relational table model. In short, this allows Debezium to do what Oracle LogMiner is unable to do in these specific corner cases. The table name will be taken from the relational model&#8217;s table name and columns will be mapped by column position.</p> </div> <div class="paragraph"> <p>Unfortunately, Oracle does not provide a way to reconstruct failed SQL operations for CLOB, BLOB, and XML data types. This means that the new hybrid strategy cannot be configured with configurations that use <code>lob.enabled</code> set to <code>true</code>. If a connector is started using the hybrid strategy and has <code>lob.enabled</code> set to <code>true</code>, the connector will fail to start and report a configuration failure.</p> </div> </div> </div> </div> <div class="sect1"> <h2 id="other_changes">Other changes</h2> <div class="sectionbody"> <div class="paragraph"> <p>Altogether, <a href="https://issues.redhat.com/issues/?jql=project%20%3D%20DBZ%20AND%20fixVersion%20%3D%202.6.0.Beta1%20ORDER%20BY%20component%20ASC">86 issues</a> were fixed in this release:</p> </div> <div class="ulist"> <ul> <li> <p>MySQL config values validated twice <a href="https://issues.redhat.com/browse/DBZ-2015">DBZ-2015</a></p> </li> <li> <p>PostgreSQL connector doesn&#8217;t restart properly if database if not reachable <a href="https://issues.redhat.com/browse/DBZ-6236">DBZ-6236</a></p> </li> <li> <p>NullPointerException in MongoDB connector <a href="https://issues.redhat.com/browse/DBZ-6434">DBZ-6434</a></p> </li> <li> <p>Tests in RHEL system testsuite throw errors without ocp cluster <a href="https://issues.redhat.com/browse/DBZ-7002">DBZ-7002</a></p> </li> <li> <p>Move timeout configuration of MongoDbReplicaSet into Builder class <a href="https://issues.redhat.com/browse/DBZ-7054">DBZ-7054</a></p> </li> <li> <p>Several Oracle tests fail regularly on Testing Farm infrastructure <a href="https://issues.redhat.com/browse/DBZ-7072">DBZ-7072</a></p> </li> <li> <p>Remove obsolete MySQL version from TF <a href="https://issues.redhat.com/browse/DBZ-7173">DBZ-7173</a></p> </li> <li> <p>Add Oracle 23 to CI test matrix <a href="https://issues.redhat.com/browse/DBZ-7195">DBZ-7195</a></p> </li> <li> <p>Refactor sharded mongo ocp test <a href="https://issues.redhat.com/browse/DBZ-7221">DBZ-7221</a></p> </li> <li> <p>Implement Snapshotter SPI Oracle <a href="https://issues.redhat.com/browse/DBZ-7302">DBZ-7302</a></p> </li> <li> <p>Align snapshot modes for SQLServer <a href="https://issues.redhat.com/browse/DBZ-7303">DBZ-7303</a></p> </li> <li> <p>Update snapshot mode documentation <a href="https://issues.redhat.com/browse/DBZ-7309">DBZ-7309</a></p> </li> <li> <p>Cassandra-4: Debezium connector stops producing events after a schema change <a href="https://issues.redhat.com/browse/DBZ-7363">DBZ-7363</a></p> </li> <li> <p>Upgrade ojdbc8 to 21.11.0.0 <a href="https://issues.redhat.com/browse/DBZ-7365">DBZ-7365</a></p> </li> <li> <p>Document relation between column type and serializers for outbox <a href="https://issues.redhat.com/browse/DBZ-7368">DBZ-7368</a></p> </li> <li> <p>Callout annotations rendered multiple times in downstream User Guide <a href="https://issues.redhat.com/browse/DBZ-7418">DBZ-7418</a></p> </li> <li> <p>Test testEmptyChangesProducesHeartbeat tends to fail randomly <a href="https://issues.redhat.com/browse/DBZ-7453">DBZ-7453</a></p> </li> <li> <p>Align snapshot modes for PostgreSQL, MySQL, Oracle <a href="https://issues.redhat.com/browse/DBZ-7461">DBZ-7461</a></p> </li> <li> <p>PreparedStatement leak in Oracle ReselectColumnsProcessor <a href="https://issues.redhat.com/browse/DBZ-7479">DBZ-7479</a></p> </li> <li> <p>Allow special characters in signal table name <a href="https://issues.redhat.com/browse/DBZ-7480">DBZ-7480</a></p> </li> <li> <p>Document toggling MariaDB mode <a href="https://issues.redhat.com/browse/DBZ-7487">DBZ-7487</a></p> </li> <li> <p>Poor snapshot performance with new reselect SMT <a href="https://issues.redhat.com/browse/DBZ-7488">DBZ-7488</a></p> </li> <li> <p>Debezium Oracle Connector ParsingException on XMLTYPE with lob.enabled=true <a href="https://issues.redhat.com/browse/DBZ-7489">DBZ-7489</a></p> </li> <li> <p>Add informix to main repository CI workflow <a href="https://issues.redhat.com/browse/DBZ-7490">DBZ-7490</a></p> </li> <li> <p>Db2ReselectColumnsProcessorIT does not clean-up after test failures <a href="https://issues.redhat.com/browse/DBZ-7491">DBZ-7491</a></p> </li> <li> <p>Disable Oracle Integration Tests on GitHub <a href="https://issues.redhat.com/browse/DBZ-7494">DBZ-7494</a></p> </li> <li> <p>Unify and adjust thread time outs <a href="https://issues.redhat.com/browse/DBZ-7495">DBZ-7495</a></p> </li> <li> <p>Completion callback called before connector stop <a href="https://issues.redhat.com/browse/DBZ-7496">DBZ-7496</a></p> </li> <li> <p>Add "IF [NOT] EXISTS" DDL support for Oracle 23 <a href="https://issues.redhat.com/browse/DBZ-7498">DBZ-7498</a></p> </li> <li> <p>Deployment examples show attribute name instead of its value <a href="https://issues.redhat.com/browse/DBZ-7499">DBZ-7499</a></p> </li> <li> <p>Fix MySQL 8 event timestamp resolution logic error where fallback to seconds occurs erroneously for non-GTID events <a href="https://issues.redhat.com/browse/DBZ-7500">DBZ-7500</a></p> </li> <li> <p>Remove incubating from Debezium documentation <a href="https://issues.redhat.com/browse/DBZ-7501">DBZ-7501</a></p> </li> <li> <p>Add ability to parse Map&lt;String, Object&gt; into ConfigProperties <a href="https://issues.redhat.com/browse/DBZ-7503">DBZ-7503</a></p> </li> <li> <p>LogMinerHelperIT test shouldAddCorrectLogFiles randomly fails <a href="https://issues.redhat.com/browse/DBZ-7504">DBZ-7504</a></p> </li> <li> <p>Support Oracle 23 SELECT without FROM <a href="https://issues.redhat.com/browse/DBZ-7505">DBZ-7505</a></p> </li> <li> <p>Add Oracle 23 Annotation support for CREATE/ALTER TABLE statements <a href="https://issues.redhat.com/browse/DBZ-7506">DBZ-7506</a></p> </li> <li> <p>TestContainers MongoDbReplicaSetAuthTest randomly fails <a href="https://issues.redhat.com/browse/DBZ-7507">DBZ-7507</a></p> </li> <li> <p>MySQl ReadOnlyIncrementalSnapshotIT testStopSnapshotKafkaSignal fails randomly <a href="https://issues.redhat.com/browse/DBZ-7508">DBZ-7508</a></p> </li> <li> <p>Add Informix to Java Outreach <a href="https://issues.redhat.com/browse/DBZ-7510">DBZ-7510</a></p> </li> <li> <p>Disable parallel record processing in DBZ server tests against Apicurio <a href="https://issues.redhat.com/browse/DBZ-7515">DBZ-7515</a></p> </li> <li> <p>Add Start CDC hook in Reselect Columns PostProcessor Tests <a href="https://issues.redhat.com/browse/DBZ-7516">DBZ-7516</a></p> </li> <li> <p>Remove the unused 'connector' parameter in the createSourceTask method in EmbeddedEngine.java <a href="https://issues.redhat.com/browse/DBZ-7517">DBZ-7517</a></p> </li> <li> <p>Update commons-compress to 1.26.0 <a href="https://issues.redhat.com/browse/DBZ-7520">DBZ-7520</a></p> </li> <li> <p>Promote JDBC sink from Incubating <a href="https://issues.redhat.com/browse/DBZ-7521">DBZ-7521</a></p> </li> <li> <p>Allow to download containers also from Docker Hub <a href="https://issues.redhat.com/browse/DBZ-7524">DBZ-7524</a></p> </li> <li> <p>Update rocketmq version <a href="https://issues.redhat.com/browse/DBZ-7525">DBZ-7525</a></p> </li> <li> <p>signalLogWithEscapedCharacter fails with pgoutput-decoder <a href="https://issues.redhat.com/browse/DBZ-7526">DBZ-7526</a></p> </li> <li> <p>Move RocketMQ dependency to debezium server <a href="https://issues.redhat.com/browse/DBZ-7527">DBZ-7527</a></p> </li> <li> <p>Rework shouldGenerateSnapshotAndContinueStreaming assertions to deal with parallelization <a href="https://issues.redhat.com/browse/DBZ-7530">DBZ-7530</a></p> </li> <li> <p>Multi-threaded snapshot can enqueue changes out of order <a href="https://issues.redhat.com/browse/DBZ-7534">DBZ-7534</a></p> </li> <li> <p>AsyncEmbeddedEngineTest#testTasksAreStoppedIfSomeFailsToStart fails randomly <a href="https://issues.redhat.com/browse/DBZ-7535">DBZ-7535</a></p> </li> <li> <p>MongoDbReplicaSetAuthTest fails randomly <a href="https://issues.redhat.com/browse/DBZ-7537">DBZ-7537</a></p> </li> <li> <p>SQLServer tests taking long time due to database bad state <a href="https://issues.redhat.com/browse/DBZ-7541">DBZ-7541</a></p> </li> <li> <p>Explicitly import jakarta dependencies that are excluded via glassfish filter <a href="https://issues.redhat.com/browse/DBZ-7545">DBZ-7545</a></p> </li> <li> <p>ReadOnlyIncrementalSnapshotIT#testStopSnapshotKafkaSignal fails randomly <a href="https://issues.redhat.com/browse/DBZ-7553">DBZ-7553</a></p> </li> <li> <p>Include RocketMQ and Redis container output into test log <a href="https://issues.redhat.com/browse/DBZ-7557">DBZ-7557</a></p> </li> <li> <p>Allow XStream error ORA-23656 to be retried <a href="https://issues.redhat.com/browse/DBZ-7559">DBZ-7559</a></p> </li> <li> <p>Numeric default value decimal scale mismatch <a href="https://issues.redhat.com/browse/DBZ-7562">DBZ-7562</a></p> </li> <li> <p>Wait for Redis server to start <a href="https://issues.redhat.com/browse/DBZ-7564">DBZ-7564</a></p> </li> <li> <p>Documentation conflict <a href="https://issues.redhat.com/browse/DBZ-7565">DBZ-7565</a></p> </li> <li> <p>Fix null event timestamp possible from FORMAT_DESCRIPTION and PREVIOUS_GTIDS events in MySqlStreamingChangeEventSource::setEventTimestamp <a href="https://issues.redhat.com/browse/DBZ-7567">DBZ-7567</a></p> </li> <li> <p>AsyncEmbeddedEngineTest.testExecuteSmt fails randomly <a href="https://issues.redhat.com/browse/DBZ-7568">DBZ-7568</a></p> </li> <li> <p>Debezium fails to compile with JDK 21 <a href="https://issues.redhat.com/browse/DBZ-7569">DBZ-7569</a></p> </li> <li> <p>Upgrade PostgreSQL driver to 42.6.1 <a href="https://issues.redhat.com/browse/DBZ-7571">DBZ-7571</a></p> </li> <li> <p>Upgrade Kafka to 3.7.0 <a href="https://issues.redhat.com/browse/DBZ-7574">DBZ-7574</a></p> </li> <li> <p>Redis tests fail randomly with JedisConnectionException: Unexpected end of stream <a href="https://issues.redhat.com/browse/DBZ-7576">DBZ-7576</a></p> </li> <li> <p>RedisOffsetIT.testRedisConnectionRetry fails randomly <a href="https://issues.redhat.com/browse/DBZ-7578">DBZ-7578</a></p> </li> <li> <p>Oracle connector always brings OLR dependencies <a href="https://issues.redhat.com/browse/DBZ-7579">DBZ-7579</a></p> </li> <li> <p>Correct JDBC connector dependencies <a href="https://issues.redhat.com/browse/DBZ-7580">DBZ-7580</a></p> </li> <li> <p>Improved logging in case of PostgreSQL failure <a href="https://issues.redhat.com/browse/DBZ-7581">DBZ-7581</a></p> </li> <li> <p>Unavailable Toasted HSTORE Json Storage Mode column causes serialization failure <a href="https://issues.redhat.com/browse/DBZ-7582">DBZ-7582</a></p> </li> <li> <p>Reduce debug logs on tests <a href="https://issues.redhat.com/browse/DBZ-7588">DBZ-7588</a></p> </li> <li> <p>Server SQS sink doesn&#8217;t support quick profile <a href="https://issues.redhat.com/browse/DBZ-7590">DBZ-7590</a></p> </li> <li> <p>Oracle Connector REST Extension Tests Fail <a href="https://issues.redhat.com/browse/DBZ-7597">DBZ-7597</a></p> </li> <li> <p>Serialization of XML columns with NULL values fails using Infinispan Buffer <a href="https://issues.redhat.com/browse/DBZ-7598">DBZ-7598</a></p> </li> </ul> </div> <div class="paragraph"> <p>A huge thank you to all the contributors from the community who worked on this release: <a href="https://github.com/akulapidAkula">Akula</a>, <a href="https://github.com/akulapid">Akula</a>, <a href="https://github.com/jchipmunk">Andrey Pustovetov</a>, <a href="https://github.com/ani-sha">Anisha Mohanty</a>, <a href="https://github.com/Bue-von-hon">Bue Von Hun</a>, <a href="https://github.com/Naros">Chris Cranford</a>, <a href="https://github.com/enzo-cappa">Enzo Cappa</a>, <a href="https://github.com/harveyyue">Harvey Yue</a>, <a href="https://github.com/jcechace">Jakub Cechacek</a>, <a href="https://github.com/james-johnston-thumbtack">James Johnston</a>, <a href="https://github.com/jpechane">Jiri Pechanec</a>, <a href="https://github.com/nrkljo">Lars M. Johansson</a>, <a href="https://github.com/methodmissing">Lourens Naudé</a>, <a href="https://github.com/mfvitale">Mario Fiore Vitale</a>, <a href="https://github.com/MartinMedek">Martin Medek</a>, <a href="https://github.com/mostafaghadimi">Mostafa Ghadimi</a>, <a href="https://github.com/nancyxu123">Nancy Xu</a>, <a href="https://github.com/obabec">Ondrej Babec</a>, <a href="https://github.com/razvanz">Razvan Laurus</a>, <a href="https://github.com/rk3rn3r">René Kerner</a>, <a href="https://github.com/roldanbob">Robert Roldan</a>, <a href="https://github.com/schampilomatis">Stavros Champilomatis</a>, <a href="https://github.com/vjuranek">Vojtech Juranek</a>, and <a href="https://github.com/xmzhou00">Xianming Zhou</a>!</p> </div> </div> </div> <div class="sect1"> <h2 id="outlook_whats_next">Outlook &amp; What&#8217;s next?</h2> <div class="sectionbody"> <div class="paragraph"> <p>The next few weeks will be focused primarily on stability and bug fixes. We expect to release Debezium 2.6.0.Final in just under three weeks, so we courage you to download and test the latest Beta and provide your feedback.</p> </div> <div class="paragraph"> <p>If you have any questions or interested in what the roadmap holds for not only 2.6 but also the road to the new Debezium 3.0 later this fall, we encourage you to take a look at our <a href="/docs/roadmap">road map</a>. If you have any suggestions or ideas, please feel free to get in touch with us on our <a href="https://groups.google.com/forum/#!forum/debezium">mailing list</a> or in our <a href="https://debezium.zulipchat.com/login/#narrow/stream/302529-users">Zulip chat</a>.</p> </div> <div class="paragraph"> <p>And in closing, our very own Mario Vitale will be speaking at <a href="https://osday.dev">Open Source Day 2024</a>, where he will talk about <a href="https://osday.dev/speakers#mario">Dealing with data consistency - a CDC approach to dual writes</a>. Please be sure to check out his session on Day 1 as a part of the Beta track at 10:45am!</p> </div> <div class="paragraph"> <p>Until next time&#8230;&#8203;</p> </div> </div> </div>]]></content><author><name>Chris Cranford</name></author><category term="releases"/><category term="mongodb"/><category term="mysql"/><category term="postgres"/><category term="sqlserver"/><category term="cassandra"/><category term="oracle"/><category term="db2"/><category term="vitess"/><category term="outbox"/><category term="spanner"/><category term="jdbc"/><category term="informix"/><category term="ibmi"/><summary type="html"><![CDATA[We are pleased to announce the release of Debezium 2.6.0.Beta1. We enter the home stretch with this release, packed with many improvements, enhancements, bug fixes, and yes a brand new Db2 connector for iSeries. There is a lot to cover in this release, so lets dive right in! Breaking changes The team aims to avoid any potential breaking changes between minor releases; however, such changes are sometimes inevitable. Oracle In older versions of Debezium, users were required to manually install the ojdbc8.jar JDBC driver. With 2.6, the connector now bundles the Oracle JDBC driver with the connector, so manual installation is no longer necessary (DBZ-7364). We&#8217;ve also updated the driver to version 21.11.0.0, please verify that you do not have multiple versions after upgrading to Debezium 2.6 (DBZ-7365). Container Images The handling of the MAVEN_DEP_DESTINATION environment variable has changed in the connect-base container image, which is the basis for debezium/connect. It is no longer used for downloading all dependencies, including connectors, but only for general purpose Maven Central located dependencies (DBZ-7551). If you were using custom images that relied on this environment variable, your image build steps may require modifications. Improvements and changes Db2 for iSeries connector Debezium 2.6 introduces a brand-new connector for IBM fans to stream changes from Db2 iSeries/AS400 using the IBM iJournal system. This collaboration is a multi-year development effort from the community, and we&#8217;re pleased that the community has allowed this to be distributed under the Debezium umbrella. The new connector can be obtained from Maven Central using the following coordinates or a direct download. &lt;dependency&gt; &lt;groupId&gt;io.debezium&lt;/groupId&gt; &lt;artifactId&gt;debezium-connector-ibmi&lt;/artifactId&gt; &lt;version&gt;2.6.0.Beta1&lt;/version&gt; &lt;/dependency&gt; The documentation for this new connector is still a work-in-progress. If you have any questions, please be sure to reach out to the team on Zulip or the mailing list. Incremental snapshot row-value constructors for PostgreSQL The PostgreSQL driver supports a SQL syntax called a row-value constructor using the ROW() function. This allows a query to express predicate conditions in a more efficient way when working with multi-columned primary keys that have a suitable index. The incremental snapshot process is an ideal candidate for the use of the ROW() function, the process involves issuing a series of select SQL statements to fetch data in chunks. Each statement, aka chunk query, should ideally be as efficient as possible to minimize the cost overhead of these queries to maximize throughput of your WAL changes to your topics. There are no specific changes needed, but the query issued for PostgreSQL incremental snapshots has been adjusted to take advantage of this new syntax, and therefore users who utilize incremental snapshots should see performance improvements. An example of the old query used might look like this for a simple table: SELECT * FROM users WHERE (a = 10 AND (b &gt; 2 OR b IS NULL)) OR (a &gt; 10) OR (a IS NULL) ORDER BY a, b LIMIT 1024 The new implementation constructs this query using the ROW() function as follows: SELECT * FROM users WHERE row(a,b) &gt; row(10,2) ORDER BY a, b LIMIT 1024 We&#8217;d be interested in any feedback on this change, and what performance improvements are observed. Signal table watermark metadata An incremental snapshot process requires a signal table to write open/close markers to coordinate the change boundaries with the data recorded in the transaction logs, unless you&#8217;re using MySQL&#8217;s read-only flavor. In some cases, users would like to be able to track the window time slot, knowing when the window was opened and closed. Starting with Debezium 2.6, the data column in the signal table will be populated with the time window details, allowing users to obtain when the window was opened and closed. The following shows the details of the data column for each of the two signal markers: Window Open Marker {&quot;openWindowTimestamp&quot;: &quot;&lt;window-open-time&gt;&quot;} Window Close Marker {&quot;openWindowTimestamp&quot;: &quot;&lt;window-open-time&gt;&quot;, &quot;closeWindowTimestamp&quot;: &quot;&lt;window-close-time&gt;&quot;} Oracle Redo SQL per event with LogMiner We have improved the Oracle connector&#8217;s event structure for inserts, updates, and deletes to optionally contain the SQL that was reconstructed by LogMiner in the source information block. This feature is an opt-in only feature that you must enable as this can easily more than double the size of your existing event payload. To enable the inclusion of the REDO SQL as part of the change event, add the following connector configuration: &quot;log.mining.include.redo.sql&quot;: &quot;true&quot; With this option enabled, the source information block contains a new field redo_sql, as shown below: &quot;source&quot;: { ... &quot;redo_sql&quot;: &quot;INSERT INTO \&quot;DEBEZIUM\&quot;.\&quot;TEST\&quot; (\&quot;ID\&quot;,\&quot;DATA\&quot;) values ('1', 'Test');&quot; } This feature cannot be used with lob.enabled set to true due to how LogMiner reconstructs the SQL related to CLOB, BLOB, and XML data types. If the above configuration is added with lob.enabled set to true, the connector will start with an error about this misconfiguration. Oracle LogMiner transaction buffer improvements A new delay-strategy for transaction registration has been added when using LogMiner. This strategy effectively delays the creation of the transaction record in the buffer until we observe the first captured change for that transaction. For users who use the Infinispan cache or who have enabled lob.enabled, this delayed strategy cannot be used due to how specific operations are handled in these two modes of the connector. Delaying transaction registration has a number of benefits, which include: Reducing the overhead on the transaction cache, especially in a highly concurrent transaction scenario. Avoids long-running transactions that have no changes that are being captured by the connector. Should aid in advancing the low-watermark SCN in the offsets more efficiently in specific scenarios. We are looking into how we can explore this change for Infinispan-based users in a future build; however, due to the nature of how lob.enabled works with LogMiner, this feature won&#8217;t be possible for that use case. Improved event timestamp precision Debezium 2.6 introduces a new community requested feature to improve the precision of timestamps in change events. Users will now notice the addition of 4 new fields, two at the envelope level and two in the source information block as shown below: { &quot;source&quot;: { ..., &quot;ts_us&quot;: &quot;1559033904863123&quot;, &quot;ts_ns&quot;: &quot;1559033904863123000&quot; }, &quot;ts_us&quot;: &quot;1580390884335451&quot;, &quot;ts_ns&quot;: &quot;1580390884335451325&quot;, } The envelope values will always provide both microsecond (ts_us) and nanosecond (ts_ns) values while the source information block may have both micro and nano -second precision values truncated to a lower precision if the source database does not provide that level of precision. Informix appends LSN to Transaction Identifier Informix databases only increases the transaction identifier when there are concurrent transactions, otherwise the value remains identical for sequential transactions. This can prove difficult for users who may want to utilize the transaction metadata to order change events in a post processing step. Debezium 2.6 for Informix will now append the log sequence number (LSN) to the transaction identifier so that users can easily sort change events based on the transaction metadata. The transaction identifier field will now use the format &lt;id&gt;:&lt;lsn&gt;. This change affects transaction metadata events and the source information block for change events, as shown below: Transaction Begin Event { &quot;status&quot;: &quot;BEGIN&quot;, &quot;id&quot;: &quot;571:53195829&quot;, ... } Transaction End Event { &quot;status&quot;: &quot;END&quot;, &quot;id&quot;: &quot;571:53195832&quot;, ... } Change Events { ... &quot;source&quot;: { &quot;id&quot;: &quot;571:53195832&quot; ... } } New Arbitrary-based payload formats While it&#8217;s common for users to utilize serialization based on Json, Avro, Protobufs, or CloudEvents, there may be reasons to use a more simplistic format. Thanks to a community contribution as part of DBZ-7512, Debezium can be configured to use two new formats called simplestring and binary. The simplestring and binary formats are configured in Debezium server using the debezium.format configurations. For simplestring, the payload will be serialized as a single STRING data type into the topic. For binary, the payload will be serialized as a BYTES using a byte[] (byte array). Oracle LogMiner Hybrid Mining Strategy Debezium 2.6 also introduces a new Oracle LogMiner mining strategy called hyrid, which can be enabled by setting the configuration property log.mining.strategy with the value of hybrid. This new strategy is designed to support all schema evolution features of the default mining strategy while taking advantage of all the performance optimizations from the online catalog strategy. The main problem with the online_catalog strategy is that if a mining step observes a schema change and a data change in the same mining step, LogMiner is incapable of reconstructing the SQL correctly, which will result in the table name being OBJ# xxxxxx or the columns represented as COL1, COL2, and so on. To avoid this while using the online catalog strategy, users are recommended to perform schema changes in a lock-step pattern to avoid a mining step that observes both a schema change and a data change together; however, this is not always feasible. The new hybrid strategy works by tracking a table&#8217;s object id at the database level and then using this identifier to look up the schema associated with the table from Debezium&#8217;s relational table model. In short, this allows Debezium to do what Oracle LogMiner is unable to do in these specific corner cases. The table name will be taken from the relational model&#8217;s table name and columns will be mapped by column position. Unfortunately, Oracle does not provide a way to reconstruct failed SQL operations for CLOB, BLOB, and XML data types. This means that the new hybrid strategy cannot be configured with configurations that use lob.enabled set to true. If a connector is started using the hybrid strategy and has lob.enabled set to true, the connector will fail to start and report a configuration failure. Other changes Altogether, 86 issues were fixed in this release: MySQL config values validated twice DBZ-2015 PostgreSQL connector doesn&#8217;t restart properly if database if not reachable DBZ-6236 NullPointerException in MongoDB connector DBZ-6434 Tests in RHEL system testsuite throw errors without ocp cluster DBZ-7002 Move timeout configuration of MongoDbReplicaSet into Builder class DBZ-7054 Several Oracle tests fail regularly on Testing Farm infrastructure DBZ-7072 Remove obsolete MySQL version from TF DBZ-7173 Add Oracle 23 to CI test matrix DBZ-7195 Refactor sharded mongo ocp test DBZ-7221 Implement Snapshotter SPI Oracle DBZ-7302 Align snapshot modes for SQLServer DBZ-7303 Update snapshot mode documentation DBZ-7309 Cassandra-4: Debezium connector stops producing events after a schema change DBZ-7363 Upgrade ojdbc8 to 21.11.0.0 DBZ-7365 Document relation between column type and serializers for outbox DBZ-7368 Callout annotations rendered multiple times in downstream User Guide DBZ-7418 Test testEmptyChangesProducesHeartbeat tends to fail randomly DBZ-7453 Align snapshot modes for PostgreSQL, MySQL, Oracle DBZ-7461 PreparedStatement leak in Oracle ReselectColumnsProcessor DBZ-7479 Allow special characters in signal table name DBZ-7480 Document toggling MariaDB mode DBZ-7487 Poor snapshot performance with new reselect SMT DBZ-7488 Debezium Oracle Connector ParsingException on XMLTYPE with lob.enabled=true DBZ-7489 Add informix to main repository CI workflow DBZ-7490 Db2ReselectColumnsProcessorIT does not clean-up after test failures DBZ-7491 Disable Oracle Integration Tests on GitHub DBZ-7494 Unify and adjust thread time outs DBZ-7495 Completion callback called before connector stop DBZ-7496 Add "IF [NOT] EXISTS" DDL support for Oracle 23 DBZ-7498 Deployment examples show attribute name instead of its value DBZ-7499 Fix MySQL 8 event timestamp resolution logic error where fallback to seconds occurs erroneously for non-GTID events DBZ-7500 Remove incubating from Debezium documentation DBZ-7501 Add ability to parse Map&lt;String, Object&gt; into ConfigProperties DBZ-7503 LogMinerHelperIT test shouldAddCorrectLogFiles randomly fails DBZ-7504 Support Oracle 23 SELECT without FROM DBZ-7505 Add Oracle 23 Annotation support for CREATE/ALTER TABLE statements DBZ-7506 TestContainers MongoDbReplicaSetAuthTest randomly fails DBZ-7507 MySQl ReadOnlyIncrementalSnapshotIT testStopSnapshotKafkaSignal fails randomly DBZ-7508 Add Informix to Java Outreach DBZ-7510 Disable parallel record processing in DBZ server tests against Apicurio DBZ-7515 Add Start CDC hook in Reselect Columns PostProcessor Tests DBZ-7516 Remove the unused 'connector' parameter in the createSourceTask method in EmbeddedEngine.java DBZ-7517 Update commons-compress to 1.26.0 DBZ-7520 Promote JDBC sink from Incubating DBZ-7521 Allow to download containers also from Docker Hub DBZ-7524 Update rocketmq version DBZ-7525 signalLogWithEscapedCharacter fails with pgoutput-decoder DBZ-7526 Move RocketMQ dependency to debezium server DBZ-7527 Rework shouldGenerateSnapshotAndContinueStreaming assertions to deal with parallelization DBZ-7530 Multi-threaded snapshot can enqueue changes out of order DBZ-7534 AsyncEmbeddedEngineTest#testTasksAreStoppedIfSomeFailsToStart fails randomly DBZ-7535 MongoDbReplicaSetAuthTest fails randomly DBZ-7537 SQLServer tests taking long time due to database bad state DBZ-7541 Explicitly import jakarta dependencies that are excluded via glassfish filter DBZ-7545 ReadOnlyIncrementalSnapshotIT#testStopSnapshotKafkaSignal fails randomly DBZ-7553 Include RocketMQ and Redis container output into test log DBZ-7557 Allow XStream error ORA-23656 to be retried DBZ-7559 Numeric default value decimal scale mismatch DBZ-7562 Wait for Redis server to start DBZ-7564 Documentation conflict DBZ-7565 Fix null event timestamp possible from FORMAT_DESCRIPTION and PREVIOUS_GTIDS events in MySqlStreamingChangeEventSource::setEventTimestamp DBZ-7567 AsyncEmbeddedEngineTest.testExecuteSmt fails randomly DBZ-7568 Debezium fails to compile with JDK 21 DBZ-7569 Upgrade PostgreSQL driver to 42.6.1 DBZ-7571 Upgrade Kafka to 3.7.0 DBZ-7574 Redis tests fail randomly with JedisConnectionException: Unexpected end of stream DBZ-7576 RedisOffsetIT.testRedisConnectionRetry fails randomly DBZ-7578 Oracle connector always brings OLR dependencies DBZ-7579 Correct JDBC connector dependencies DBZ-7580 Improved logging in case of PostgreSQL failure DBZ-7581 Unavailable Toasted HSTORE Json Storage Mode column causes serialization failure DBZ-7582 Reduce debug logs on tests DBZ-7588 Server SQS sink doesn&#8217;t support quick profile DBZ-7590 Oracle Connector REST Extension Tests Fail DBZ-7597 Serialization of XML columns with NULL values fails using Infinispan Buffer DBZ-7598 A huge thank you to all the contributors from the community who worked on this release: Akula, Akula, Andrey Pustovetov, Anisha Mohanty, Bue Von Hun, Chris Cranford, Enzo Cappa, Harvey Yue, Jakub Cechacek, James Johnston, Jiri Pechanec, Lars M. Johansson, Lourens Naudé, Mario Fiore Vitale, Martin Medek, Mostafa Ghadimi, Nancy Xu, Ondrej Babec, Razvan Laurus, René Kerner, Robert Roldan, Stavros Champilomatis, Vojtech Juranek, and Xianming Zhou! Outlook &amp; What&#8217;s next? The next few weeks will be focused primarily on stability and bug fixes. We expect to release Debezium 2.6.0.Final in just under three weeks, so we courage you to download and test the latest Beta and provide your feedback. If you have any questions or interested in what the roadmap holds for not only 2.6 but also the road to the new Debezium 3.0 later this fall, we encourage you to take a look at our road map. If you have any suggestions or ideas, please feel free to get in touch with us on our mailing list or in our Zulip chat. And in closing, our very own Mario Vitale will be speaking at Open Source Day 2024, where he will talk about Dealing with data consistency - a CDC approach to dual writes. Please be sure to check out his session on Day 1 as a part of the Beta track at 10:45am! Until next time&#8230;&#8203;]]></summary></entry><entry><title type="html">Debezium 2.5.2.Final Released</title><link href="https://debezium.io/blog/2024/02/27/debezium-2-5-2-final-released/" rel="alternate" type="text/html" title="Debezium 2.5.2.Final Released"/><published>2024-02-27T00:00:00+00:00</published><updated>2024-02-27T00:00:00+00:00</updated><id>https://debezium.io/blog/2024/02/27/debezium-2-5-2-final-released</id><content type="html" xml:base="https://debezium.io/blog/2024/02/27/debezium-2-5-2-final-released/"><![CDATA[<div class="paragraph"> <p>We are happy to announce the second maintenance release of the Debezium 2.5 release stream, <strong>Debezium 2.5.2.Final</strong>. This release includes some improvements and numerous bug fixes, so let&#8217;s dive right in&#8230;&#8203;</p> </div> <div class="paragraph"> <p></p> </div> <div class="sect1"> <h2 id="improvements_and_changes">Improvements and changes</h2> <div class="sectionbody"> <div class="sect2"> <h3 id="scoped_keytrust_store_support_with_mongodb">Scoped Key/Trust - store support with MongoDB</h3> <div class="paragraph"> <p>Debezium supports secure connections; however, MongoDB requires that the key/trust -store configurations be supplied as JVM process arguments, which is less than ideal for environments in the cloud. This feature was first introduced as part of Debezium 2.6, and we&#8217;ve opted to back-port this to Debezium 2.5. This new change allows per connector scoped key/trust -store configurations as part of the connector configuration (<a href="https://issues.redhat.com/browse/DBZ-7379">DBZ-7379</a>).</p> </div> <div class="paragraph"> <p>The MongoDB connector now includes the following new configuration properties:</p> </div> <div class="dlist"> <dl> <dt class="hdlist1"><code>mongodb.ssl.keystore</code></dt> <dd> <p>Specifies the path to the SSL keystore file.</p> </dd> <dt class="hdlist1"><code>mongodb.ssl.keystore.password</code></dt> <dd> <p>Specifies the credentials to open and access the SSL keystore provided by <em>mongodb.ssl.keystore</em>.</p> </dd> <dt class="hdlist1"><code>mongodb.ssl.keystore.type</code></dt> <dd> <p>Specifies the SSL keystore file type, defaults to <code>PKC512</code>.</p> </dd> <dt class="hdlist1"><code>mongodb.ssl.truststore</code></dt> <dd> <p>Specifies the path to the SSL truststore file.</p> </dd> <dt class="hdlist1"><code>mongodb.ssl.truststore.password</code></dt> <dd> <p>Specifies the credentials to open and access the SSL truststore provided by <em>mongodb.ssl.truststore</em>.</p> </dd> <dt class="hdlist1"><code>mongodb.ssl.truststore.type</code></dt> <dd> <p>Specifies the SSL truststore file type, defaults to <code>PKC512</code>.</p> </dd> </dl> </div> </div> </div> </div> <div class="sect1"> <h2 id="other_changes">Other changes</h2> <div class="sectionbody"> <div class="paragraph"> <p>Altogether, <a href="https://issues.redhat.com/issues/?jql=project%20%3D%20DBZ%20AND%20fixVersion%20%3D%202.5.2.Final%20ORDER%20BY%20component%20ASC">30 issues</a> were fixed in this release:</p> </div> <div class="ulist"> <ul> <li> <p>PostgreSQL connector doesn&#8217;t restart properly if database if not reachable <a href="https://issues.redhat.com/browse/DBZ-6236">DBZ-6236</a></p> </li> <li> <p>Correctly handle METADATA records <a href="https://issues.redhat.com/browse/DBZ-7176">DBZ-7176</a></p> </li> <li> <p>Cassandra-4: Debezium connector stops producing events after a schema change <a href="https://issues.redhat.com/browse/DBZ-7363">DBZ-7363</a></p> </li> <li> <p>Informix-Connector breaks on table with numerical default value <a href="https://issues.redhat.com/browse/DBZ-7372">DBZ-7372</a></p> </li> <li> <p>Poor performance with incremental snapshot with long list of tables <a href="https://issues.redhat.com/browse/DBZ-7421">DBZ-7421</a></p> </li> <li> <p>Oracle Snapshot mistakenly uses LogMiner Offset Loader by default <a href="https://issues.redhat.com/browse/DBZ-7425">DBZ-7425</a></p> </li> <li> <p>Reselect columns should source key values from after Struct when not using event-key sources <a href="https://issues.redhat.com/browse/DBZ-7429">DBZ-7429</a></p> </li> <li> <p>Allow the C3P0ConnectionProvider to be customized via configuration <a href="https://issues.redhat.com/browse/DBZ-7431">DBZ-7431</a></p> </li> <li> <p>Stopwatch throw NPE when toString is called without having statistics <a href="https://issues.redhat.com/browse/DBZ-7436">DBZ-7436</a></p> </li> <li> <p>Adhoc snapshots are not triggered via File channel signal when submitted before the start of the application <a href="https://issues.redhat.com/browse/DBZ-7441">DBZ-7441</a></p> </li> <li> <p>Upgrade protobuf to 3.25.2 <a href="https://issues.redhat.com/browse/DBZ-7442">DBZ-7442</a></p> </li> <li> <p>Correct debezium.sink.pubsub.flowcontrol.* variable names in Debezium Server docs site <a href="https://issues.redhat.com/browse/DBZ-7443">DBZ-7443</a></p> </li> <li> <p>LogMiner batch size does not increase automatically <a href="https://issues.redhat.com/browse/DBZ-7445">DBZ-7445</a></p> </li> <li> <p>Consolidate version management <a href="https://issues.redhat.com/browse/DBZ-7455">DBZ-7455</a></p> </li> <li> <p>Oracle connector does not ignore reselection for excluded clob/blob columns <a href="https://issues.redhat.com/browse/DBZ-7456">DBZ-7456</a></p> </li> <li> <p>The expected value pattern for table.include.list does not align with the documentation <a href="https://issues.redhat.com/browse/DBZ-7460">DBZ-7460</a></p> </li> <li> <p>Signals actions are not loaded for SQLServer <a href="https://issues.redhat.com/browse/DBZ-7467">DBZ-7467</a></p> </li> <li> <p>MySQL connector cannot parse table with WITH SYSTEM VERSIONING PARTITION BY SYSTEM_TIME <a href="https://issues.redhat.com/browse/DBZ-7468">DBZ-7468</a></p> </li> <li> <p>Test Db2ReselectColumnsProcessorIT randomly fails <a href="https://issues.redhat.com/browse/DBZ-7471">DBZ-7471</a></p> </li> <li> <p>Make readiness and liveness proble timouts configurable <a href="https://issues.redhat.com/browse/DBZ-7476">DBZ-7476</a></p> </li> <li> <p>PreparedStatement leak in Oracle ReselectColumnsProcessor <a href="https://issues.redhat.com/browse/DBZ-7479">DBZ-7479</a></p> </li> <li> <p>Document toggling MariaDB mode <a href="https://issues.redhat.com/browse/DBZ-7487">DBZ-7487</a></p> </li> <li> <p>Poor snapshot performance with new reselect SMT <a href="https://issues.redhat.com/browse/DBZ-7488">DBZ-7488</a></p> </li> <li> <p>Debezium Oracle Connector ParsingException on XMLTYPE with lob.enabled=true <a href="https://issues.redhat.com/browse/DBZ-7489">DBZ-7489</a></p> </li> <li> <p>Fix MySQL 8 event timestamp resolution logic error where fallback to seconds occurs erroneously for non-GTID events <a href="https://issues.redhat.com/browse/DBZ-7500">DBZ-7500</a></p> </li> <li> <p>Add Start CDC hook in Reselect Columns PostProcessor Tests <a href="https://issues.redhat.com/browse/DBZ-7516">DBZ-7516</a></p> </li> <li> <p>Update commons-compress to 1.26.0 <a href="https://issues.redhat.com/browse/DBZ-7520">DBZ-7520</a></p> </li> <li> <p>Promote JDBC sink from Incubating <a href="https://issues.redhat.com/browse/DBZ-7521">DBZ-7521</a></p> </li> <li> <p>Fix null event timestamp possible from FORMAT_DESCRIPTION and PREVIOUS_GTIDS events in MySqlStreamingChangeEventSource::setEventTimestamp <a href="https://issues.redhat.com/browse/DBZ-7567">DBZ-7567</a></p> </li> </ul> </div> <div class="paragraph"> <p>A big thank you to all the contributors from the community who worked on this release: <a href="https://github.com/jchipmunk">Andrey Pustovetov</a>, <a href="https://github.com/Naros">Chris Cranford</a>, <a href="https://github.com/CliffordCheefoon">Clifford Cheefoon</a>, <a href="https://github.com/jcechace">Jakub Cechacek</a>, <a href="https://github.com/jpechane">Jiri Pechanec</a>, <a href="https://github.com/nrkljo">Lars M. Johansson</a>, <a href="https://github.com/methodmissing">Lourens Naudé</a>, <a href="https://github.com/mfvitale">Mario Fiore Vitale</a>, <a href="https://github.com/obabec">Ondrej Babec</a>, <a href="https://github.com/roldanbob">Robert Roldan</a>, and <a href="https://github.com/schampilomatis">Stavros Champilomatis</a>!</p> </div> </div> </div> <div class="sect1"> <h2 id="outlook_whats_next">Outlook &amp; What&#8217;s next?</h2> <div class="sectionbody"> <div class="paragraph"> <p>We are just over a month away from the next minor installment, Debezium 2.6. This next release is packed with tons of new features and changes that we are excited to share. We encourage you to take a moment, grab the pre-releases available <a href="https://debezium.io/documentation/reference/nightly/install.html#_installing_a_debezium_connector">here</a>, and share your feedback.</p> </div> <div class="paragraph"> <p>In a few short weeks, the team will begin to shift focus to what lies ahead with Debezium 2.7. This will be the last minor release of the Debezium 2.x release stream, which will include read-only incremental snapshots for other connectors, a new dedicated MariaDB source connector, and a MongoDB sink connector, just to name a few highlights. We will also be carrying over any work from 2.6 that we&#8217;re still working on but didn&#8217;t make it into that release.</p> </div> <div class="paragraph"> <p>And in closing, the last half of the year will be focusing on Debezium 3, where we&#8217;ll be moving to Java 17, work on new time-series source connectors, and more. Please take a moment and review our <a href="/docs/roadmap">road map</a>. If you have any suggestions or ideas, please feel free to get in touch with us on our <a href="https://groups.google.com/forum/#!forum/debezium">mailing list</a> or in our <a href="https://debezium.zulipchat.com/login/#narrow/stream/302529-users">Zulip chat</a>.</p> </div> <div class="paragraph"> <p>Until next time&#8230;&#8203;</p> </div> </div> </div>]]></content><author><name>Chris Cranford</name></author><category term="releases"/><category term="mongodb"/><category term="mysql"/><category term="postgres"/><category term="sqlserver"/><category term="cassandra"/><category term="oracle"/><category term="db2"/><category term="vitess"/><category term="outbox"/><category term="spanner"/><category term="jdbc"/><summary type="html"><![CDATA[We are happy to announce the second maintenance release of the Debezium 2.5 release stream, Debezium 2.5.2.Final. This release includes some improvements and numerous bug fixes, so let&#8217;s dive right in&#8230;&#8203;]]></summary></entry><entry><title type="html">Debezium 2.6.0.Alpha2 Released</title><link href="https://debezium.io/blog/2024/02/13/debezium-2.6-alpha2-released/" rel="alternate" type="text/html" title="Debezium 2.6.0.Alpha2 Released"/><published>2024-02-13T00:00:00+00:00</published><updated>2024-02-13T00:00:00+00:00</updated><id>https://debezium.io/blog/2024/02/13/debezium-2.6-alpha2-released</id><content type="html" xml:base="https://debezium.io/blog/2024/02/13/debezium-2.6-alpha2-released/"><![CDATA[<div class="paragraph"> <p>As we&#8217;ve hit the mid-mark of the quarter, the team is pleased to announce the second installment of the Debezium 2.6 release stream, <strong>Debezium 2.6.0.Alpha2</strong>. This release is filled to the brim with new features, improvements, and bug fixes, so let&#8217;s dive into these&#8230;&#8203;</p> </div> <div class="paragraph"> <p></p> </div> <div class="sect1"> <h2 id="breaking_changes">Breaking changes</h2> <div class="sectionbody"> <div class="paragraph"> <p>The team aims to avoid any potential breaking changes between minor releases; however, such changes are sometimes inevitable.</p> </div> <div class="dlist"> <dl> <dt class="hdlist1">Vitess</dt> <dd> <div class="ulist"> <ul> <li> <p>The task configuration format used by previous versions of the connector could de-stabilize the Kafka Connect cluster. To resolve the problem, Debezium 2.6 introduces a new configuration format that is incompatible with the previous format (<a href="https://issues.redhat.com/browse/DBZ-7250">DBZ-7250</a>). When upgrading, you may experience a <code>NullPointerException</code> and the error indicating that the connector was unable to instantiate a task because it contains an invalid task configuration.<br> <br> If you experience this problem, delete and re-create the connector, using the same name and configuration as before. The connector(s) will start and re-use the offsets last stored by using the same name, but will not re-use the old task configurations, avoiding the start-up failure.</p> </li> </ul> </div> </dd> </dl> </div> </div> </div> <div class="sect1"> <h2 id="improvements_and_changes">Improvements and changes</h2> <div class="sectionbody"> <div class="sect2"> <h3 id="java_17_now_compile_time_requirement">Java 17 now compile-time requirement</h3> <div class="paragraph"> <p>Debezium 3.0 which will debut later this fall will once again shift the Java baseline requirement from Java 11 to 17 to use Debezium. In preparation for Debezium 3 later this year, we are making the shift to a compile-time baseline for Debezium 2.6 and 2.7 to require Java 17 (<a href="https://issues.redhat.com/browse/DBZ-7387">DBZ-7387</a>).</p> </div> <div class="paragraph"> <p>If you are a Debezium user, and you consume Debezium connectors, this will require no action on your part. You can continue to use Java 11 for now without issue, understanding that Debezium 3 will require Java 17 later this year.</p> </div> <div class="paragraph"> <p>If you are developing Debezium connectors, Java 17 is now baseline to compile the Debezium source. If you have been using Java 17, there should be no action taken on your part. If you previously were using Java 11, you will need to move to Java 17 in order to compile from source.</p> </div> <div class="paragraph"> <p>If you are using the Debezium Quarkus Outbox Extension (not the Outbox SMT), as Quarkus 3.7+ is making the move to Java 17 as their baseline, the Debezium Quarkus Outbox Extension will now require Java 17 as a baseline for both runtime and compile time.</p> </div> <div class="paragraph"> <p>We expect this transition to be mostly seamless for most users as this should have absolutely no impact on the runtime of Debezium&#8217;s connectors nor Debezium Server at this time.</p> </div> </div> <div class="sect2"> <h3 id="asynchronous_embedded_engine">Asynchronous Embedded Engine</h3> <div class="paragraph"> <p>If you&#8217;re hearing about the Embedded Engine for the first time, Debezium ships with three ways to run Debezium connectors. The most common is to deploy Debezium on Kafka Connect while the second most common is to use Debezium Server, a read-made runtime for Debezium connectors. However, there is a third option called the Embedded Engine, and it is what Debezium uses internally for its test suite, it&#8217;s the foundation for Debezium Server, and it&#8217;s meant to provide a way to embed Debezium connectors inside your own application. The embedded engine is used by a variety of external contributors and frameworks, most notably Apache Flink heavily relies on the embedded engine for their Debezium based CDC connectors.</p> </div> <div class="paragraph"> <p>One of the biggest and major new features of Debezium 2.6 is the work on the asynchronous embedded engine that we are debuting in this alpha release. This new asynchronous version the foundation for which Debezium Server and the future of embedding Debezium is based. This change focuses on several key goals and initiatives:</p> </div> <div class="ulist"> <ul> <li> <p>Run multiple source tasks for a given connector, if the connector supports multiple tasks</p> </li> <li> <p>Run time-consuming code (transformations or serialization) in dedicated threads</p> </li> <li> <p>Allow additional performance by disabling event dispatch order</p> </li> <li> <p>Provide future technology benefits of things such as virtual threads and delegating to external workers</p> </li> <li> <p>Better integration with Debezium Operator for Kubernetes and Debezium UI</p> </li> <li> <p>Seamlessly integrate with Quarkus for Debezium Server</p> </li> </ul> </div> <div class="paragraph"> <p>What this new asynchronous model does not include or focus on are the following:</p> </div> <div class="ulist"> <ul> <li> <p>Implement parallelization inside a connector&#8217;s main capture loop.</p> </li> <li> <p>Remove any dependency from Kafka Connect</p> </li> <li> <p>Add support for multiple source connectors per Engine deployment</p> </li> <li> <p>Add support for sink connectors</p> </li> </ul> </div> <div class="admonitionblock note"> <table> <tr> <td class="icon"> <i class="fa icon-note" title="Note"></i> </td> <td class="content"> <div class="paragraph"> <p>Even if a connector is single-threaded and does not support multiple tasks, a connector deployment using the Embedded Engine or Debezium Server can take advantage of the new asynchronous model. A large portion of time during even dispatch is spent on transformation and serialization phases, so utilizing the new dedicated worker threads for such stages improves throughput.</p> </div> </td> </tr> </table> </div> <div class="paragraph"> <p>For developers who want to get started with the new asynchronous embedded engine, a new package is now included in the <code>debezium-embedded</code> artifact called <code>io.debezium.embedded.async</code> and this package contains all the pertinent components to utilizing this new implementation. The asynchronous model can be constructed in a similar way to the serial version using the builder pattern, shown below.</p> </div> <div class="listingblock"> <div class="content"> <pre class="CodeRay highlight"><code data-lang="java"><span class="directive">final</span> DebeziumEngine engine = <span class="keyword">new</span> AsyncEngine.AsyncEngineBuilder()
    .using(properties)
    .notifying(<span class="local-variable">this</span>::changeConsumerHandler)
    .build();</code></pre> </div> </div> <div class="paragraph"> <p>We encourage everyone to take a look at the new Asynchronous Embedded Engine model, let us know your thoughts and if you spot any bugs or problems. We will be updating the documentation in coming releases to highlight all the benefits and changes, including examples. Until then, you can find all the details in the design document, <a href="https://github.com/vjuranek/debezium-design-documents/blob/DBZ-7073/DDD-7.md">DDD-7</a>.</p> </div> </div> <div class="sect2"> <h3 id="timestamp_converter_improvements">Timestamp converter improvements</h3> <div class="paragraph"> <p>Debezium released the new <code>TimezoneConverter</code> in Debezium 2.4, allowing users to target a specific time zone and to convert the outgoing payload time values to that targeted time zone. The original implementation was specifically restricted to allow conversion of values within the <code>before</code> or <code>after</code> parts of the payload; however, thanks to an improvement as a part of <a href="https://issues.redhat.com/browse/DBZ-7022">DBZ-7022</a>, the converter can now be used to convert other time-based fields in the metadata, such as <code>ts_ms</code> in the <code>source</code> information block.</p> </div> <div class="paragraph"> <p>This change helps to improve lag metric calculations in situations where the JVM running the connector is using a time zone that differs from the database and the calculation of the <em>envelope ts_ms</em> - <em>source ts_ms</em> results in a variance caused by the time zone. By using the <code>TimezoneConverter</code> to convert metadata fields, you can easily calculate the lag between those two fields without the time zone interfering.</p> </div> </div> <div class="sect2"> <h3 id="sql_server_query_improvements">SQL Server query improvements</h3> <div class="paragraph"> <p>The Debezium SQL Server utilizes a common SQL Server stored procedure called <code>fn_cdc_get_all_changes&#8230;&#8203;</code> to fetch all the relevant captured changes for a given table. This query performs several unions and only ever returns data from one of the union sub-queries, which can be inefficient.</p> </div> <div class="paragraph"> <p>Debezium 2.6 for SQL Server introduces a new configuration property <code>data.query.mode</code> that can be used to influence which specific method the connector will use to gather the details about table changes (<a href="https://issues.redhat.com/browse/DBZ-7273">DBZ-7273</a>). The default remains unchanged from older releases, using the value <code>function</code> to delegate to the above aforementioned stored procedure. A new option, called <code>direct</code>, can be used instead to build the query directly within the connector to gather the changes more efficiently.</p> </div> </div> <div class="sect2"> <h3 id="scoped_keytrust_store_support_with_mongodb">Scoped Key/Trust - store support with MongoDB</h3> <div class="paragraph"> <p>Debezium supports secure connections; however, MongoDB requires that the key/trust -store configurations be supplied as JVM process arguments, which is less than ideal for environments like the cloud. As a first step toward aligning how secure connection configuration is specified across our connectors, Debezium 2.6 for MongoDB now supports specifying scoped key/trust -store configurations in the connector configuration (<a href="https://issues.redhat.com/browse/DBZ-7379">DBZ-7379</a>).</p> </div> <div class="paragraph"> <p>The MongoDB connector now includes the following new configuration properties:</p> </div> <div class="dlist"> <dl> <dt class="hdlist1"><code>mongodb.ssl.keystore</code></dt> <dd> <p>Specifies the path to the SSL keystore file.</p> </dd> <dt class="hdlist1"><code>mongodb.ssl.keystore.password</code></dt> <dd> <p>Specifies the credentials to open and access the SSL keystore provided by <em>mongodb.ssl.keystore</em>.</p> </dd> <dt class="hdlist1"><code>mongodb.ssl.keystore.type</code></dt> <dd> <p>Specifies the SSL keystore file type, defaults to <code>PKC512</code>.</p> </dd> <dt class="hdlist1"><code>mongodb.ssl.truststore</code></dt> <dd> <p>Specifies the path to the SSL truststore file.</p> </dd> <dt class="hdlist1"><code>mongodb.ssl.truststore.password</code></dt> <dd> <p>Specifies the credentials to open and access the SSL truststore provided by <em>mongodb.ssl.truststore</em>.</p> </dd> <dt class="hdlist1"><code>mongodb.ssl.truststore.type</code></dt> <dd> <p>Specifies the SSL truststore file type, defaults to <code>PKC512</code>.</p> </dd> </dl> </div> </div> <div class="sect2"> <h3 id="source_transaction_id_changes">Source transaction id changes</h3> <div class="paragraph"> <p>All Debezium change events contain a special metadata block called the <code>source</code> information block. This part of the event payload is responsible for providing metadata about the change event, including the unique identifier of the change, the time the change happened, the database and table the change is in reference to, as well as transaction metadata about the transaction that the change participated in.</p> </div> <div class="paragraph"> <p>In Debezium 2.6, the <code>transaction_id</code> field in the source information block will no longer be provided unless the field is populated with a value. This should present no issue for users as this field was only populated when the connector was configured with <code>provide.transaction.metadata</code> set to <code>true</code> (<a href="https://issues.redhat.com/browse/DBZ-7380">DBZ-7380</a>).</p> </div> <div class="paragraph"> <p>If you have tooling that expects the existence of the source information block&#8217;s <code>transaction_id</code> field although its optional, you will need to adjust that behavior as the field will no longer be present unless populated.</p> </div> </div> <div class="sect2"> <h3 id="google_pubsub_ordering_key_support">Google PubSub Ordering Key Support</h3> <div class="paragraph"> <p>The Debezium Server Google PubSub sink adapter has received a small update in Debezium 2.6. If you are streaming changes that have foreign key relationships, you may have wondered whether it was possible to specify an ordering key so that foreign key constraints could be maintained.</p> </div> <div class="paragraph"> <p>Debezium 2.6 introduces a new configurable property for the Google PubSub sink adapter, <code>ordering.key</code>, which allows the sink adapter to use an externally provided ordering key from the connector configuration for the events rather than using the default behavior based on the event&#8217;s key (<a href="https://issues.redhat.com/browse/DBZ-7435">DBZ-7435</a>).</p> </div> </div> <div class="sect2"> <h3 id="mongodb_uuid_key_support_for_incremental_snapshots">MongoDB UUID key support for Incremental snapshots</h3> <div class="paragraph"> <p>As a small improvement to the Incremental Snapshot process for the Debezium for MongoDB connector, Debezium 2.6 adds support for the UUID data type, allowing this data type to be used within the Incremental Snapshot process like other data types (<a href="https://issues.redhat.com/browse/DBZ-7451">DBZ-7451</a>).</p> </div> </div> <div class="sect2"> <h3 id="mongodb_post_image_changes">MongoDB post-image changes</h3> <div class="paragraph"> <p>The MongoDB connector&#8217;s event payload can be configured to include the full document that was changed in an update. The connector previously made an opinionated choice about how the full document would be fetched as part of the change stream; however, this behavior was not consistent with our expectations in all use cases.</p> </div> <div class="paragraph"> <p>Debezium 2.6 introduces a new configuration option, <code>capture.mode.full.update.type</code>, allowing the connector to explicitly control how the change stream&#8217;s full document lookup should be handled (<a href="https://issues.redhat.com/browse/DBZ-7299">DBZ-7299</a>). The default value for this option is <code>lookup</code>, meaning that the database will make a separate look-up to fetch the full document. If you are working with MongoDB 6+, you can also elect to use <code>post_image</code> to rely on MongoDB change stream&#8217;s post-image support.</p> </div> </div> </div> </div> <div class="sect1"> <h2 id="other_changes">Other changes</h2> <div class="sectionbody"> <div class="paragraph"> <p>Altogether, <a href="https://issues.redhat.com/issues/?jql=project%20%3D%20DBZ%20AND%20fixVersion%20%3D%202.6.0.Alpha2%20ORDER%20BY%20component%20ASC">66 issues</a> were fixed in this release:</p> </div> <div class="ulist"> <ul> <li> <p>Add Number of records captured and processed as metrics for Debezium MongoDB Connector <a href="https://issues.redhat.com/browse/DBZ-6432">DBZ-6432</a></p> </li> <li> <p>Connector is getting stopped while processing bulk update(50k) records in debezium server 2.0.1.Final <a href="https://issues.redhat.com/browse/DBZ-6955">DBZ-6955</a></p> </li> <li> <p>Error when fail converting value with internal schema <a href="https://issues.redhat.com/browse/DBZ-7143">DBZ-7143</a></p> </li> <li> <p>Remove obsolete MySQL version from TF <a href="https://issues.redhat.com/browse/DBZ-7173">DBZ-7173</a></p> </li> <li> <p>Correctly handle METADATA records <a href="https://issues.redhat.com/browse/DBZ-7176">DBZ-7176</a></p> </li> <li> <p>Move Snapshotter interface to core module as SPI <a href="https://issues.redhat.com/browse/DBZ-7300">DBZ-7300</a></p> </li> <li> <p>Implement Snapshotter SPI MySQL/MariaDB <a href="https://issues.redhat.com/browse/DBZ-7301">DBZ-7301</a></p> </li> <li> <p>Update the Debezium UI repo with local development infra and readme file. <a href="https://issues.redhat.com/browse/DBZ-7353">DBZ-7353</a></p> </li> <li> <p>Debezium fails after table split operation <a href="https://issues.redhat.com/browse/DBZ-7360">DBZ-7360</a></p> </li> <li> <p>Update QOSDK to the latest version <a href="https://issues.redhat.com/browse/DBZ-7361">DBZ-7361</a></p> </li> <li> <p>Support DECFLOAT in Db2 connector <a href="https://issues.redhat.com/browse/DBZ-7362">DBZ-7362</a></p> </li> <li> <p>Create PubSub example for DS deployed via operator <a href="https://issues.redhat.com/browse/DBZ-7370">DBZ-7370</a></p> </li> <li> <p>Upstream artefact server image preparation job failing <a href="https://issues.redhat.com/browse/DBZ-7371">DBZ-7371</a></p> </li> <li> <p>Informix-Connector breaks on table with numerical default value <a href="https://issues.redhat.com/browse/DBZ-7372">DBZ-7372</a></p> </li> <li> <p>Tests in RHEL system testsuite fail to initialize Kafka containers <a href="https://issues.redhat.com/browse/DBZ-7373">DBZ-7373</a></p> </li> <li> <p>MSSQL wrong default values in db schema for varchar, nvarchar, char columns <a href="https://issues.redhat.com/browse/DBZ-7374">DBZ-7374</a></p> </li> <li> <p>Fix logging for schema only recovery mode in mysql connector <a href="https://issues.redhat.com/browse/DBZ-7376">DBZ-7376</a></p> </li> <li> <p>Replace additional rolebinding definition in kubernetes.yml with @RBACRule <a href="https://issues.redhat.com/browse/DBZ-7381">DBZ-7381</a></p> </li> <li> <p>Records from snapshot delivered out of order <a href="https://issues.redhat.com/browse/DBZ-7382">DBZ-7382</a></p> </li> <li> <p>Upgrade json-path to 2.9.0 <a href="https://issues.redhat.com/browse/DBZ-7383">DBZ-7383</a></p> </li> <li> <p>Fix mysql version in mysql-replication container images <a href="https://issues.redhat.com/browse/DBZ-7384">DBZ-7384</a></p> </li> <li> <p>Reduce size of docker image for Debezium 2.6 and up <a href="https://issues.redhat.com/browse/DBZ-7385">DBZ-7385</a></p> </li> <li> <p>Remove the use of Lombok in Debezium testsuite <a href="https://issues.redhat.com/browse/DBZ-7386">DBZ-7386</a></p> </li> <li> <p>Upgrade Outbox Extension to Quarkus 3.7.0 <a href="https://issues.redhat.com/browse/DBZ-7388">DBZ-7388</a></p> </li> <li> <p>Add dependancy update bot to the UI Repo <a href="https://issues.redhat.com/browse/DBZ-7392">DBZ-7392</a></p> </li> <li> <p>Duplicate Debezium SMT transform <a href="https://issues.redhat.com/browse/DBZ-7416">DBZ-7416</a></p> </li> <li> <p>Kinesis Sink Exception on PutRecord <a href="https://issues.redhat.com/browse/DBZ-7417">DBZ-7417</a></p> </li> <li> <p>ParsingException (MariaDB Only): alterSpec drop foreign key with 'tablename.' prefix <a href="https://issues.redhat.com/browse/DBZ-7420">DBZ-7420</a></p> </li> <li> <p>Poor performance with incremental snapshot with long list of tables <a href="https://issues.redhat.com/browse/DBZ-7421">DBZ-7421</a></p> </li> <li> <p>Fix the unit test cases <a href="https://issues.redhat.com/browse/DBZ-7423">DBZ-7423</a></p> </li> <li> <p>Oracle Snapshot mistakenly uses LogMiner Offset Loader by default <a href="https://issues.redhat.com/browse/DBZ-7425">DBZ-7425</a></p> </li> <li> <p>Reselect columns should source key values from after Struct when not using event-key sources <a href="https://issues.redhat.com/browse/DBZ-7429">DBZ-7429</a></p> </li> <li> <p>Allow the C3P0ConnectionProvider to be customized via configuration <a href="https://issues.redhat.com/browse/DBZ-7431">DBZ-7431</a></p> </li> <li> <p>Stopwatch throw NPE when toString is called without having statistics <a href="https://issues.redhat.com/browse/DBZ-7436">DBZ-7436</a></p> </li> <li> <p>ReselectColumnsPostProcessor filter not use exclude predicate <a href="https://issues.redhat.com/browse/DBZ-7437">DBZ-7437</a></p> </li> <li> <p>Adopt Oracle 23 to Testing Farm <a href="https://issues.redhat.com/browse/DBZ-7439">DBZ-7439</a></p> </li> <li> <p>Adhoc snapshots are not triggered via File channel signal when submitted before the start of the application <a href="https://issues.redhat.com/browse/DBZ-7441">DBZ-7441</a></p> </li> <li> <p>Upgrade protobuf to 3.25.2 <a href="https://issues.redhat.com/browse/DBZ-7442">DBZ-7442</a></p> </li> <li> <p>Correct debezium.sink.pubsub.flowcontrol.* variable names in Debezium Server docs site <a href="https://issues.redhat.com/browse/DBZ-7443">DBZ-7443</a></p> </li> <li> <p>LogMiner batch size does not increase automatically <a href="https://issues.redhat.com/browse/DBZ-7445">DBZ-7445</a></p> </li> <li> <p>Reduce string creation during SQL_REDO column read <a href="https://issues.redhat.com/browse/DBZ-7446">DBZ-7446</a></p> </li> <li> <p>Evaluate container image size for Debezium UI served by nginx <a href="https://issues.redhat.com/browse/DBZ-7447">DBZ-7447</a></p> </li> <li> <p>Upgrade Quarkus for Debezium Server to 3.2.9.Final <a href="https://issues.redhat.com/browse/DBZ-7449">DBZ-7449</a></p> </li> <li> <p>Fix TimescaleDbDatabaseTest to run into test container <a href="https://issues.redhat.com/browse/DBZ-7452">DBZ-7452</a></p> </li> <li> <p>Consolidate version management <a href="https://issues.redhat.com/browse/DBZ-7455">DBZ-7455</a></p> </li> <li> <p>Oracle connector does not ignore reselection for excluded clob/blob columns <a href="https://issues.redhat.com/browse/DBZ-7456">DBZ-7456</a></p> </li> <li> <p>Upgrade example-mongo image version to 6.0 <a href="https://issues.redhat.com/browse/DBZ-7457">DBZ-7457</a></p> </li> <li> <p>The expected value pattern for table.include.list does not align with the documentation <a href="https://issues.redhat.com/browse/DBZ-7460">DBZ-7460</a></p> </li> <li> <p>SQL Server queries with special characters fail after applying DBZ-7273 <a href="https://issues.redhat.com/browse/DBZ-7463">DBZ-7463</a></p> </li> <li> <p>Signals actions are not loaded for SQLServer <a href="https://issues.redhat.com/browse/DBZ-7467">DBZ-7467</a></p> </li> <li> <p>MySQL connector cannot parse table with WITH SYSTEM VERSIONING PARTITION BY SYSTEM_TIME <a href="https://issues.redhat.com/browse/DBZ-7468">DBZ-7468</a></p> </li> <li> <p>Test Db2ReselectColumnsProcessorIT randomly fails <a href="https://issues.redhat.com/browse/DBZ-7471">DBZ-7471</a></p> </li> <li> <p>Postgres images require clang-11 <a href="https://issues.redhat.com/browse/DBZ-7475">DBZ-7475</a></p> </li> <li> <p>Make readiness and liveness proble timouts configurable <a href="https://issues.redhat.com/browse/DBZ-7476">DBZ-7476</a></p> </li> <li> <p>Snapshotter SPI wrongly loaded on Debezium Server <a href="https://issues.redhat.com/browse/DBZ-7481">DBZ-7481</a></p> </li> </ul> </div> <div class="paragraph"> <p>A big thank you to all the contributors from the community who worked on this release: <a href="https://github.com/jchipmunk">Andrey Pustovetov</a>, <a href="https://github.com/akanimesh7">Animesh Kumar</a>, <a href="https://github.com/ani-sha">Anisha Mohanty</a>, <a href="https://github.com/shybovycha">Artem Shubovych</a>, <a href="https://github.com/ArthurLERAY">ArthurLR</a>, <a href="https://github.com/roldanbob">Bob Roldan</a>, <a href="https://github.com/brenoavm">Breno Moreira</a>, <a href="https://github.com/Naros">Chris Cranford</a>, <a href="https://github.com/CliffordCheefoon">Clifford Cheefoon</a>, <a href="https://github.com/ilyasahsan123">Ilyas Ahsan</a>, <a href="https://github.com/indraraj">Indra Shukla</a>, <a href="https://github.com/nicholas-fwang">Inki Hwang</a>, <a href="https://github.com/jcechace">Jakub Cechacek</a>, <a href="https://github.com/iankko">Jan.Lieskovsky</a>, <a href="https://github.com/novotnyJiri">Jiri Novotny</a>, <a href="https://github.com/jpechane">Jiri Pechanec</a>, <a href="https://github.com/JordanP">Jordan Pittier</a>, <a href="https://github.com/nrkljo">Lars M. Johansson</a>, <a href="https://github.com/mfvitale">Mario Fiore Vitale</a>, <a href="https://github.com/MartinMedek">Martin Medek</a>, <a href="https://github.com/obabec">Ondrej Babec</a>, <a href="https://github.com/rk3rn3r">René Kerner</a>, <a href="https://github.com/roldanbob">Robert Roldan</a>, <a href="https://github.com/eizners">Sergey Eizner</a>, <a href="https://github.com/Fr0z3Nn">Sergey Ivanov</a>, <a href="https://github.com/twthorn">Thomas Thornton</a>, <a href="https://github.com/koneru9999">V K</a>, <a href="https://github.com/ramanenka">Vadzim Ramanenka</a>, <a href="https://github.com/vjuranek">Vojtech Juranek</a>, and <a href="https://github.com/leoloel">leoloel</a>!</p> </div> </div> </div> <div class="sect1"> <h2 id="outlook_whats_next">Outlook &amp; What&#8217;s next?</h2> <div class="sectionbody"> <div class="paragraph"> <p>We&#8217;ve reached the mid-way point for the quarter&#8217;s development cycle for 2.6 and the team is beginning our transition to the latter half where our focus is more on stability, regressions, and bug fixes. There are still a number of new features and improvements on the horizon, so you can expect those in the coming two weeks when our first beta preview release will be published for Debezium 2.6.</p> </div> <div class="paragraph"> <p>As always, if you have any questions or interested in what the roadmap holds for not only 2.6 but also the road to the new Debezium 3.0 later this fall, we encourage you to take a look at our <a href="/docs/roadmap">road map</a>. If you have any suggestions or ideas, please feel free to get in touch with us on our <a href="https://groups.google.com/forum/#!forum/debezium">mailing list</a> or in our <a href="https://debezium.zulipchat.com/login/#narrow/stream/302529-users">Zulip chat</a>.</p> </div> <div class="paragraph"> <p>Until next time&#8230;&#8203;</p> </div> </div> </div>]]></content><author><name>Chris Cranford</name></author><category term="releases"/><category term="mongodb"/><category term="mysql"/><category term="postgres"/><category term="sqlserver"/><category term="cassandra"/><category term="oracle"/><category term="db2"/><category term="vitess"/><category term="outbox"/><category term="spanner"/><category term="jdbc"/><summary type="html"><![CDATA[As we&#8217;ve hit the mid-mark of the quarter, the team is pleased to announce the second installment of the Debezium 2.6 release stream, Debezium 2.6.0.Alpha2. This release is filled to the brim with new features, improvements, and bug fixes, so let&#8217;s dive into these&#8230;&#8203;]]></summary></entry><entry><title type="html">Debezium 2.5.1.Final Released</title><link href="https://debezium.io/blog/2024/01/30/debezium-2-5-1-final-released/" rel="alternate" type="text/html" title="Debezium 2.5.1.Final Released"/><published>2024-01-30T00:00:00+00:00</published><updated>2024-01-30T00:00:00+00:00</updated><id>https://debezium.io/blog/2024/01/30/debezium-2-5-1-final-released</id><content type="html" xml:base="https://debezium.io/blog/2024/01/30/debezium-2-5-1-final-released/"><![CDATA[<div class="paragraph"> <p>While we remain on track with the upcoming Debezium 2.6 release, we are continuously looking at improvements and fixes that are being made that ensures that older releases continue to provide the best possible experience. With that, the team is pleased to announce the first maintenance release of Debezium 2.5, <strong>Debezium 2.5.1.Final</strong>. Let&#8217;s dive into what this release includes and what you should be aware of while upgrading&#8230;&#8203;</p> </div> <div class="paragraph"> <p></p> </div> <div class="sect1"> <h2 id="breaking_changes">Breaking changes</h2> <div class="sectionbody"> <div class="paragraph"> <p>The team aims to avoid any potential breaking changes between minor releases; however, such changes are sometimes inevitable.</p> </div> <div class="dlist"> <dl> <dt class="hdlist1">Re-select Columns Post Processor</dt> <dd> <div class="ulist"> <ul> <li> <p>The re-select columns post processor used the key based on the <code>message.key.columns</code> when building the query. This is not correct for most tables with primary keys. The default behavior has changed and the table primary key is used by default. A new configuration option was introduced to allow the user to choose between whether to use the primary key or the generated key, <code>reselect.use.event.key</code> (<a href="https://issues.redhat.com/browse/DBZ-7358">DBZ-7358</a>).</p> </li> </ul> </div> </dd> </dl> </div> </div> </div> <div class="sect1"> <h2 id="improvements_and_changes">Improvements and changes</h2> <div class="sectionbody"> <div class="sect2"> <h3 id="mongodb_post_image_changes">MongoDB post-image changes</h3> <div class="paragraph"> <p>The MongoDB connector&#8217;s event payload can be configured to include the full document that was changed in an update. The connector previously made an opinionated choice about how the full document would be fetched as part of the change stream; however, this behavior was not consistent with our expectations in all use cases.</p> </div> <div class="paragraph"> <p>Debezium 2.5+ introduces a new configuration option, <code>capture.mode.full.update.type</code>, allowing the connector to explicitly control how the change stream&#8217;s full document lookup should be handled (<a href="https://issues.redhat.com/browse/DBZ-7299">DBZ-7299</a>). The default value for this option is <code>lookup</code>, meaning that the database will make a separate look-up to fetch the full document. If you are working with MongoDB 6+, you can also elect to use <code>post_image</code> to rely on MongoDB change stream&#8217;s post-image support.</p> </div> </div> </div> </div> <div class="sect1"> <h2 id="other_changes">Other changes</h2> <div class="sectionbody"> <div class="paragraph"> <p>Altogether, <a href="https://issues.redhat.com/issues/?jql=project%20%3D%20DBZ%20AND%20fixVersion%20%3D%202.5.1.Final%20ORDER%20BY%20component%20ASC">21 issues</a> were fixed in this release:</p> </div> <div class="ulist"> <ul> <li> <p>Connector is getting stopped while processing bulk update(50k) records in debezium server 2.0.1.Final <a href="https://issues.redhat.com/browse/DBZ-6955">DBZ-6955</a></p> </li> <li> <p>Empty object sent to GCP Pub/Sub after DELETE event <a href="https://issues.redhat.com/browse/DBZ-7098">DBZ-7098</a></p> </li> <li> <p>Debezium-ddl-parser crashes on parsing MySQL DDL statement (sub-query with UNION) <a href="https://issues.redhat.com/browse/DBZ-7259">DBZ-7259</a></p> </li> <li> <p>Oracle DDL parsing error in PARTITION REFERENCE <a href="https://issues.redhat.com/browse/DBZ-7266">DBZ-7266</a></p> </li> <li> <p>PostgreSQL ad-hoc blocking snapshots fail when snapshot mode is "never" <a href="https://issues.redhat.com/browse/DBZ-7311">DBZ-7311</a></p> </li> <li> <p>Ad-hoc blocking snapshot dies with "invalid snapshot identifier" immediately after connector creation <a href="https://issues.redhat.com/browse/DBZ-7312">DBZ-7312</a></p> </li> <li> <p>Specifying a table include list with spaces between elements cause LogMiner queries to miss matches <a href="https://issues.redhat.com/browse/DBZ-7315">DBZ-7315</a></p> </li> <li> <p>Debezium heartbeat.action.query does not start before writing to WAL: part 2 <a href="https://issues.redhat.com/browse/DBZ-7316">DBZ-7316</a></p> </li> <li> <p>Oracle connector is occasionally unable to find SCN <a href="https://issues.redhat.com/browse/DBZ-7345">DBZ-7345</a></p> </li> <li> <p>Initial snapshot notifications should use full identifier. <a href="https://issues.redhat.com/browse/DBZ-7347">DBZ-7347</a></p> </li> <li> <p>Debezium fails after table split operation <a href="https://issues.redhat.com/browse/DBZ-7360">DBZ-7360</a></p> </li> <li> <p>MSSQL wrong default values in db schema for varchar, nvarchar, char columns <a href="https://issues.redhat.com/browse/DBZ-7374">DBZ-7374</a></p> </li> <li> <p>Replace additional role binding definition in kubernetes.yml with @RBACRule <a href="https://issues.redhat.com/browse/DBZ-7381">DBZ-7381</a></p> </li> <li> <p>Kinesis Sink Exception on PutRecord <a href="https://issues.redhat.com/browse/DBZ-7417">DBZ-7417</a></p> </li> <li> <p>ParsingException (MariaDB Only): alterSpec drop foreign key with 'tablename.' prefix <a href="https://issues.redhat.com/browse/DBZ-7420">DBZ-7420</a></p> </li> </ul> </div> <div class="paragraph"> <p>A big thank you to all the contributors from the community who worked on this release: <a href="https://github.com/ani-sha">Anisha Mohanty</a>, <a href="https://github.com/brenoavm">Breno Moreira</a>, <a href="https://github.com/Naros">Chris Cranford</a>, <a href="https://github.com/ilyasahsan123">Ilyas Ahsan</a>, <a href="https://github.com/jcechace">Jakub Cechacek</a>, <a href="https://github.com/james-johnston-thumbtack">James Johnston</a>, <a href="https://github.com/jpechane">Jiri Pechanec</a>, <a href="https://github.com/mfvitale">Mario Fiore Vitale</a>, <a href="https://github.com/mimaison">Mickael Maison</a>, <a href="https://github.com/wukachn">Peter Hamer</a>, <a href="https://github.com/roldanbob">Robert Roldan</a>, <a href="https://github.com/koneru9999">V K</a>, and <a href="https://github.com/leoloel">leoloel</a>!</p> </div> </div> </div> <div class="sect1"> <h2 id="outlook_whats_next">Outlook &amp; What&#8217;s next?</h2> <div class="sectionbody"> <div class="paragraph"> <p>The team remains dedicated toward Debezium 2.6 over the next few months. However, in that time, you can expect that we&#8217;ll continue to review regressions and bugfixes, and provide maintenance releases for Debezium 2.5.</p> </div> <div class="paragraph"> <p>In the meantime, if you&#8217;re interested in what the team has in store for Debezium 2.6 and beyond throughout 2024, we encourage you to review our <a href="/docs/roadmap">road map</a>, which includes details about our path to Debezium 3.0 later this year. If you have any suggestions or ideas, please feel free to get in touch with us on our <a href="https://groups.google.com/forum/#!forum/debezium">mailing list</a> or in our <a href="https://debezium.zulipchat.com/login/#narrow/stream/302529-users">Zulip chat</a>.</p> </div> <div class="paragraph"> <p>We have two upcoming talks later this week at Fosdem 2024 in Brussels. Ondrej Babec will be speaking about <a href="https://fosdem.org/2024/schedule/event/fosdem-2024-2968-performance-testing-and-why-even-the-imperfect-one-is-important/">performance testing and why it&#8217;s important</a> and Vojtech Juranek will <a href="https://fosdem.org/2024/schedule/event/fosdem-2024-2272-feeding-ml-models-with-the-data-from-the-databases-in-real-time/">use Debezium to feed AI models in real-time</a>. If you plan to attend, be sure to check out these talks and meet and greet with our Debezium engineers.</p> </div> <div class="paragraph"> <p>Until next time&#8230;&#8203;</p> </div> </div> </div>]]></content><author><name>Chris Cranford</name></author><category term="releases"/><category term="mongodb"/><category term="mysql"/><category term="postgres"/><category term="sqlserver"/><category term="cassandra"/><category term="oracle"/><category term="db2"/><category term="vitess"/><category term="outbox"/><category term="spanner"/><category term="jdbc"/><summary type="html"><![CDATA[While we remain on track with the upcoming Debezium 2.6 release, we are continuously looking at improvements and fixes that are being made that ensures that older releases continue to provide the best possible experience. With that, the team is pleased to announce the first maintenance release of Debezium 2.5, Debezium 2.5.1.Final. Let&#8217;s dive into what this release includes and what you should be aware of while upgrading&#8230;&#8203;]]></summary></entry><entry><title type="html">Debezium 2.6.0.Alpha1 Released</title><link href="https://debezium.io/blog/2024/01/22/debezium-2.6-alpha1-released/" rel="alternate" type="text/html" title="Debezium 2.6.0.Alpha1 Released"/><published>2024-01-22T00:00:00+00:00</published><updated>2024-01-22T00:00:00+00:00</updated><id>https://debezium.io/blog/2024/01/22/debezium-2.6-alpha1-released</id><content type="html" xml:base="https://debezium.io/blog/2024/01/22/debezium-2.6-alpha1-released/"><![CDATA[<div class="paragraph"> <p>A new year, a new preview release, in true Debezium fashion. The team is pleased to announce the first installment of the Debezium 2.6 release stream, <strong>Debezium 2.6.0.Alpha1</strong>. Let&#8217;s take a moment and dive into these new features, understand how to use these to improve your change data capture experience&#8230;&#8203;</p> </div> <div class="paragraph"> <p></p> </div> <div class="sect1"> <h2 id="breaking_changes">Breaking changes</h2> <div class="sectionbody"> <div class="paragraph"> <p>The team aims to avoid any potential breaking changes between minor releases; however, such changes are sometimes inevitable.</p> </div> <div class="dlist"> <dl> <dt class="hdlist1">MongoDB</dt> <dd> <div class="ulist"> <ul> <li> <p>The MongoDB connector no longer supports the <code>replica_set</code> mode (<a href="https://issues.redhat.com/browse/DBZ-7260)">DBZ-7260</a>). This has been a feature that has been deprecated for several versions and there has been ongoing work over Debezium 2.x to achieve this goal. If you are using the <code>replica_set</code> mode, you will need to make adjustments when using Debezium 2.6+.</p> </li> </ul> </div> </dd> <dt class="hdlist1">Re-select Columns Post Processor</dt> <dd> <div class="ulist"> <ul> <li> <p>The re-select columns post processor used the key based on the <code>message.key.columns</code> when building the query. This is not correct for most tables with primary keys. The default behavior has changed and the table primary key is used by default. A new configuration option was introduced to allow the user to choose between whether to use the primary key or the generated key, <code>reselect.use.event.key</code> (<a href="https://issues.redhat.com/browse/DBZ-7358">DBZ-7358</a>).</p> </li> </ul> </div> </dd> </dl> </div> </div> </div> <div class="sect1"> <h2 id="improvements_and_changes">Improvements and changes</h2> <div class="sectionbody"> <div class="sect2"> <h3 id="new_matching_collections_api_added">New Matching Collections API added</h3> <div class="paragraph"> <p>One of the team&#8217;s ongoing tasks include the migration of Debezium UI&#8217;s backend into the main Debezium repository. One of the unique benefits with doing this is we can identify where there is code overlap between a connector&#8217;s runtime and the UI, and develop interface contracts to expose this shared data.</p> </div> <div class="paragraph"> <p>Thanks to a community contribution for <a href="https://issues.redhat.com/browse/DBZ-7167">DBZ-7167</a>, the <code>RelationalBaseSourceConnector</code> contract has been adjusted and a new method introduced to return a list of table names that match the connector&#8217;s specific configuration. Any connector that implements this abstract base class will need to implement this new method.</p> </div> </div> <div class="sect2"> <h3 id="cloudevents_schema_name_customization">CloudEvents schema name customization</h3> <div class="paragraph"> <p>When using schema registry, event schemas need to be registered with a name so that they can be looked up upon later inquiries by pipelines. So when pairing CloudEvents formatted messages with schema registry, the same applies and in Debezium 2.6, you can explicitly control how the name is registered.</p> </div> <div class="paragraph"> <p>By default, the schema for a CloudEvent message will be automatically generated by the converter. However, if the auto generated schema names are not sufficient, you can adjust the configuration by specifying <code>dataSchemaName</code>, which can be set either to <code>generate</code> (the default behavior) or <code>header</code> to pull the schema name directly from the specified event header field.</p> </div> </div> <div class="sect2"> <h3 id="oracle_infinispan_cache_improvements">Oracle Infinispan cache improvements</h3> <div class="paragraph"> <p>The Debezium Oracle connector maintains a buffer of all in-flight transactions, and this buffer can be allocated off-heap using Infinispan. Sometimes, the user configuration specifies that if an in-flight transaction lasts longer than the specified number of milliseconds, the transaction can be abandoned or discarded by the buffer. This means that the transaction will be forgotten and not emitted by the connector.</p> </div> <div class="paragraph"> <p>In order to improve metrics integration with frameworks like Grafana and Prometheus, a new JMX metric, <code>AbandonedTransactionCount</code>, was added to track the number of transactions that are abandoned by the connector during it&#8217;s runtime.</p> </div> </div> <div class="sect2"> <h3 id="supports_spanner_new_row_and_old_values_value_capture_type">Supports Spanner <code>NEW_ROW_AND_OLD_VALUES</code> value capture type</h3> <div class="paragraph"> <p>Google Spanner&#8217;s value capture type is responsible for controlling how the change stream represents the change data in the event stream and are configured when constructing the change stream.</p> </div> <div class="paragraph"> <p>Spanner introduced a new value capture mode called <code>NEW_ROW_AND_OLD_VALUES</code>, which is responsible for capturing all values of tracked columns, both modified and unmodified, whenever any column changes. This new mode is an improvement over <code>NEW_ROW</code> because it also includes the capture of old values, making it align with what you typically observe with other Debezium connectors.</p> </div> </div> </div> </div> <div class="sect1"> <h2 id="other_changes">Other changes</h2> <div class="sectionbody"> <div class="paragraph"> <p>Altogether, <a href="https://issues.redhat.com/issues/?jql=project%20%3D%20DBZ%20AND%20fixVersion%20%3D%202.6.0.Alpha1%20ORDER%20BY%20component%20ASC">25 issues</a> were fixed in this release:</p> </div> <div class="ulist"> <ul> <li> <p>Empty object sent to GCP Pub/Sub after DELETE event <a href="https://issues.redhat.com/browse/DBZ-7098">DBZ-7098</a></p> </li> <li> <p>Notifications are Missing the ID field in log channel <a href="https://issues.redhat.com/browse/DBZ-7249">DBZ-7249</a></p> </li> <li> <p>Debezium-ddl-parser crashes on parsing MySQL DDL statement (sub-query with UNION) <a href="https://issues.redhat.com/browse/DBZ-7259">DBZ-7259</a></p> </li> <li> <p>Oracle DDL parsing error in PARTITION REFERENCE <a href="https://issues.redhat.com/browse/DBZ-7266">DBZ-7266</a></p> </li> <li> <p>Enhance Oracle&#8217;s CREATE TABLE for Multiple Table Specifications <a href="https://issues.redhat.com/browse/DBZ-7286">DBZ-7286</a></p> </li> <li> <p>Add service loader manifests for all Connect plugins <a href="https://issues.redhat.com/browse/DBZ-7298">DBZ-7298</a></p> </li> <li> <p>PostgreSQL ad-hoc blocking snapshots fail when snapshot mode is "never" <a href="https://issues.redhat.com/browse/DBZ-7311">DBZ-7311</a></p> </li> <li> <p>Ad-hoc blocking snapshot dies with "invalid snapshot identifier" immediately after connector creation <a href="https://issues.redhat.com/browse/DBZ-7312">DBZ-7312</a></p> </li> <li> <p>Specifying a table include list with spaces between elements cause LogMiner queries to miss matches <a href="https://issues.redhat.com/browse/DBZ-7315">DBZ-7315</a></p> </li> <li> <p>Debezium heartbeat.action.query does not start before writing to WAL: part 2 <a href="https://issues.redhat.com/browse/DBZ-7316">DBZ-7316</a></p> </li> <li> <p>Update Groovy version to 4.x <a href="https://issues.redhat.com/browse/DBZ-7340">DBZ-7340</a></p> </li> <li> <p>errors.max.retries is not used to stop retrying <a href="https://issues.redhat.com/browse/DBZ-7342">DBZ-7342</a></p> </li> <li> <p>Upgrade Antora to 3.1.7 <a href="https://issues.redhat.com/browse/DBZ-7344">DBZ-7344</a></p> </li> <li> <p>Oracle connector is occasionally unable to find SCN <a href="https://issues.redhat.com/browse/DBZ-7345">DBZ-7345</a></p> </li> <li> <p>Initial snapshot notifications should use full identifier. <a href="https://issues.redhat.com/browse/DBZ-7347">DBZ-7347</a></p> </li> <li> <p>Upgrade Outbox Extension to Quarkus 3.6.5 <a href="https://issues.redhat.com/browse/DBZ-7352">DBZ-7352</a></p> </li> <li> <p>MySqlJdbcSinkDataTypeConverterIT#testBooleanDataTypeMapping fails <a href="https://issues.redhat.com/browse/DBZ-7355">DBZ-7355</a></p> </li> </ul> </div> <div class="paragraph"> <p>A big thank you to all the contributors from the community who worked on this release: <a href="https://github.com/ani-sha">Anisha Mohanty</a>, <a href="https://github.com/shybovycha">Artem Shubovych</a>, <a href="https://github.com/roldanbob">Bob Roldan</a>, <a href="https://github.com/Naros">Chris Cranford</a>, <a href="https://github.com/ilyasahsan123">Ilyas Ahsan</a>, <a href="https://github.com/indraraj">Indra Shukla</a>, <a href="https://github.com/jcechace">Jakub Cechacek</a>, <a href="https://github.com/james-johnston-thumbtack">James Johnston</a>, <a href="https://github.com/sherpa003">Jiri Kulhanek</a>, <a href="https://github.com/jpechane">Jiri Pechanec</a>, <a href="https://github.com/mfvitale">Mario Fiore Vitale</a>, <a href="https://github.com/mimaison">Mickael Maison</a>, <a href="https://github.com/obabec">Ondrej Babec</a>, <a href="https://github.com/wukachn">Peter Hamer</a>, <a href="https://github.com/richardharrington">Richard Harrington</a>, <a href="https://github.com/roldanbob">Robert Roldan</a>, <a href="https://github.com/rkudryashov">Roman Kudryashov</a>, <a href="https://github.com/ShuranZhang">Shuran Zhang</a>, <a href="https://github.com/vsantona">Vincenzo Santonastaso</a>, <a href="https://github.com/vjuranek">Vojtech Juranek</a>, and <a href="https://github.com/overwatcheddude">حمود سمبول</a>!</p> </div> </div> </div> <div class="sect1"> <h2 id="outlook_whats_next">Outlook &amp; What&#8217;s next?</h2> <div class="sectionbody"> <div class="paragraph"> <p>The Debezium 2.6 release cycle is one of our most ambitious initiatives with lots of new features and changes. You can find more about what the team is working on specifically for 2.6 and the road to Debezium 3.0 in our <a href="/docs/roadmap">road map</a>. If you have any suggestions or ideas, please feel free to get in touch with us on our <a href="https://groups.google.com/forum/#!forum/debezium">mailing list</a> or in our <a href="https://debezium.zulipchat.com/login/#narrow/stream/302529-users">Zulip chat</a>.</p> </div> <div class="paragraph"> <p>As the team continues springing into action with Debezium 2.6, we also intend to continue to bug fix and address any regressions that are reported to last quarter&#8217;s Debezium 2.5 release. Debezium 2.5 is now the project&#8217;s stable release, and we encourage everyone to upgrade and get the latest and greatest features. In fact, you can expect the next maintenance release of Debezium, <strong>2.5.1.Final</strong> to be released later this week :).</p> </div> <div class="paragraph"> <p>Until next time, happy streaming!</p> </div> </div> </div>]]></content><author><name>Chris Cranford</name></author><category term="releases"/><category term="mongodb"/><category term="mysql"/><category term="postgres"/><category term="sqlserver"/><category term="cassandra"/><category term="oracle"/><category term="db2"/><category term="vitess"/><category term="outbox"/><category term="spanner"/><category term="jdbc"/><summary type="html"><![CDATA[A new year, a new preview release, in true Debezium fashion. The team is pleased to announce the first installment of the Debezium 2.6 release stream, Debezium 2.6.0.Alpha1. Let&#8217;s take a moment and dive into these new features, understand how to use these to improve your change data capture experience&#8230;&#8203;]]></summary></entry><entry><title type="html">Debezium and TimescaleDB</title><link href="https://debezium.io/blog/2024/01/11/Debezium-and-TimescaleDB/" rel="alternate" type="text/html" title="Debezium and TimescaleDB"/><published>2024-01-11T10:11:11+00:00</published><updated>2024-01-11T10:11:11+00:00</updated><id>https://debezium.io/blog/2024/01/11/Debezium-and-TimescaleDB</id><content type="html" xml:base="https://debezium.io/blog/2024/01/11/Debezium-and-TimescaleDB/"><![CDATA[<div class="paragraph"> <p>In this article, we are going to present and demonstrate a new feature delivered in Debezium 2.4 - the integration with the TimescaleDB database.</p> </div> <div class="paragraph"> <p><a href="https://github.com/timescale/timescaledb">TimescaleDB</a> is an open-source database designed to make SQL scalable for time-series data. It is implemented as an extension for the PostgreSQL database. This fact leads us to re-use the standard <a href="https://debezium.io/documentation/reference/stable/connectors/postgresql.html">Debezium PostgreSQL connector</a> and implement TimescaleDB support as a <a href="https://cwiki.apache.org/confluence/display/KAFKA/KIP-66%3A+Single+Message+Transforms+for+Kafka+Connect">single message transform (SMT)</a>.</p> </div> <div class="paragraph"> <p></p> </div> <div class="paragraph"> <p>TimescaleDB provides three basic building blocks/concepts:</p> </div> <div class="ulist"> <ul> <li> <p>Hypertables</p> </li> <li> <p>Continuous aggregates</p> </li> <li> <p>Compression</p> </li> </ul> </div> <div class="paragraph"> <p>Metadata (catalog) that describes the definitions of the instances and the raw data are typically stored in <code>_timescaledb_internal_schema</code>. <a href="https://debezium.io/documentation/reference/stable/transformations/timescaledb.html">TimescaleDb SMT</a> connects to the database and reads and processes the metadata. The raw messages read from the database are then enriched with the metadata stored in Kafka Connect headers, creating the relation between the physical data and the TimescaleDB logical constructs.</p> </div> <div class="sect1"> <h2 id="demonstration">Demonstration</h2> <div class="sectionbody"> <div class="paragraph"> <p>Debezium <a href="https://github.com/debezium/debezium-examples/tree/main/tutorial">examples repository</a> contains a Docker Compose-based deployment that provides a full environment to demonstrate the TimescaleDB integration.</p> </div> <div class="paragraph"> <p>The first step is to start the deployment</p> </div> <div class="listingblock"> <div class="content"> <pre class="CodeRay highlight"><code data-lang="bash">$ docker-compose -f docker-compose-timescaledb.yaml up --build</code></pre> </div> </div> <div class="paragraph"> <p>The command will bring up Debezium (Zookeeper, Kafka, Kafka Connect) and the source TimescaleDB database.</p> </div> <div class="paragraph"> <p>The started database is primed with the following database objects:</p> </div> <div class="ulist"> <ul> <li> <p>Hypertable <code>conditions</code> representing temperature and humidity measurements as time-series data; created with DDL <code>CREATE TABLE conditions (time TIMESTAMPTZ NOT NULL, location TEXT NOT NULL, temperature DOUBLE PRECISION NULL, humidity DOUBLE PRECISION NULL); SELECT create_hypertable('conditions', 'time')</code></p> </li> <li> <p>A single record of the measurement data (<code>INSERT INTO conditions VALUES(NOW(), 'Prague', 22.8, 53.3)</code>)</p> </li> <li> <p>PostgreSQL publication used to publish time-series data into replication slot as the demo uses <code>pgoutput</code> decoding plugin (<code>CREATE PUBLICATION dbz_publication FOR ALL TABLES WITH (publish = 'insert, update')</code>)</p> </li> </ul> </div> <div class="paragraph"> <p>In the next step it is necessary to register the Debezium PostgreSQL connector to capture the changes in the database</p> </div> <div class="listingblock"> <div class="content"> <pre class="CodeRay highlight"><code data-lang="bash">$ curl -i -X POST -H &quot;Accept:application/json&quot; -H  &quot;Content-Type:application/json&quot; http://localhost:8083/connectors/ -d @register-timescaledb.yaml</code></pre> </div> </div> <div class="paragraph"> <p>The registration request file differs from the regular one with the addition of these lines</p> </div> <div class="listingblock"> <div class="content"> <pre class="CodeRay highlight"><code data-lang="json">{
    <span class="key"><span class="delimiter">&quot;</span><span class="content">name</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">inventory-connector</span><span class="delimiter">&quot;</span></span>,
    <span class="key"><span class="delimiter">&quot;</span><span class="content">config</span><span class="delimiter">&quot;</span></span>: {
<span class="error">.</span><span class="error">.</span><span class="error">.</span>
        <span class="key"><span class="delimiter">&quot;</span><span class="content">schema.include.list</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">_timescaledb_internal</span><span class="delimiter">&quot;</span></span>,
        <span class="key"><span class="delimiter">&quot;</span><span class="content">transforms</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">timescaledb</span><span class="delimiter">&quot;</span></span>,
        <span class="key"><span class="delimiter">&quot;</span><span class="content">transforms.timescaledb.type</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">io.debezium.connector.postgresql.transforms.timescaledb.TimescaleDb</span><span class="delimiter">&quot;</span></span>,
        <span class="key"><span class="delimiter">&quot;</span><span class="content">transforms.timescaledb.database.hostname</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">timescaledb</span><span class="delimiter">&quot;</span></span>,
        <span class="key"><span class="delimiter">&quot;</span><span class="content">transforms.timescaledb.database.port</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">5432</span><span class="delimiter">&quot;</span></span>,
        <span class="key"><span class="delimiter">&quot;</span><span class="content">transforms.timescaledb.database.user</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">postgres</span><span class="delimiter">&quot;</span></span>,
        <span class="key"><span class="delimiter">&quot;</span><span class="content">transforms.timescaledb.database.password</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">postgres</span><span class="delimiter">&quot;</span></span>,
        <span class="key"><span class="delimiter">&quot;</span><span class="content">transforms.timescaledb.database.dbname</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">postgres</span><span class="delimiter">&quot;</span></span>
    }
}</code></pre> </div> </div> <div class="sect2"> <h3 id="hypertables">Hypertables</h3> <div class="paragraph"> <p>The connector will capture the internal TimescaleDB schema with the physical tables containing the raw data and the <code>TimescaleDb</code> SMT will be applied to enrich messages and route them to the correctly named topics based on the logical names. The SMT configuration options contain information needed to connect to the database. In this case, the <code>conditions</code> hypertable will be physically stored in <code>_timescaledb_internal._hyper_1_1_chunk</code> and when processed by the SMT, it will be re-routed to <code>timescaledb.public.conditions</code> topic that is named according to fixed configured prefix <code>timescaledb</code> and logical name <code>public.conditions</code> that conforms to the hypertable name.</p> </div> <div class="paragraph"> <p>Let&#8217;s add a few more measurements to the table</p> </div> <div class="listingblock"> <div class="content"> <pre class="CodeRay highlight"><code data-lang="bash">$ docker-compose -f docker-compose-timescaledb.yaml exec timescaledb env PGOPTIONS=&quot;--search_path=public&quot; bash -c 'psql -U $POSTGRES_USER postgres'
postgres=# INSERT INTO conditions VALUES (now(), 'Prague', 30, 50);
postgres=# INSERT INTO conditions VALUES (now(), 'Brno', 35, 55);
postgres=# INSERT INTO conditions VALUES (now(), 'Prague', 40, 60);</code></pre> </div> </div> <div class="paragraph"> <p>and read the captured messages for the topic (printing of key and headers is enabled in the command)</p> </div> <div class="listingblock"> <div class="content"> <pre class="CodeRay highlight"><code data-lang="bash">docker-compose -f docker-compose-timescaledb.yaml exec kafka /kafka/bin/kafka-console-consumer.sh \
    --bootstrap-server kafka:9092 \
    --from-beginning \
    --property print.key=true \
    --property print.headers=true \
    --topic timescaledb.public.conditions</code></pre> </div> </div> <div class="paragraph"> <p>The messages contain two headers <code><em>debezium_timescaledb_chunk_table:_hyper_1_1_chunk,</em>debezium_timescaledb_chunk_schema:_timescaledb_internal</code> that describe the mapping between the logical hypertable name and the physical source table from which they were captured.</p> </div> </div> <div class="sect2"> <h3 id="continuous_aggregates">Continuous aggregates</h3> <div class="paragraph"> <p>Continuous aggregates provide automatic statistical calculations over data that is stored in hypertables. The aggregate is defined as a materialized view that is backed by its own hypertable which in turn is backed by a set of physical tables. After an aggregate is recalculated (either manually or automatically), the new values are stored in the hypertable, from which they can be captured and streamed. The connector captures the new values in the physical tables and the SMT again solves the routing by remapping the physical destination back into the aggregate logical name. Kafka Connect headers with original hypertable and physical table names are added too.</p> </div> <div class="paragraph"> <p>Let&#8217;s create a continuous aggregate named <code>conditions_summary</code> that calculates the average, minimum, and maximum temperature per location and time interval</p> </div> <div class="listingblock"> <div class="content"> <pre class="CodeRay highlight"><code data-lang="bash">postgres=# CREATE MATERIALIZED VIEW conditions_summary WITH (timescaledb.continuous) AS
  SELECT
    location,
    time_bucket(INTERVAL '1 hour', time) AS bucket,
    AVG(temperature),
    MAX(temperature),
    MIN(temperature)
  FROM conditions
  GROUP BY location, bucket;</code></pre> </div> </div> <div class="paragraph"> <p>and read the captured messages for the topic</p> </div> <div class="listingblock"> <div class="content"> <pre class="CodeRay highlight"><code data-lang="bash">docker-compose -f docker-compose-timescaledb.yaml exec kafka /kafka/bin/kafka-console-consumer.sh \
    --bootstrap-server kafka:9092 \
    --from-beginning \
    --property print.key=true \
    --property print.headers=true \
    --topic timescaledb.public.conditions_summary</code></pre> </div> </div> <div class="paragraph"> <p>The messages contain two headers <code><em>debezium_timescaledb_hypertable_table:_materialized_hypertable_2,</em>debezium_timescaledb_hypertable_schema:_timescaledb_internal</code> that expose which backing hypertable was used to store the aggregates and two addtional headers <code><em>debezium_timescaledb_chunk_table:_hyper_2_2_chunk,</em>debezium_timescaledb_chunk_schema:_timescaledb_internal</code> that exposes the physical table in which the aggregate was stored.</p> </div> <div class="literalblock"> <div class="content"> <pre>`__debezium_timescaledb_chunk_table:_hyper_1_1_chunk,__debezium_timescaledb_chunk_schema:_timescaledb_internal` that describes the mapping between the logical hypertable name and the physical source table from which they were captured.</pre> </div> </div> <div class="paragraph"> <p>If a new measurement is added and aggregate recomputation is triggered then an updated aggregate is emitted to the topic</p> </div> <div class="listingblock"> <div class="content"> <pre class="CodeRay highlight"><code data-lang="bash">postgres=# INSERT INTO conditions VALUES (now(), 'Ostrava', 10, 50);
postgres=# CALL refresh_continuous_aggregate('conditions_summary', CURRENT_DATE, CURRENT_DATE + 1);</code></pre> </div> </div> <div class="paragraph"> <p>that looks like</p> </div> <div class="listingblock"> <div class="content"> <pre class="CodeRay highlight"><code data-lang="bash">{
   &quot;schema&quot;:{
...
   },
   &quot;payload&quot;:{
      &quot;before&quot;:null,
      &quot;after&quot;:{
         &quot;location&quot;:&quot;Ostrava&quot;,
         &quot;bucket&quot;:&quot;2024-01-09T13:00:00.000000Z&quot;,
         &quot;avg&quot;:10.0,
         &quot;max&quot;:10.0,
         &quot;min&quot;:10.0
      },
      &quot;source&quot;:{
         &quot;version&quot;:&quot;2.5.0.Final&quot;,
         &quot;connector&quot;:&quot;postgresql&quot;,
         &quot;name&quot;:&quot;dbserver1&quot;,
         &quot;ts_ms&quot;:1704806938840,
         &quot;snapshot&quot;:&quot;false&quot;,
         &quot;db&quot;:&quot;postgres&quot;,
         &quot;sequence&quot;:&quot;[\&quot;29727872\&quot;,\&quot;29728440\&quot;]&quot;,
         &quot;schema&quot;:&quot;public&quot;,
         &quot;table&quot;:&quot;conditions_summary&quot;,
         &quot;txId&quot;:764,
         &quot;lsn&quot;:29728440,
         &quot;xmin&quot;:null
      },
      &quot;op&quot;:&quot;c&quot;,
      &quot;ts_ms&quot;:1704806939163,
      &quot;transaction&quot;:null
   }
}</code></pre> </div> </div> <div class="paragraph"> <p>So the topic contains two or more messages calculated for two different locations.</p> </div> </div> <div class="sect2"> <h3 id="compression">Compression</h3> <div class="paragraph"> <p>The TimescaleDB SMT does not enhance compressed chunks of data (physical table records), only as a by-product of them being stored in a hypertable. The compressed data is captured and stored in the Kafka topic. Typically, messages with compressed chunks are dropped and are not processed by subsequent jobs in the pipeline.</p> </div> <div class="paragraph"> <p>Let&#8217;s enable compression for the hypertable and compress it</p> </div> <div class="listingblock"> <div class="content"> <pre class="CodeRay highlight"><code data-lang="bash">postgres=# ALTER TABLE conditions SET (timescaledb.compress, timescaledb.compress_segment by = 'location');
postgres=# SELECT show_chunks('conditions');
              show_chunks
----------------------------------------
 _timescaledb_internal._hyper_1_1_chunk
(1 row)

postgres=# SELECT compress_chunk( '_timescaledb_internal._hyper_1_1_chunk');</code></pre> </div> </div> <div class="paragraph"> <p>Messages are written to <code>timescaledb._timescaledb_internal._compressed_hypertable_3</code>.</p> </div> <div class="paragraph"> <p>Tear down the environment</p> </div> <div class="listingblock"> <div class="content"> <pre class="CodeRay highlight"><code data-lang="bash">docker-compose -f docker-compose-timescaledb.yaml down</code></pre> </div> </div> </div> </div> </div> <div class="sect1"> <h2 id="conclusion">Conclusion</h2> <div class="sectionbody"> <div class="paragraph"> <p>In this post, we have demonstrated the capturing of data from TimescaleDB time-series database and their processing by the TimescaleDb SMT. We have shown how messages are routed and enriched depending on hypertables and continuous aggregates acting as the source of data.</p> </div> </div> </div>]]></content><author><name>Jiri Pechanec</name></author><category term="debezium"/><category term="features"/><category term="connectors"/><category term="postgres"/><category term="timescaledb"/><summary type="html"><![CDATA[In this article, we are going to present and demonstrate a new feature delivered in Debezium 2.4 - the integration with the TimescaleDB database. TimescaleDB is an open-source database designed to make SQL scalable for time-series data. It is implemented as an extension for the PostgreSQL database. This fact leads us to re-use the standard Debezium PostgreSQL connector and implement TimescaleDB support as a single message transform (SMT).]]></summary></entry><entry><title type="html">Debezium 2.5.0.Final Released</title><link href="https://debezium.io/blog/2023/12/21/debezium-2-5-final-released/" rel="alternate" type="text/html" title="Debezium 2.5.0.Final Released"/><published>2023-12-21T00:00:00+00:00</published><updated>2023-12-21T00:00:00+00:00</updated><id>https://debezium.io/blog/2023/12/21/debezium-2-5-final-released</id><content type="html" xml:base="https://debezium.io/blog/2023/12/21/debezium-2-5-final-released/"><![CDATA[<div class="paragraph"> <p>As the winter chill settles in, and we transition to the festive holiday season, our dedicated team has been busy preparing a special gift for the Debezium community. I am excited to share the immediate release of Debezium 2.5.0.Final, just in time for the holiday celebrations. Get ready to unwrap this latest minor version, filled with holiday cheer and exciting new features!</p> </div> <div class="paragraph"> <p>Let&#8217;s take a moment and review all the new features, changes, and improvements that are included in Debezium 2.5, which includes <a href="https://issues.redhat.com/issues/?jql=project%20%3D%20DBZ%20and%20fixVersion%20%20in%20(2.5.0.Alpha1%2C%202.5.0.Alpha2%2C%202.5.0.Beta1%2C%202.5.0.Beta2%2C%202.5.0.CR1%2C%202.5.0.Final)">181 issues</a> resolved by 37 unique contributors.</p> </div> <div class="paragraph"> <p></p> </div> <div class="sect1"> <h2 id="breaking_changes">Breaking changes</h2> <div class="sectionbody"> <div class="paragraph"> <p>While we try to avoid any potential breaking changes between minor releases, such changes are sometimes inevitable. The upgrade to Debezium 2.5 includes a total of 10 unique breaking changes:</p> </div> <div class="dlist"> <dl> <dt class="hdlist1">MySQL</dt> <dd> <div class="ulist"> <ul> <li> <p>The MySQL community announced that MySQL 5.7 would enter its End of Life cycle at the end of October 2023 In accordance with this upstream community news, Debezium too is making adjustments, like other vendors, around this recent news. To that end, starting with Debezium 2.5, we will no longer be testing nor supporting MySQL 5.7 if full capacity, thus MySQL 5.7 enters what we call "best-effort" support. (<a href="https://issues.redhat.com/browse/DBZ-6874">DBZ-6874</a>)</p> </li> <li> <p>MySQL <code>BIT</code> datatype did not have an implicit length if any was not set. This is incorrect as the default length if none is provided is <code>1</code> (<a href="https://issues.redhat.com/browse/DBZ-7230">DBZ-7230</a>).</p> </li> </ul> </div> </dd> <dt class="hdlist1">MongoDB</dt> <dd> <div class="ulist"> <ul> <li> <p>In earlier versions of Debezium, a user could use the MongoDB connector and perform a snapshot of a collection on a specific shard when using a MongoDB sharded deployment. Unfortunately, while we understand that users may have taken advantage of this behavior, it was unintended and not supported. Debezium 2.5 removes this ability entirely, and it&#8217;s a step in the forward goal to deprecate and remove the replica-set streaming mode in MongoDB completely (<a href="https://issues.redhat.com/browse/DBZ-7139">DBZ-7139</a>).</p> </li> <li> <p>Default connection mode is changed from <code>replica_set</code> to <code>sharded</code> as a preparation step for its complete removal. The change will lead to invalidation of existing offsets and a silent re-execution of the initial snapshot. To prevent this a check was added that will fail the connector upon start if this would happen. The user can either set <code>replica_set</code> connection mode explicitly or can remove the existing offsets (<a href="https://issues.redhat.com/browse/DBZ-7272">DBZ-7272</a>).</p> </li> </ul> </div> </dd> <dt class="hdlist1">JDBC</dt> <dd> <div class="ulist"> <ul> <li> <p>There was a corner case reported where the JDBC sink connector was mistakenly writing fields that had <code>null</code> values to the target database with the default value instead of a value of <code>NULL</code>. This has been fixed in Debezium 2.5 (<a href="https://issues.redhat.com/browse/DBZ-7191">DBZ-7191</a>).</p> </li> </ul> </div> </dd> <dt class="hdlist1">Core</dt> <dd> <div class="ulist"> <ul> <li> <p>If you are presently using the CloudEvents converter to emit events that conform to the CloudEvents format, it&#8217;s important to note that the configuration option <code>metadata.location</code> was renamed to <code>metadata.source</code>. You will need to be sure to update your connector configurations to reflect this change with Debezium 2.5 and onward. (<a href="https://issues.redhat.com/browse/DBZ-7060">DBZ-7060</a>)</p> </li> <li> <p>Part of the team&#8217;s focus in Debezium 2.5 was to improve the Debezium Embedded Engine&#8217;s experience. With that goal in mind, we took this preview release as an opportunity to clean-up the embedded engine&#8217;s API.</p> </li> <li> <p>If your usage of the Debezium Embedded Engine utilized any of the previously deprecated APIs on <code>EmbeddedEngine</code>, you will find those methods have since been removed. (<a href="https://issues.redhat.com/browse/DBZ-7110">DBZ-7100</a>) The recommended path forward is to make sure that you&#8217;re using the <code>DebeziumEngine</code> interface provided by the <code>debezium-api</code> artifact.</p> </li> <li> <p>The <code>ComputePartition</code> was an SMT that enabled users to compute the desired partition for which an event would be written in a Kafka topic. This single message transformation (SMT) was deprecated some time ago in favor of the new <code>PartitionRouting</code> single message transformation. Debezium 2.5 removes the old, deprecated <code>ComputePartition</code>, and users who may still be relying on this SMT will need to migrate to the new <code>PartitionRouting</code> SMT if you have not already done so (<a href="https://issues.redhat.com/browse/DBZ-7141">DBZ-7141</a>).</p> </li> <li> <p>The schema name prefix and letter casing for Cloud Event headers was not consistent with payload name. The schema name was aligned so both headers and payload share th same namespace and follow the same rules for letter casing (<a href="https://issues.redhat.com/browse/DBZ-7216">DBZ-7216</a>).</p> </li> </ul> </div> </dd> </dl> </div> </div> </div> <div class="sect1"> <h2 id="improvements_and_changes">Improvements and changes</h2> <div class="sectionbody"> <div class="paragraph"> <p>In this section, we&#8217;re going to take a tour of all the new features and improvements in Debezium 2.5.</p> </div> <div class="sect2"> <h3 id="core">Core</h3> <div class="sect3"> <h4 id="redis_schema_history_retries_now_limited">Redis Schema History Retries now Limited</h4> <div class="paragraph"> <p>Debezium 2.5 introduces a new configuration option, <code>schema.history.internal.redis.max.attempts</code> designed to limit the number of retry attempts while connecting to a Redis database when it becomes unavailable, previously it simply retried forever. This new option defaults to <code>10</code> but is user configurable. (<a href="https://issues.redhat.com/browse/DBZ-7120">DBZ-7120</a>)</p> </div> </div> <div class="sect3"> <h4 id="additional_notifications_for_initial_snapshots">Additional notifications for initial snapshots</h4> <div class="paragraph"> <p>Debezium&#8217;s notification subsystem provides a simple way to integrate external processes and applications with certain Debezium tasks, such as taking a snapshot. In prior versions, the notifications for initial snapshots were quite basic and provided details such as when the snapshot started, when each table started and concluded, and finally when the snapshot ended.</p> </div> <div class="paragraph"> <p>A recent contribution that was part of <a href="https://issues.redhat.com/browse/DBZ-6878">DBZ-6878</a> extends on this base functionality to provide enhanced details about the snapshot. For example, the <code>IN_PROGRESS</code> notification will provide additional details about what tables are being captured and which table is currently in-progress, shown below:</p> </div> <div class="listingblock"> <div class="content"> <pre class="CodeRay highlight"><code data-lang="json">{
   <span class="key"><span class="delimiter">&quot;</span><span class="content">id</span><span class="delimiter">&quot;</span></span>:<span class="string"><span class="delimiter">&quot;</span><span class="content">6d82a3ec-ba86-4b36-9168-7423b0dd5c1d</span><span class="delimiter">&quot;</span></span>,
   <span class="key"><span class="delimiter">&quot;</span><span class="content">aggregate_type</span><span class="delimiter">&quot;</span></span>:<span class="string"><span class="delimiter">&quot;</span><span class="content">Initial Snapshot</span><span class="delimiter">&quot;</span></span>,
   <span class="key"><span class="delimiter">&quot;</span><span class="content">type</span><span class="delimiter">&quot;</span></span>:<span class="string"><span class="delimiter">&quot;</span><span class="content">IN_PROGRESS</span><span class="delimiter">&quot;</span></span>,
   <span class="key"><span class="delimiter">&quot;</span><span class="content">additional_data</span><span class="delimiter">&quot;</span></span>:{
      <span class="key"><span class="delimiter">&quot;</span><span class="content">connector_name</span><span class="delimiter">&quot;</span></span>:<span class="string"><span class="delimiter">&quot;</span><span class="content">my-connector</span><span class="delimiter">&quot;</span></span>,
      <span class="key"><span class="delimiter">&quot;</span><span class="content">data_collections</span><span class="delimiter">&quot;</span></span>:<span class="string"><span class="delimiter">&quot;</span><span class="content">table1, table2</span><span class="delimiter">&quot;</span></span>,
      <span class="key"><span class="delimiter">&quot;</span><span class="content">current_collection_in_progress</span><span class="delimiter">&quot;</span></span>:<span class="string"><span class="delimiter">&quot;</span><span class="content">table1</span><span class="delimiter">&quot;</span></span>
   },
   <span class="key"><span class="delimiter">&quot;</span><span class="content">timestamp</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">1695817046353</span><span class="delimiter">&quot;</span></span>
}</code></pre> </div> </div> <div class="paragraph"> <p>Additionally, another initial snapshot notification called <code>TABLE_SCAN_COMPLETED</code> also provides similar details, as shown below:</p> </div> <div class="listingblock"> <div class="content"> <pre class="CodeRay highlight"><code data-lang="json">{
   <span class="key"><span class="delimiter">&quot;</span><span class="content">id</span><span class="delimiter">&quot;</span></span>:<span class="string"><span class="delimiter">&quot;</span><span class="content">6d82a3ec-ba86-4b36-9168-7423b0dd5c1d</span><span class="delimiter">&quot;</span></span>,
   <span class="key"><span class="delimiter">&quot;</span><span class="content">aggregate_type</span><span class="delimiter">&quot;</span></span>:<span class="string"><span class="delimiter">&quot;</span><span class="content">Initial Snapshot</span><span class="delimiter">&quot;</span></span>,
   <span class="key"><span class="delimiter">&quot;</span><span class="content">type</span><span class="delimiter">&quot;</span></span>:<span class="string"><span class="delimiter">&quot;</span><span class="content">TABLE_SCAN_COMPLETED</span><span class="delimiter">&quot;</span></span>,
   <span class="key"><span class="delimiter">&quot;</span><span class="content">additional_data</span><span class="delimiter">&quot;</span></span>:{
      <span class="key"><span class="delimiter">&quot;</span><span class="content">connector_name</span><span class="delimiter">&quot;</span></span>:<span class="string"><span class="delimiter">&quot;</span><span class="content">my-connector</span><span class="delimiter">&quot;</span></span>,
      <span class="key"><span class="delimiter">&quot;</span><span class="content">data_collection</span><span class="delimiter">&quot;</span></span>:<span class="string"><span class="delimiter">&quot;</span><span class="content">table1, table2</span><span class="delimiter">&quot;</span></span>,
      <span class="key"><span class="delimiter">&quot;</span><span class="content">scanned_collection</span><span class="delimiter">&quot;</span></span>:<span class="string"><span class="delimiter">&quot;</span><span class="content">table1</span><span class="delimiter">&quot;</span></span>,
      <span class="key"><span class="delimiter">&quot;</span><span class="content">total_rows_scanned</span><span class="delimiter">&quot;</span></span>:<span class="string"><span class="delimiter">&quot;</span><span class="content">100</span><span class="delimiter">&quot;</span></span>,
      <span class="key"><span class="delimiter">&quot;</span><span class="content">status</span><span class="delimiter">&quot;</span></span>:<span class="string"><span class="delimiter">&quot;</span><span class="content">SUCCEEDED</span><span class="delimiter">&quot;</span></span>
   },
   <span class="key"><span class="delimiter">&quot;</span><span class="content">timestamp</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">1695817046353</span><span class="delimiter">&quot;</span></span>
}</code></pre> </div> </div> <div class="admonitionblock note"> <table> <tr> <td class="icon"> <i class="fa icon-note" title="Note"></i> </td> <td class="content"> Several fields shown above such as <code>data_collection</code>, these are not currently available for MongoDB snapshots and are only available for SQL-based relational connectors. </td> </tr> </table> </div> <div class="paragraph"> <p>For more details, please see the <a href="https://debezium.io/documentation/reference/2.5/configuration/notification.html">Notification documentation</a>.</p> </div> </div> <div class="sect3"> <h4 id="re_select_columns">Re-select columns</h4> <div class="paragraph"> <p>In some cases, because of the way that certain source databases function, when a Debezium connector emits a change event, the event might exclude values for specific column types. For example, values for <code>TOAST</code> columns in PostgreSQL, <code>LOB</code> columns in Oracle, or <code>Extended String</code> columns in Oracle Exadata, might all be excluded.</p> </div> <div class="paragraph"> <p>Debezium 2.5 introduces the <code>ReselectColumnsPostProcessor</code> providing a way to re-select one or more columns from a database table and fetch the current state. You can configure the post processor to re-select the following column types:</p> </div> <div class="ulist"> <ul> <li> <p>null columns.</p> </li> <li> <p>columns that contain the <code>unavailable.value.placeholder</code> sentinel value.</p> </li> </ul> </div> <div class="paragraph"> <p>Configuring a PostProcessor is similar to configuring a CustomConverter or Transformation, except that it works on the mutable payload&#8217;s Struct rather than the SourceRecord.</p> </div> </div> <div class="sect3"> <h4 id="insertdelete_semantics_for_incremental_snapshot_watermarking">INSERT/DELETE semantics for incremental snapshot watermarking</h4> <div class="paragraph"> <p>The property <code>incremental.snapshot.watermarking.strategy</code> has been introduced to let users choose the watermarking strategy to use during an incremental snapshot.</p> </div> <div class="paragraph"> <p>The <code>insert_insert</code> (old behavior) approach lets Debezium creating two entries in the signaling data collection for each chunk during the snapshot to signal the opening of the snapshot window and another to mark its closure.</p> </div> <div class="paragraph"> <p>On the other hand, with the <code>insert_delete</code> option, a single entry is written in the signaling data collection for each chunk at the beginning of the window. After completion, this entry is removed, and no corresponding entry is added to signify the closure of the snapshot window. This method aids in more efficient management of the signaling data collection.</p> </div> <div class="paragraph"> <p>For more details, please see the <code>Connector properties</code> section of the connector of your interest.</p> </div> </div> </div> <div class="sect2"> <h3 id="mongodb">MongoDB</h3> <div class="sect3"> <h4 id="seamless_large_document_handling">Seamless large document handling</h4> <div class="paragraph"> <p>Debezium has introduced several changes around large document processing in recent releases; however, those changes primarily focused on handling that use case with MongoDB 4 and 5. While these improvements certainly help for those older versions, the MongoDB community has introduced a way in MongoDB 6 to seamlessly deal with this at the database pipeline level.</p> </div> <div class="paragraph"> <p>Debezium 2.5&#8217;s MongoDB connector now uses the <code>$changeStreamSplitLargeEvent</code> aggregation feature, introduced as part of MongoDB 6.0.9. This avoids the <code>BSONObjectTooLarge</code> exception when working with documents that would exceed the 16MB document size limit of MongoDB. This new feature is controlled by the <code>oversize.handling.mode</code> option, which defaults to <code>fail</code>. Please adjust this configuration if you would like to take advantage of this new, opt-in feature. (<a href="https://issues.redhat.com/browse/DBZ-6726">DBZ-6726</a>)</p> </div> <div class="admonitionblock note"> <table> <tr> <td class="icon"> <i class="fa icon-note" title="Note"></i> </td> <td class="content"> <div class="paragraph"> <p>Debezium is simply utilizing an underlying feature of the MongoDB database. As such, the database still has some limitations discussed in the <a href="https://www.mongodb.com/docs/v6.0/reference/operator/aggregation/changeStreamSplitLargeEvent/#behavior">MongoDB documentation</a> that could still lead to exceptions with large documents that don&#8217;t adhere to MongoDB&#8217;s split rules.</p> </div> </td> </tr> </table> </div> </div> </div> <div class="sect2"> <h3 id="mysql">MySQL</h3> <div class="sect3"> <h4 id="8_2_support">8.2 support</h4> <div class="paragraph"> <p>The MySQL community recently released a new innovation release, MySQL 8.2.0 at the end of October 2023. This new release has been tested with Debezium, and we&#8217;re happy to announce that we officially support this new innovation release. (<a href="https://issues.redhat.com/browse/DBZ-6873">DBZ-6873</a>)</p> </div> </div> <div class="sect3"> <h4 id="high_precision_source_timestamps">High-precision source timestamps</h4> <div class="paragraph"> <p>Several new high-precision timestamp fields have been included in several MySQL replication events. For example, in MySQL 8.0.1, there are to microsecond-resolution timestamps added to GTID events that specify the timestamp when the transaction was committed on the immediate primary and when committed on the original primary.</p> </div> <div class="paragraph"> <p>Debezium 2.5 now takes advantage of these values and will use these for the <code>ts_ms</code> fields if they&#8217;re available, falling back to the second-based precision if they are not or if you&#8217;re using a version of MySQL prior to 8.0.1 (<a href="https://issues.redhat.com/browse/DBZ-7183">DBZ-7183</a>).</p> </div> </div> </div> <div class="sect2"> <h3 id="postgresql">PostgreSQL</h3> <div class="sect3"> <h4 id="streaming_from_postgresql_16_stand_bys">Streaming from PostgreSQL 16 stand-bys</h4> <div class="paragraph"> <p>In PostgreSQL 16, you can now define replication slots on a stand-by instance. This enables a plethora of new options, including the ability to perform change data capture from a replica rather than your production system for load distribution, particularly in a very active database.</p> </div> <div class="paragraph"> <p>Debezium 2.5 now supports connecting to a stand-by PostgreSQL 16 server and streaming changes (<a href="https://issues.redhat.com/browse/DBZ-7181">DBZ-7181</a>).</p> </div> </div> </div> <div class="sect2"> <h3 id="oracle">Oracle</h3> <div class="sect3"> <h4 id="streaming_metrics_changes">Streaming Metrics Changes</h4> <div class="paragraph"> <p>In previous builds of Debezium, there was a single Oracle streaming metrics bean that exposed all metrics options that spanned across all three streaming adapters. This often lead to some confusion about what metrics are applicable to which streaming adapter so we wanted to define a clear distinction in this case.</p> </div> <div class="paragraph"> <p>With Debezium 2.5, the Oracle streaming metrics beans have been split into three different implementations, one for each adapter type. For observability stacks, this change should be completely transparent unless you were previously gathering a metric for one adapter type while using another. In this case you&#8217;ll find that metric is no longer available.</p> </div> <div class="paragraph"> <p>Specifically for LogMiner users, several metrics have been renamed and the old metrics have been deprecated. While you will still be able to use the old metric names in Debezium 2.5, these are scheduled for removal in a future 2.7+ build. The metrics that were deprecated and renamed are as follows:</p> </div> <table class="tableblock frame-all grid-all stretch table table-bordered table-striped"> <colgroup> <col style="width: 50%;"> <col style="width: 50%;"> </colgroup> <thead> <tr> <th class="tableblock halign-left valign-top">Old/Deprecated Metric</th> <th class="tableblock halign-left valign-top">New Metric</th> </tr> </thead> <tbody> <tr> <td class="tableblock halign-left valign-top"><div class="content"><div class="paragraph"> <p>CurrentRedoLogFileName</p> </div></div></td> <td class="tableblock halign-left valign-top"><div class="content"><div class="paragraph"> <p>CurrentLogFileNames</p> </div></div></td> </tr> <tr> <td class="tableblock halign-left valign-top"><div class="content"><div class="paragraph"> <p>RedoLogStatus</p> </div></div></td> <td class="tableblock halign-left valign-top"><div class="content"><div class="paragraph"> <p>RedoLogStatuses</p> </div></div></td> </tr> <tr> <td class="tableblock halign-left valign-top"><div class="content"><div class="paragraph"> <p>SwitchCounter</p> </div></div></td> <td class="tableblock halign-left valign-top"><div class="content"><div class="paragraph"> <p>LogSwitchCounter</p> </div></div></td> </tr> <tr> <td class="tableblock halign-left valign-top"><div class="content"><div class="paragraph"> <p>FetchingQueryCount</p> </div></div></td> <td class="tableblock halign-left valign-top"><div class="content"><div class="paragraph"> <p>FetchQueryCount</p> </div></div></td> </tr> <tr> <td class="tableblock halign-left valign-top"><div class="content"><div class="paragraph"> <p>HoursToKeepTransactionInBuffer</p> </div></div></td> <td class="tableblock halign-left valign-top"><div class="content"><div class="paragraph"> <p>MillisecondsToKeepTransactionsInBuffer</p> </div></div></td> </tr> <tr> <td class="tableblock halign-left valign-top"><div class="content"><div class="paragraph"> <p>TotalProcessingTimeInMilliseconds</p> </div></div></td> <td class="tableblock halign-left valign-top"><div class="content"><div class="paragraph"> <p>TotalBatchProcessingTimeInMilliseconds</p> </div></div></td> </tr> <tr> <td class="tableblock halign-left valign-top"><div class="content"><div class="paragraph"> <p>RegisteredDmlCount</p> </div></div></td> <td class="tableblock halign-left valign-top"><div class="content"><div class="paragraph"> <p>TotalChangesCount</p> </div></div></td> </tr> <tr> <td class="tableblock halign-left valign-top"><div class="content"><div class="paragraph"> <p>MillisecondsToSleepBetweenMiningQuery</p> </div></div></td> <td class="tableblock halign-left valign-top"><div class="content"><div class="paragraph"> <p>SleepTimeInMilliseconds</p> </div></div></td> </tr> </tbody> <tfoot> <tr> <td class="tableblock halign-left valign-top"><div class="content"><div class="paragraph"> <p>NetworkConnectionProblemsCounter</p> </div></div></td> <td class="tableblock halign-left valign-top"><div class="content"><div class="paragraph"> <p><em>No replacement</em></p> </div></div></td> </tr> </tfoot> </table> </div> <div class="sect3"> <h4 id="lob_behavior">LOB behavior</h4> <div class="paragraph"> <p>Debezium 2.5 aligns LOB behavior in snapshot and streaming. When <code>lob.enabled</code> is set to <code>false</code>, the unavailable value placeholder will be explicitly included during snapshot to match the behavior of streaming.</p> </div> </div> </div> <div class="sect2"> <h3 id="sql_server">SQL Server</h3> <div class="sect3"> <h4 id="notification_improvements">Notification Improvements</h4> <div class="paragraph"> <p>Debezium for SQL Server works by reading the changes captured by the database in what are called capture instances. These instances can come and go based on a user&#8217;s needs, and it can be difficult to know if Debezium has concluded its own capture process for a given capture instance.</p> </div> <div class="paragraph"> <p>Debezium 2.5 remedies this problem by emitting a new notification aggregate called <code>Capture Instance</code>, allowing any observer to realize when a capture instance is no longer in use by Debezium. This new notification includes a variety of connector details including the connector&#8217;s name along with the start, stop, and commit LSN values. (<a href="https://issues.redhat.com/browse/DBZ-7043">DBZ-7043</a>)</p> </div> </div> <div class="sect3"> <h4 id="driver_updates">Driver Updates</h4> <div class="paragraph"> <p>SQL Serer 2019 introduced the ability to specify column-specific sensitivity classifications to provide better visibility and protections for sensitive data. Unfortunately, the current driver shipped with Debezium 2.4 and earlier does not support this feature. Debezium 2.5 introduces the latest 12.4.2 SQL Server driver so that users can now take advantage of this feature out of the box. (<a href="https://issues.redhat.com/browse/DBZ-7109">DBZ-7109</a>)</p> </div> </div> </div> <div class="sect2"> <h3 id="jdbc_sink">JDBC sink</h3> <div class="sect3"> <h4 id="batch_support">Batch Support</h4> <div class="paragraph"> <p>Debezium first introduced the JDBC sink connector in March 2023 as a part of Debezium 2.2. Over the last several months, this connector has seen numerous iterations to improve its stability, feature set, and capabilities. Debezium 2.5 builds atop of those efforts, introducing batch-writes. (<a href="https://issues.redhat.com/browse/DBZ-6317">DBZ-6317</a>)</p> </div> <div class="paragraph"> <p>In previous versions, the connector worked on each topic event separately; however, the new batch-write support mode will collect the events into buckets and write those changes to the target system using the fewest possible transaction boundaries as possible. This change increases the connector&#8217;s throughput capabilities and makes the interactions with the target database far more efficient.</p> </div> </div> <div class="sect3"> <h4 id="field_inclusionexclusion">Field inclusion/exclusion</h4> <div class="paragraph"> <p>Debezium 2.5 introduces a new JBDC sink feature where users can now specify which fields from the event payload are to be included or excluded from the target database write operation. This feature works just like any other include/exclude combination in the Debezium framework where these two properties are mutually exclusive.</p> </div> <div class="paragraph"> <p>As an example, if we have a simple event payload with the following fields in topic <code>customers</code>:</p> </div> <div class="listingblock"> <div class="content"> <pre class="CodeRay highlight"><code data-lang="json">{
  <span class="key"><span class="delimiter">&quot;</span><span class="content">id</span><span class="delimiter">&quot;</span></span>: <span class="integer">12345</span>,
  <span class="key"><span class="delimiter">&quot;</span><span class="content">name</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">Acme</span><span class="delimiter">&quot;</span></span>,
  <span class="key"><span class="delimiter">&quot;</span><span class="content">address</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">123 Main Street</span><span class="delimiter">&quot;</span></span>
}</code></pre> </div> </div> <div class="paragraph"> <p>If we want to avoid writing the <code>address</code> field to the target database and only write the <code>id</code> and <code>name</code> fields to the target table, we can use this new feature to accomplish this. This can be done adding either a <code>field.include.list</code> or <code>field.exclude.list</code> property.</p> </div> <div class="listingblock"> <div class="title">Example that prevents writing the address field to target</div> <div class="content"> <pre class="CodeRay highlight"><code data-lang="json">{
  <span class="key"><span class="delimiter">&quot;</span><span class="content">field.exclude.list</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">customers:address</span><span class="delimiter">&quot;</span></span>
}</code></pre> </div> </div> <div class="paragraph"> <p>The format of the include/exclude for fields is <code>[&lt;topic-name&gt;:]&lt;field-name&gt;</code>, where the topic-name is optionally and can be omitted if you want to avoid writing the <code>address</code> field for all events. Please see the JDBC sink connector configuration documentation for more details.</p> </div> </div> </div> <div class="sect2"> <h3 id="debezium_server">Debezium Server</h3> <div class="sect3"> <h4 id="operator">Operator</h4> <div class="paragraph"> <p>The Debezium Server Operator for Kubernetes has been actively improved in this preview release of Debezium 2.5. Several improvements include:</p> </div> <div class="ulist"> <ul> <li> <p>Ability to set image pull secrets in the CRDs <a href="https://issues.redhat.com/browse/DBZ-6962">DBZ-6962</a></p> </li> <li> <p>Ability to set resource limits in the CRDs <a href="https://issues.redhat.com/browse/DBZ-7052">DBZ-7052</a></p> </li> <li> <p>Published OLM bundle scripts to Maven Central <a href="https://issues.redhat.com/browse/DBZ-6995">DBZ-6995</a></p> </li> <li> <p>Support OKD/OpenShift catalog in OperatorHub release script <a href="https://issues.redhat.com/browse/DBZ-7010">DBZ-7010</a></p> </li> <li> <p>Display name and descriptions metadata available in OLM bundle <a href="https://issues.redhat.com/browse/DBZ-7011">DBZ-7011</a></p> </li> <li> <p>New metrics endpoint for gathering metrics <a href="https://issues.redhat.com/browse/DBZ-7053">DBZ-7053</a></p> </li> </ul> </div> <div class="paragraph"> <p>As we continue to improve the Debezium Server Operator for Kubernetes, we&#8217;d love to get your feedback.</p> </div> </div> <div class="sect3"> <h4 id="service_account_for_crds">Service Account for CRDs</h4> <div class="paragraph"> <p>In previous versions of Debezium, it was not possible to use a service account named differently than the predefined one. This made the process a tad bit cumbersome for users because while you could grant roles and authorization to this predefined account separately, it meant you needed to use this predefined service account rather than one that you may already wish to use.</p> </div> <div class="paragraph"> <p>Debezium 2.5 simplifies this process, allowing you to now use your own, custom service account (<a href="https://issues.redhat.com/browse/DBZ-7111">DBZ-7111</a>).</p> </div> </div> <div class="sect3"> <h4 id="kinesis_sink_improvements">Kinesis Sink Improvements</h4> <div class="paragraph"> <p>Debezium Server Kinesis users will be happy to note that there has been some reliability improvements with the sink adapter with Debezium 2.5. The Kinesis Sink will now automatically retry the delivery of a failed record up to a maximum of 5 attempts before the adapter triggers a failure. This should improve the sink adapter&#8217;s delivery reliability and help situations where a batch of changes may overload the sink&#8217;s endpoint. (<a href="https://issues.redhat.com/browse/DBZ-7032">DBZ-7032</a>)</p> </div> </div> <div class="sect3"> <h4 id="eventhubs_partitioning">EventHubs partitioning</h4> <div class="paragraph"> <p>In earlier versions of Debezium Server, users could specify a fixed partition-id to stream all changes to a single partition or provide a static partition-key that will be set on all batch operations, which ultimately lends itself to streaming all changes to the same target partition. There are situations where this may be helpful, but it more often leads to a performance concerns for downstream processing.</p> </div> <div class="paragraph"> <p>Debezium 2.5 adjusts this behavior in order to improve performance. By default, when neither a <code>partitionid</code> or <code>partitionkey</code> is defined, the EventHub sink will send events using a round-robin technique to all available partitions. Events can be forced into a single, fixed partition by specifying a <code>partitionid</code>. Alternatively, the <code>partitionkey</code> can be provided to supply a fixed partition key that will be used to route all events to a specific partition.</p> </div> <div class="paragraph"> <p>If additional partition routing requirements are necessary, you can now combine the <code>PartitionRouting</code> SMT accomplish such tasks. For more details, please see the <a href="https://debezium.io/documentation/reference/nightly/operations/debezium-server.html#_using_partitions_in_eventhubs">Event Hubs documentation</a>.</p> </div> </div> <div class="sect3"> <h4 id="rabbitmq_streams_sink">RabbitMQ Streams sink</h4> <div class="paragraph"> <p>RabbitMQ introduced <a href="https://www.rabbitmq.com/streams.html">Streams</a> in version 3.9, which utilizes a fast and efficient protocol that can be combined with AMQP 0.9.1 to support large fan-outs, replay and time travel, and large data sets with extremely high throughput. Debezium 2.5 takes advantage of this new Streams implementation by introducing a new native Streams implementation (<a href="https://issues.redhat.com/browse/DBZ-6703">DBZ-6703</a>). In order to get started with this new implementation, configure the Debezium Server sink as follows:</p> </div> <div class="listingblock"> <div class="content"> <pre class="CodeRay highlight"><code data-lang="properties">debezium.sink.type=rabbitmqstream
debezium.sink.rabbitmqstream.connection.host=&lt;hostname of RabbitMQ&gt;
debezium.sink.rabbitmqstream.connection.port=&lt;port of RabbitMQ&gt;</code></pre> </div> </div> <div class="paragraph"> <p>Additionally, if you need to pass any other connection parameters to the RabbitMQ connection, you can do so by adding those to the configuration with the prefix <code>debezium.sink.rabbitmqstream.connection.</code> to pass through any config properties.</p> </div> <div class="paragraph"> <p>Please see the <a href="https://debezium.io/documentation/reference/nightly/operations/debezium-server.html#_rabbitmq_native_stream">Debezium Server RabbitMQ documentation</a> for more details.</p> </div> </div> <div class="sect3"> <h4 id="streamnamemapper_for_apache_kafka_sink">StreamNameMapper for Apache Kafka sink</h4> <div class="paragraph"> <p>The Kafka sink behaviour can now be modified by a custom logic providing alternative implementations for specific functionalities. When the alternative implementations are not available then the default ones are used.</p> </div> <div class="paragraph"> <p>For more details, please see the <a href="https://debezium.io/documentation/reference/2.5/operations/debezium-server.html#_injection_points_9">Apache Kafka Injection points</a>.</p> </div> </div> <div class="sect3"> <h4 id="aws_sqs_sink">AWS SQS sink</h4> <div class="paragraph"> <p>Amazon Simple Queue Service (Amazon SQS) is a distributed message queuing service. It supports programmatic sending of messages via web service applications as a way to communicate over the Internet. SQS is intended to provide a highly scalable hosted message queue that resolves issues arising from the common producer–consumer problem or connectivity between producer and consumer.</p> </div> <div class="paragraph"> <p>Debezium 2.5 offers the possibility to send events to Amazon SQS.</p> </div> </div> </div> <div class="sect2"> <h3 id="spanner">Spanner</h3> <div class="ulist"> <ul> <li> <p>Support for Cloud Spanner emulator with the Spanner connector <a href="https://issues.redhat.com/browse/DBZ-6845">DBZ-6845</a></p> </li> <li> <p>Resumable snapshot support for the Vitess connector <a href="https://issues.redhat.com/browse/DBZ-7050">DBZ-7050</a></p> </li> </ul> </div> </div> <div class="sect2"> <h3 id="informix">Informix</h3> <div class="sect3"> <h4 id="ibm_informix_connector">IBM Informix Connector</h4> <div class="paragraph"> <p>Thanks to the contribution from <a href="https://github.com/nrkljo">Lars Johansson</a>, Debezium 2.5 introduces a new connector to its portfolio to gather changes from IBM Informix. IBM Informix is an embeddable, high-performance database for integrating SQL, NoSQL, JSON, time-series, and spatial data in one place. It&#8217;s designed for analytics at the edge, in the cloud, or on premise.</p> </div> <div class="paragraph"> <p>The IBM Informix connector is bundled just like any of our community lead connectors, it is available on Maven Central or you can download the plug-in archive from our <a href="/releases/2.5">Debezium 2.5</a> releases page.</p> </div> <div class="paragraph"> <p>The maven artifact coordinates are:</p> </div> <div class="listingblock"> <div class="content"> <pre class="CodeRay highlight"><code data-lang="xml"><span class="tag">&lt;dependency&gt;</span>
    <span class="tag">&lt;groupId&gt;</span>io.debezium<span class="tag">&lt;/groupId&gt;</span>
    <span class="tag">&lt;artifactId&gt;</span>debezium-connector-informix<span class="tag">&lt;/artifactId&gt;</span>
    <span class="tag">&lt;version&gt;</span>2.5.0.Final<span class="tag">&lt;/version&gt;</span>
<span class="tag">&lt;/dependency&gt;</span></code></pre> </div> </div> <div class="paragraph"> <p>If you would like contribute to the Informix connector, we have added a new repository under the Debezium organization, <a href="https://github.com/debezium/debezium-connector-informix">debezium-connector-informix</a>.</p> </div> <div class="paragraph"> <p>I&#8217;d like to thank Lars Johansson for this contribution and his collaboration with the team, kudos!</p> </div> </div> </div> <div class="sect2"> <h3 id="mariadb">MariaDB</h3> <div class="sect3"> <h4 id="preview_support">Preview support</h4> <div class="paragraph"> <p>The community has leveraged the MySQL connector as an alternative to capture changes from MariaDB for quite some time now; however that compatibility was primarily best-case effort.</p> </div> <div class="paragraph"> <p>The Debezium 2.5 release stream aims to bring MariaDB to the forefront as a first-class connector by taking a very clear and methodological approach to incrementally check, validate, and eventually support MariaDB at the same capacity that we do MySQL. Our goal and hope is that we can do this within the scope of the MySQL connector proper; however, there is still quite a bit of ongoing investigation around GTID support that may influence the path forward.</p> </div> <div class="paragraph"> <p>This first preview build of Debezium 2.5 has taken the first step, we&#8217;ve verified that the code works against a single MariaDB database deployment, the test suite passes and we&#8217;ve addressed any changes needed with the Binlog client to support that deployment. Our next steps is to look into GTID support, which MariaDB supports but using an approach that isn&#8217;t compatible with MySQL.</p> </div> <div class="paragraph"> <p>Stay tuned for future builds as we continue to expand on this and we certainly welcome any early feedback.</p> </div> </div> <div class="sect3"> <h4 id="gtid_support">GTID support</h4> <div class="paragraph"> <p>Both MySQL and MariaDB support what is called Global Transaction Identifiers or GTIDs. These are used in replication to uniquely identify transaction(s) uniquely across a cluster. The implementation details between MySQL and MariaDB differ significantly and in earlier versions of Debezium, we only supported GTID with MySQL.</p> </div> <div class="paragraph"> <p>With Debezium 2.5, we are taking another step forward by introducing GTID support for MariaDB as part of the MySQL connector offering. In order to take advantage of this behavior, you will need to use the MariaDB driver rather than the MySQL driver by using a JDBC connection prefixed as <code>jdbc:mariadb</code> rather than <code>jdbc:mysql</code>. By doing this, you can now take full advantage of working with MariaDB and GTID just like MySQL (<a href="https://issues.redhat.com/browse/DBZ-1482">DBZ-1482</a>).</p> </div> </div> </div> </div> </div> <div class="sect1"> <h2 id="other_changes">Other changes</h2> <div class="sectionbody"> <div class="paragraph"> <p>Altogether, <a href="https://issues.redhat.com/issues/?jql=project%20%3D%20DBZ%20AND%20fixVersion%20%3D%202.5.0.Final%20ORDER%20BY%20component%20ASC">7 issues</a> were fixed in this release and a total of <a href="https://issues.redhat.com/issues/?jql=project%20%3D%20DBZ%20and%20fixVersion%20%20in%20(2.5.0.Alpha1%2C%202.5.0.Alpha2%2C%202.5.0.Beta1%2C%202.5.0.Beta2%2C%202.5.0.CR1%2C%202.5.0.Final)">169 issues</a> across all the Debezium 2.5 releases.</p> </div> <div class="ulist"> <ul> <li> <p>Adding Debezium Server example using MySQL and GCP PubSub <a href="https://issues.redhat.com/browse/DBZ-4471">DBZ-4471</a></p> </li> <li> <p>Refactor ElapsedTimeStrategy <a href="https://issues.redhat.com/browse/DBZ-6778">DBZ-6778</a></p> </li> <li> <p>Multiple debezium:offsets Redis clients <a href="https://issues.redhat.com/browse/DBZ-6952">DBZ-6952</a></p> </li> <li> <p>Wrong case-behavior for non-avro column name in sink connector <a href="https://issues.redhat.com/browse/DBZ-6958">DBZ-6958</a></p> </li> <li> <p>Handle properly bytea field for jdbc sink to postgresql <a href="https://issues.redhat.com/browse/DBZ-6967">DBZ-6967</a></p> </li> <li> <p>Debezium jdbc sink process truncate event failure <a href="https://issues.redhat.com/browse/DBZ-6970">DBZ-6970</a></p> </li> <li> <p>Single quote replication includes escaped quotes for N(CHAR/VARCHAR) columns <a href="https://issues.redhat.com/browse/DBZ-6975">DBZ-6975</a></p> </li> <li> <p>Provide configuration option to exclude extension attributes from a CloudEvent <a href="https://issues.redhat.com/browse/DBZ-6982">DBZ-6982</a></p> </li> <li> <p>Debezium jdbc sink should throw not supporting schema change topic exception <a href="https://issues.redhat.com/browse/DBZ-6990">DBZ-6990</a></p> </li> <li> <p>Debezium doesn&#8217;t compile with JDK 21 <a href="https://issues.redhat.com/browse/DBZ-6992">DBZ-6992</a></p> </li> <li> <p>OLM bundle version for GA releases is invalid <a href="https://issues.redhat.com/browse/DBZ-6994">DBZ-6994</a></p> </li> <li> <p>Further refactoring to correct downstream rendering of incremental snapshots topics <a href="https://issues.redhat.com/browse/DBZ-6997">DBZ-6997</a></p> </li> <li> <p>ALTER TABLE fails when adding multiple columns to JDBC sink target <a href="https://issues.redhat.com/browse/DBZ-6999">DBZ-6999</a></p> </li> <li> <p>Invalid Link to zulip chat in CSV metadata <a href="https://issues.redhat.com/browse/DBZ-7000">DBZ-7000</a></p> </li> <li> <p>Make sure to terminate the task once connectivity is lost to either the rebalance or sync topic <a href="https://issues.redhat.com/browse/DBZ-7001">DBZ-7001</a></p> </li> <li> <p>Missing .metadata.annotations.repository field in CSV metadata <a href="https://issues.redhat.com/browse/DBZ-7003">DBZ-7003</a></p> </li> <li> <p>Single quote replication and loss of data <a href="https://issues.redhat.com/browse/DBZ-7006">DBZ-7006</a></p> </li> <li> <p>Remove deprecated embedded engine code <a href="https://issues.redhat.com/browse/DBZ-7013">DBZ-7013</a></p> </li> <li> <p>Enable replication slot advance check <a href="https://issues.redhat.com/browse/DBZ-7015">DBZ-7015</a></p> </li> <li> <p>Add configuration option to CloudEventsConverter to retrieve id and type from headers <a href="https://issues.redhat.com/browse/DBZ-7016">DBZ-7016</a></p> </li> <li> <p>Oracle connector: Payload size over 76020 bytes are getting truncated <a href="https://issues.redhat.com/browse/DBZ-7018">DBZ-7018</a></p> </li> <li> <p>Use optional schema for Timezone Converter tests <a href="https://issues.redhat.com/browse/DBZ-7020">DBZ-7020</a></p> </li> <li> <p>DDL statement couldn&#8217;t be parsed <a href="https://issues.redhat.com/browse/DBZ-7030">DBZ-7030</a></p> </li> <li> <p>Blocking ad-hoc snapshot is not really blocking for MySQL <a href="https://issues.redhat.com/browse/DBZ-7035">DBZ-7035</a></p> </li> <li> <p>Fake ROTATE event on connection restart cleans metadata <a href="https://issues.redhat.com/browse/DBZ-7037">DBZ-7037</a></p> </li> <li> <p>Consolidate resource labels and annotations <a href="https://issues.redhat.com/browse/DBZ-7064">DBZ-7064</a></p> </li> <li> <p>Oracle RAC throws ORA-00310: archive log sequence required <a href="https://issues.redhat.com/browse/DBZ-5350">DBZ-5350</a></p> </li> <li> <p>oracle missing CDC data <a href="https://issues.redhat.com/browse/DBZ-5656">DBZ-5656</a></p> </li> <li> <p>Missing oracle cdc records <a href="https://issues.redhat.com/browse/DBZ-5750">DBZ-5750</a></p> </li> <li> <p>Add (integration) tests for Oracle connector-specific Debezium Connect REST extension <a href="https://issues.redhat.com/browse/DBZ-6763">DBZ-6763</a></p> </li> <li> <p>Intermittent failure of MongoDbReplicaSetAuthTest <a href="https://issues.redhat.com/browse/DBZ-6875">DBZ-6875</a></p> </li> <li> <p>Connector frequently misses commit operations <a href="https://issues.redhat.com/browse/DBZ-6942">DBZ-6942</a></p> </li> <li> <p>Missing events from Oracle 19c <a href="https://issues.redhat.com/browse/DBZ-6963">DBZ-6963</a></p> </li> <li> <p>Mongodb tests in RHEL system testsuite are failing with DBZ 2.3.4 <a href="https://issues.redhat.com/browse/DBZ-6996">DBZ-6996</a></p> </li> <li> <p>Use DebeziumEngine instead of EmbeddedEngine in the testsuite <a href="https://issues.redhat.com/browse/DBZ-7007">DBZ-7007</a></p> </li> <li> <p>Debezium Embedded Infinispan Performs Slowly <a href="https://issues.redhat.com/browse/DBZ-7047">DBZ-7047</a></p> </li> <li> <p>Field exclusion does not work with events of removed fields <a href="https://issues.redhat.com/browse/DBZ-7058">DBZ-7058</a></p> </li> <li> <p>Update transformation property "delete.tombstone.handling.mode" to debezium doc <a href="https://issues.redhat.com/browse/DBZ-7062">DBZ-7062</a></p> </li> <li> <p>JDBC sink connector not working with CloudEvent <a href="https://issues.redhat.com/browse/DBZ-7065">DBZ-7065</a></p> </li> <li> <p>JDBC connection leak when error occurs during processing <a href="https://issues.redhat.com/browse/DBZ-7069">DBZ-7069</a></p> </li> <li> <p>Some server tests fail due to @com.google.inject.Inject annotation <a href="https://issues.redhat.com/browse/DBZ-7077">DBZ-7077</a></p> </li> <li> <p>Add MariaDB driver for testing and distribution <a href="https://issues.redhat.com/browse/DBZ-7085">DBZ-7085</a></p> </li> <li> <p>Allow DS JMX to use username-password authentication on k8 <a href="https://issues.redhat.com/browse/DBZ-7087">DBZ-7087</a></p> </li> <li> <p>HttpIT fails with "Unrecognized field subEvents" <a href="https://issues.redhat.com/browse/DBZ-7092">DBZ-7092</a></p> </li> <li> <p>MySQL parser does not conform to arithmetical operation priorities <a href="https://issues.redhat.com/browse/DBZ-7095">DBZ-7095</a></p> </li> <li> <p>VitessConnectorIT.shouldTaskFailIfColumnNameInvalid fails <a href="https://issues.redhat.com/browse/DBZ-7104">DBZ-7104</a></p> </li> <li> <p>When RelationalBaseSourceConnector#validateConnection is called with invalid config [inside Connector#validate()] can lead to exceptions <a href="https://issues.redhat.com/browse/DBZ-7105">DBZ-7105</a></p> </li> <li> <p>Debezium crashes on parsing MySQL DDL statement (specific INSERT) <a href="https://issues.redhat.com/browse/DBZ-7119">DBZ-7119</a></p> </li> <li> <p>Generate sundrio fluent builders for operator model <a href="https://issues.redhat.com/browse/DBZ-6550">DBZ-6550</a></p> </li> <li> <p>Convert operator source into multi module project <a href="https://issues.redhat.com/browse/DBZ-6551">DBZ-6551</a></p> </li> <li> <p>Implement "validate filters" endpoint in connector-specific Connect REST extensions <a href="https://issues.redhat.com/browse/DBZ-6762">DBZ-6762</a></p> </li> <li> <p>Test Avro adjustment for MongoDb connector and ExtractNewDocumentState SMT <a href="https://issues.redhat.com/browse/DBZ-6809">DBZ-6809</a></p> </li> <li> <p>Implement IT tests against Cloud Spanner emulator in main repo. <a href="https://issues.redhat.com/browse/DBZ-6906">DBZ-6906</a></p> </li> <li> <p>The DefaultDeleteHandlingStrategy couldn&#8217;t add the rewrite "__deleted" field to a non-struct value <a href="https://issues.redhat.com/browse/DBZ-7066">DBZ-7066</a></p> </li> <li> <p>Implement strategy pattern for MariaDB and MySQL differences <a href="https://issues.redhat.com/browse/DBZ-7083">DBZ-7083</a></p> </li> <li> <p>Debezium server has no default for offset.flush.interval.ms <a href="https://issues.redhat.com/browse/DBZ-7099">DBZ-7099</a></p> </li> <li> <p>Failed to authenticate to the MySQL database after snapshot <a href="https://issues.redhat.com/browse/DBZ-7132">DBZ-7132</a></p> </li> <li> <p>Run MySQL CI builds in parallel <a href="https://issues.redhat.com/browse/DBZ-7135">DBZ-7135</a></p> </li> <li> <p>Failure reading CURRENT_TIMESTAMP on Informix 12.10 <a href="https://issues.redhat.com/browse/DBZ-7137">DBZ-7137</a></p> </li> <li> <p>Debezium-ddl-parser crashes on parsing MySQL DDL statement (specific UNION) <a href="https://issues.redhat.com/browse/DBZ-7140">DBZ-7140</a></p> </li> <li> <p>outbox.EventRouter SMT throws NullPointerException when there is a whitespace in fields.additional.placement value <a href="https://issues.redhat.com/browse/DBZ-7142">DBZ-7142</a></p> </li> <li> <p>Debezium-ddl-parser crashes on parsing MySQL DDL statement (specific UPDATE) <a href="https://issues.redhat.com/browse/DBZ-7152">DBZ-7152</a></p> </li> <li> <p>Add matrix strategy to workflows <a href="https://issues.redhat.com/browse/DBZ-7154">DBZ-7154</a></p> </li> <li> <p>Add Unit Tests for ServiceAccountDependent Class in Debezium Operator Repository <a href="https://issues.redhat.com/browse/DBZ-7155">DBZ-7155</a></p> </li> <li> <p>JsonSerialisation is unable to process changes from sharded collections with composite sharding key <a href="https://issues.redhat.com/browse/DBZ-7157">DBZ-7157</a></p> </li> <li> <p>Log sequence check should treat each redo thread independently <a href="https://issues.redhat.com/browse/DBZ-7158">DBZ-7158</a></p> </li> <li> <p>Fail fast during deserialization if a value is not a CloudEvent <a href="https://issues.redhat.com/browse/DBZ-7159">DBZ-7159</a></p> </li> <li> <p>Correctly calculate Max LSN <a href="https://issues.redhat.com/browse/DBZ-7175">DBZ-7175</a></p> </li> <li> <p>Upgrade to Infinispan 14.0.20 <a href="https://issues.redhat.com/browse/DBZ-7187">DBZ-7187</a></p> </li> <li> <p>Upgrade Outbox Extension to Quarkus 3.5.3 <a href="https://issues.redhat.com/browse/DBZ-7188">DBZ-7188</a></p> </li> <li> <p>Fix DebeziumMySqlConnectorResource not using the new MySQL adatper structure to support different MySQL flavors <a href="https://issues.redhat.com/browse/DBZ-7179">DBZ-7179</a></p> </li> <li> <p>Parsing MySQL indexes for JSON field fails, when casting is used with types double and float <a href="https://issues.redhat.com/browse/DBZ-7189">DBZ-7189</a></p> </li> <li> <p>Unchanged toasted array columns are substituted with unavailable.value.placeholder, even when REPLICA IDENTITY FULL is configured. <a href="https://issues.redhat.com/browse/DBZ-7193">DBZ-7193</a></p> </li> <li> <p>Enable ability to stream changes against Oracle 23c for LogMiner <a href="https://issues.redhat.com/browse/DBZ-7194">DBZ-7194</a></p> </li> <li> <p>Add modify range_partitions to modify_table_partition rule in parsing PL/SQL <a href="https://issues.redhat.com/browse/DBZ-7196">DBZ-7196</a></p> </li> <li> <p>MongoDB streaming pauses for Blocking Snapshot only when there is no event <a href="https://issues.redhat.com/browse/DBZ-7206">DBZ-7206</a></p> </li> <li> <p>Handle Drop Tablespace in PL/SQL <a href="https://issues.redhat.com/browse/DBZ-7208">DBZ-7208</a></p> </li> <li> <p>Upgrade logback to 1.2.12 <a href="https://issues.redhat.com/browse/DBZ-7209">DBZ-7209</a></p> </li> <li> <p>NPE on AbstractInfinispanLogMinerEventProcessor.logCacheStats <a href="https://issues.redhat.com/browse/DBZ-7211">DBZ-7211</a></p> </li> <li> <p>Oracle abandoned transaction implementation bug causes OoM <a href="https://issues.redhat.com/browse/DBZ-7236">DBZ-7236</a></p> </li> <li> <p>Add Grammar Oracle Truncate Cluster <a href="https://issues.redhat.com/browse/DBZ-7242">DBZ-7242</a></p> </li> <li> <p>Length value is not removed when changing a column&#8217;s type <a href="https://issues.redhat.com/browse/DBZ-7251">DBZ-7251</a></p> </li> <li> <p>MongoDB table/collection snapshot notification contain incorrect offsets <a href="https://issues.redhat.com/browse/DBZ-7252">DBZ-7252</a></p> </li> <li> <p>Broken support for multi-namespace watching <a href="https://issues.redhat.com/browse/DBZ-7254">DBZ-7254</a></p> </li> <li> <p>Add tracing logs to track execution time for Debezium JDBC connector <a href="https://issues.redhat.com/browse/DBZ-7217">DBZ-7217</a></p> </li> <li> <p>Validate &amp; clarify multiple archive log destination requirements for Oracle <a href="https://issues.redhat.com/browse/DBZ-7218">DBZ-7218</a></p> </li> <li> <p>Upgrade logback to 1.2.13 <a href="https://issues.redhat.com/browse/DBZ-7232">DBZ-7232</a></p> </li> <li> <p>Add configuration option to CloudEventsConverter to customize schema type name <a href="https://issues.redhat.com/browse/DBZ-7235">DBZ-7235</a></p> </li> <li> <p>Support persistent history for snapshot requests for the kafka signal topic. <a href="https://issues.redhat.com/browse/DBZ-7164">DBZ-7164</a></p> </li> <li> <p>Change metrics endpoint of Connect REST Extensions to use the MBeanServerv directly instead of HTTP calls to the Jolokia endpoint <a href="https://issues.redhat.com/browse/DBZ-7177">DBZ-7177</a></p> </li> <li> <p>Metrics endpoint must handle connectors with multiple tasks (SQL Server) <a href="https://issues.redhat.com/browse/DBZ-7178">DBZ-7178</a></p> </li> <li> <p>DDL GRANT statement couldn&#8217;t be parsed <a href="https://issues.redhat.com/browse/DBZ-7213">DBZ-7213</a></p> </li> <li> <p>Debezium Oracle plugin 2.5.0 Beta does not support Oracle 11g <a href="https://issues.redhat.com/browse/DBZ-7257">DBZ-7257</a></p> </li> <li> <p>Error during snapshot with multiple snapshot threads will not properly abort snasphostting <a href="https://issues.redhat.com/browse/DBZ-7264">DBZ-7264</a></p> </li> <li> <p>MySQL RDS UPDATE queries not ignored <a href="https://issues.redhat.com/browse/DBZ-7271">DBZ-7271</a></p> </li> <li> <p>Leaking JDBC connections <a href="https://issues.redhat.com/browse/DBZ-7275">DBZ-7275</a></p> </li> <li> <p>IncrementalSnapshotCaseSensitiveIT#insertDeleteWatermarkingStrategy fails <a href="https://issues.redhat.com/browse/DBZ-7276">DBZ-7276</a></p> </li> <li> <p>Debezium MySQL could not parse certain grant privileges. <a href="https://issues.redhat.com/browse/DBZ-7277">DBZ-7277</a></p> </li> <li> <p>Add PL/SQL Parser for Create Table Memoptimize <a href="https://issues.redhat.com/browse/DBZ-7279">DBZ-7279</a></p> </li> <li> <p>Support for Creating EDITIONABLE or NONEDITIONABLE Packages <a href="https://issues.redhat.com/browse/DBZ-7283">DBZ-7283</a></p> </li> <li> <p>Add PL/SQL Parser for Alter Table Memoptimize <a href="https://issues.redhat.com/browse/DBZ-7268">DBZ-7268</a></p> </li> <li> <p>Move metrics endpoint from UI backend to the Debezium Connect REST extension/s <a href="https://issues.redhat.com/browse/DBZ-6764">DBZ-6764</a></p> </li> <li> <p>website-builder image fails with newer bundler <a href="https://issues.redhat.com/browse/DBZ-7269">DBZ-7269</a></p> </li> <li> <p>Vitess connector build fails due to invalid GPG key <a href="https://issues.redhat.com/browse/DBZ-7280">DBZ-7280</a></p> </li> </ul> </div> <div class="paragraph"> <p>A big thank you to all the contributors from the community who worked on Debezium 2.5: <a href="https://github.com/ahmedrachid">Ahmed Rachid Hazourli</a>, <a href="https://github.com/AnatolyPopov">Anatolii Popov</a>, <a href="https://github.com/ani-sha">Anisha Mohanty</a>, <a href="https://github.com/roldanbob">Bob Roldan</a>, <a href="https://github.com/Naros">Chris Cranford</a>, <a href="https://github.com/gunnarmorling">Gunnar Morling</a>, <a href="https://github.com/harveyyue">Harvey Yue</a>, <a href="https://github.com/ilyasahsan123">Ilyas Ahsan</a>, <a href="https://github.com/nicholas-fwang">Inki Hwang</a>, <a href="https://github.com/jcechace">Jakub Cechacek</a>, <a href="https://github.com/Jiabao-Sun">Jiabao Sun</a>, <a href="https://github.com/sherpa003">Jiri Kulhanek</a>, <a href="https://github.com/jpechane">Jiri Pechanec</a>, <a href="https://github.com/JordanP">Jordan Pittier</a>, <a href="https://github.com/koszta5">Kosta Kostelnik</a>, <a href="https://github.com/nrkljo">Lars M. Johansson</a>, <a href="https://github.com/methodmissing">Lourens Naudé</a>, <a href="https://github.com/mfvitale">Mario Fiore Vitale</a>, <a href="https://github.com/yinzara">Matt Vance</a>, <a href="https://github.com/nilshartmann">Nils Hartmann</a>, <a href="https://github.com/obabec">Ondrej Babec</a>, <a href="https://github.com/RafaelJCamara">Rafael Câmara</a>, <a href="https://github.com/rk3rn3r">René Kerner</a>, <a href="https://github.com/roldanbob">Robert Roldan</a>, <a href="https://github.com/rkudryashov">Roman Kudryashov</a>, <a href="https://github.com/slknijnenburg">Sebastiaan Knijnenburg</a>, <a href="https://github.com/PlugaruT">Tudor Plugaru</a>, <a href="https://github.com/koneru9999">V K</a>, <a href="https://github.com/ramanenka">Vadzim Ramanenka</a>, <a href="https://github.com/vsantona">Vincenzo Santonastaso</a>, <a href="https://github.com/vjuranek">Vojtech Juranek</a>, <a href="https://github.com/GOODBOY008">Zhongqiang Gong</a>, <a href="https://github.com/baabgai">baabgai</a>, <a href="https://github.com/rgibaiev">ruslan</a>, and <a href="https://github.com/caicancai">蔡灿材</a>!</p> </div> </div> </div> <div class="sect1"> <h2 id="outlook_whats_next">Outlook &amp; What&#8217;s next?</h2> <div class="sectionbody"> <div class="paragraph"> <p>Debezium 2.5 was a feature packed milestone for the team, so after a few drinks and celebration, the plan is to turn our focus toward what is ahead for the 2.6 release. We already had our second Debezium Community meeting, discussed our <a href="/docs/roadmap">road map</a>, and we&#8217;re more than eager to get started.</p> </div> <div class="paragraph"> <p>If you have any ideas or suggestions for what you&#8217;d like to see included in Debezium 2.6, please provide that feedback on our <a href="https://groups.google.com/forum/#!forum/debezium">mailing list</a> or in our <a href="https://debezium.zulipchat.com/login/#narrow/stream/302529-users">Zulip chat</a>.</p> </div> <div class="paragraph"> <p>Merry Christmas and Happy New Year 2024!</p> </div> <div class="paragraph"> <p>Onwards and Upwards!</p> </div> </div> </div>]]></content><author><name>Fiore Mario Vitale</name></author><category term="releases"/><category term="mongodb"/><category term="mysql"/><category term="postgres"/><category term="sqlserver"/><category term="cassandra"/><category term="oracle"/><category term="db2"/><category term="vitess"/><category term="outbox"/><category term="spanner"/><category term="jdbc"/><summary type="html"><![CDATA[As the winter chill settles in, and we transition to the festive holiday season, our dedicated team has been busy preparing a special gift for the Debezium community. I am excited to share the immediate release of Debezium 2.5.0.Final, just in time for the holiday celebrations. Get ready to unwrap this latest minor version, filled with holiday cheer and exciting new features! Let&#8217;s take a moment and review all the new features, changes, and improvements that are included in Debezium 2.5, which includes 181 issues resolved by 37 unique contributors.]]></summary></entry><entry><title type="html">Streamlined Performance: Debezium JDBC connector batch support</title><link href="https://debezium.io/blog/2023/12/20/JDBC-sink-connector-batch-support/" rel="alternate" type="text/html" title="Streamlined Performance: Debezium JDBC connector batch support"/><published>2023-12-20T10:11:11+00:00</published><updated>2023-12-20T10:11:11+00:00</updated><id>https://debezium.io/blog/2023/12/20/JDBC-sink-connector-batch-support</id><content type="html" xml:base="https://debezium.io/blog/2023/12/20/JDBC-sink-connector-batch-support/"><![CDATA[<div class="paragraph"> <p>In the realm of data streaming optimization, even subtle improvements can make a significant impact. This article focuses on one such refinement: the introduction of batch support in Debezium&#8217;s JDBC connector. We&#8217;ll guide you through the process of enabling batches and share the practical outcomes of our performance testing.</p> </div> <div class="paragraph"> <p></p> </div> <div class="sect1"> <h2 id="configuring_batches">Configuring batches</h2> <div class="sectionbody"> <div class="paragraph"> <p>Since our previous releases were primarily focused on core functionalities, our latest release is dedicated to addressing the main pain point associated with the connector: performance.</p> </div> <div class="paragraph"> <p>The goal was to improve throughput in terms of events processed per second (EPS). To achieve this, we revisited the connector to enable the processing of batches of events.</p> </div> <div class="paragraph"> <p>You can now fine-tune the size of the batch using a new property: <code>batch.size</code>.</p> </div> <div class="paragraph"> <p>The <code>batch.size</code> property defines the number of records to be <strong>attempted</strong> for batching into the destination table. However, it&#8217;s crucial to note that the actual size of processed records is contingent upon the <code>consumer.max.poll.records</code> property of the Kafka Connect worker.</p> </div> <div class="paragraph"> <p>It&#8217;s important to be aware that if you set <code>consumer.max.poll.records</code> in the Connect worker properties to a value lower than <code>batch.size</code>, batch processing will be constrained by <code>consumer.max.poll.records</code>, and the intended <code>batch.size</code> may not be achieved.</p> </div> <div class="sect2"> <h3 id="configure_consumer_max_poll_records">Configure consumer max poll records</h3> <div class="paragraph"> <p>If you prefer not to configure the <code>consumer.max.poll.records</code> property globally on the Connect worker, you have the option to set the underlying consumer&#8217;s <code>max.poll.records</code> for a specific connector using <code>consumer.override.max.poll.records</code> in the connector configuration.</p> </div> <div class="paragraph"> <p>To enable per-connector configuration properties and override the default worker properties, add the following parameter to the worker properties file: <code>connector.client.config.override.policy</code> <a href="https://docs.confluent.io/platform/current/connect/references/allconfigs.html#override-the-worker-configuration">(see override-the-worker-configuration)</a>.</p> </div> <div class="paragraph"> <p>This property defines which configurations can be overridden by the connector. The default implementation is <code>All</code>, but other possible policies include <code>None</code> and <code>Principal</code>.</p> </div> <div class="paragraph"> <p>When <code>connector.client.config.override.policy=All</code>, each connector belonging to the worker is permitted to override the worker configuration. You can now utilize the following override prefixes for sink connector configurations: <code>consumer.override.&lt;sink-configuration-property&gt;</code>.</p> </div> <div class="paragraph"> <p>It&#8217;s worth noting that even if you set <code>max.poll.records</code> (with the default value of 500), you may receive fewer records. This is due to other properties that can impact record fetching from the topic/partitions.</p> </div> <div class="paragraph"> <p><strong>Name</strong>: <a href="https://kafka.apache.org/documentation/#consumerconfigs_fetch.max.bytes">fetch.max.bytes</a><br> <strong>Default</strong>: 52428800 (52MB)<br></p> </div> <div class="paragraph"> <p><strong>Name</strong>: <a href="https://kafka.apache.org/documentation/#consumerconfigs_max.partition.fetch.bytes">max.partition.fetch.bytes</a><br> <strong>Default</strong>: 1048576 (1MB)<br></p> </div> <div class="paragraph"> <p><strong>Name</strong>: <a href="https://kafka.apache.org/documentation/#brokerconfigs_message.max.bytes">message.max.bytes</a><br> <strong>Default</strong>: 1048588 (1MB)<br></p> </div> <div class="paragraph"> <p><strong>Name</strong>: <a href="https://kafka.apache.org/documentation/#topicconfigs_max.message.bytes">max.message.bytes</a><br> <strong>Default</strong>: 1048588 (1MB)<br></p> </div> <div class="paragraph"> <p>So adjust these based on your expected payload size to reach the desired number of poll records.</p> </div> </div> </div> </div> <div class="sect1"> <h2 id="results_from_performance_testing">Results from performance testing</h2> <div class="sectionbody"> <div class="paragraph"> <p>The objective of the performance tests was to provide a sense of how batch support improved the EPS. Therefore, these numbers do not reflect any real scenario but rather showcase relative improvements compared to the old JDBC version.</p> </div> <div class="sect2"> <h3 id="configuration_used_for_the_tests">Configuration used for the tests</h3> <div class="paragraph"> <p>All tests executed on a <strong>ThinkPad T14s Gen 2i</strong></p> </div> <div class="paragraph"> <p><strong>CPU</strong>: Intel&#174; Core&#8482; i7-1185G7 @ 3.00GHz (8 cores)<br> <strong>RAM</strong>: 32GB<br> <strong>Disk</strong>: 512GB NVMe<br></p> </div> <div class="paragraph"> <p>All required components (Kafka, Connect, Zookeeper, etc.) inside docker containers.</p> </div> <div class="paragraph"> <p>The table used for the test has the following structure:</p> </div> <div class="listingblock"> <div class="content"> <pre class="CodeRay highlight"><code data-lang="sql"><span class="class">CREATE</span> <span class="type">TABLE</span> <span class="string"><span class="delimiter">`</span><span class="content">aviation</span><span class="delimiter">`</span></span> (
  <span class="string"><span class="delimiter">`</span><span class="content">id</span><span class="delimiter">`</span></span> <span class="predefined-type">int</span> <span class="keyword">NOT</span> <span class="predefined-constant">NULL</span>,
  <span class="string"><span class="delimiter">`</span><span class="content">aircraft</span><span class="delimiter">`</span></span> <span class="predefined-type">longtext</span>,
  <span class="string"><span class="delimiter">`</span><span class="content">airline</span><span class="delimiter">`</span></span> <span class="predefined-type">longtext</span>,
  <span class="string"><span class="delimiter">`</span><span class="content">passengers</span><span class="delimiter">`</span></span> <span class="predefined-type">int</span> <span class="directive">DEFAULT</span> <span class="predefined-constant">NULL</span>,
  <span class="string"><span class="delimiter">`</span><span class="content">airport</span><span class="delimiter">`</span></span> <span class="predefined-type">longtext</span>,
  <span class="string"><span class="delimiter">`</span><span class="content">flight</span><span class="delimiter">`</span></span> <span class="predefined-type">longtext</span>,
  <span class="string"><span class="delimiter">`</span><span class="content">metar</span><span class="delimiter">`</span></span> <span class="predefined-type">longtext</span>,
  <span class="string"><span class="delimiter">`</span><span class="content">flight_distance</span><span class="delimiter">`</span></span> <span class="predefined-type">double</span> <span class="directive">DEFAULT</span> <span class="predefined-constant">NULL</span>
)</code></pre> </div> </div> </div> <div class="sect2"> <h3 id="test_plan">Test plan</h3> <div class="paragraph"> <p>We planned to execute these tests:</p> </div> <div class="ulist"> <ul> <li> <p>100K events from single table</p> <div class="ulist"> <ul> <li> <p>MySQL batch vs without batch</p> </li> </ul> </div> </li> <li> <p>100K events from three different table</p> <div class="ulist"> <ul> <li> <p>MySQL batch vs without batch</p> </li> </ul> </div> </li> <li> <p>1M events from single table</p> <div class="ulist"> <ul> <li> <p>MySQL batch with batch size: 500, 1000, 5000, 10000 vs without batch</p> </li> <li> <p>MySQL batch with batch size: 500, 1000, 5000, 10000 with JSONConverter</p> </li> <li> <p>MySQL batch with batch size: 500, 1000, 5000, 10000 with Avro</p> </li> <li> <p>MySQL batch with batch size: 500, 1000, 5000, 10000 with Avro and no index on destination table</p> </li> </ul> </div> </li> </ul> </div> <div class="imageblock centered-image"> <div class="content"> <img src="/assets/images/2023-12-06-JDBC-sink-connector-batch-support/100k-batch-no-batch.png" alt="100k batch no batch"> </div> <div class="title">Figure 1. &#160;</div> </div> <div class="paragraph"> <p><em>Figure 1</em> illustrates the total execution time required to process 100,000 events from a single table, comparing MySQL connector with and without the batch support.</p> </div> <div class="admonitionblock note"> <table> <tr> <td class="icon"> <i class="fa icon-note" title="Note"></i> </td> <td class="content"> <div class="paragraph"> <p>Despite the default values being set to <code>500</code> for both <code>batch.size</code> and <code>consumer.max.poll.records</code>, the observed actual size was reduced to <code>337</code> records due to payload size considerations.</p> </div> </td> </tr> </table> </div> <div class="paragraph"> <p>We can observe, as expected, that the Debezium JDBC connector with batch support is faster.</p> </div> <div class="imageblock centered-image"> <div class="content"> <img src="/assets/images/2023-12-06-JDBC-sink-connector-batch-support/100k-3-tables.png" alt="100k 3 tables"> </div> <div class="title">Figure 2. &#160;</div> </div> <div class="paragraph"> <p>In <em>Figure 2</em>, we observe that splitting 100,000 events into three tables does not impact the results. The Debezium JDBC connector with batch support remains faster compared to the non-batch version.</p> </div> <div class="imageblock centered-image"> <div class="content"> <img src="/assets/images/2023-12-06-JDBC-sink-connector-batch-support/1M-batch-no-batch.png" alt="1M batch no batch"> </div> <div class="title">Figure 3. &#160;</div> </div> <div class="paragraph"> <p>In <em>Figure 3</em>, it is evident that the performance gain becomes more pronounced with 1,000,000 events. The Debezium JDBC connector with batch support took approximately 7 minutes to insert all events, with an average throughput of 2300 eps, while the process without batch support took 570 minutes (9.5 hours). Therefore, the Debezium JDBC connector with batch support is 79 times faster than the version without batch support.</p> </div> <div class="imageblock centered-image"> <div class="content"> <img src="/assets/images/2023-12-06-JDBC-sink-connector-batch-support/1M-different-batch-size-json.png" alt="1M different batch size json"> </div> <div class="title">Figure 4. &#160;</div> </div> <div class="paragraph"> <p>In <em>Figure 4</em>, we observe the behavior of the Debezium JDBC connector using the <code>org.apache.kafka.connect.json.JsonConverter</code> converter and writing to MySQL with different <code>batch.size</code> settings. While the initial differences are noticeable, it becomes apparent that the throughput continues to slow down. On average, all the <code>batch.size</code> configurations take about 7 minutes to process all events.</p> </div> <div class="paragraph"> <p>This raised a concern for us. After conducting a thorough analysis (profiling), we identified another issue: event deserialization. With high probability, this was the cause of the non-scalability of <code>batch.size</code> settings.</p> </div> <div class="paragraph"> <p>Although serialization improved scalability, we still lack an answer regarding the slowdown of EPS during the test run. One hypothesis could involve a certain type of buffer somewhere.</p> </div> <div class="imageblock centered-image"> <div class="content"> <img src="/assets/images/2023-12-06-JDBC-sink-connector-batch-support/1M-different-batch-size-avro.png" alt="1M different batch size avro"> </div> <div class="title">Figure 5. &#160;</div> </div> <div class="paragraph"> <p>We then conducted experiments with Avro, and as depicted in <em>Figure 5</em>, the results show a significant improvement. As expected, processing 1,000,000 events with <code>batch.size=500</code> is slower than with <code>batch.size=10000</code>. Notably, in our test configuration, the optimal value for <code>batch.size</code> is 1000, resulting in the fastest processing time.</p> </div> <div class="paragraph"> <p>Although the results are better compared to JSON, there is still some performance degradation.</p> </div> <div class="paragraph"> <p>To identify potential bottlenecks in the code, we added some metrics and found that the majority of time was spent executing batch statements on the database.</p> </div> <div class="paragraph"> <p>Further investigation revealed that our table had an index defined on the primary key, which was slowing down the inserts.</p> </div> <div class="imageblock centered-image"> <div class="content"> <img src="/assets/images/2023-12-06-JDBC-sink-connector-batch-support/1M-different-batch-size-avro-no-index.png" alt="1M different batch size avro no index"> </div> <div class="title">Figure 6. &#160;</div> </div> <div class="paragraph"> <p>in <em>Figure 6</em> you can see the improved performance with Avro and without primary key index. It is also evident the performance boost with a high value of <code>batch.size</code>.</p> </div> </div> </div> </div> <div class="sect1"> <h2 id="conclusion">Conclusion</h2> <div class="sectionbody"> <div class="paragraph"> <p>We&#8217;ve explored how adjusting the <code>batch.size</code> can enhance the performance of the Debezium JDBC connector and discussed the proper configuration for maximizing its benefits. Equally crucial is adhering to performance tips and general guidelines for efficient inserts tailored to your specific database.</p> </div> <div class="paragraph"> <p>Here are a few examples:</p> </div> <div class="ulist"> <ul> <li> <p><a href="https://dev.mysql.com/doc/refman/8.0/en/insert-optimization.html">MySQL - Optimizing INSERT Statements</a></p> </li> <li> <p><a href="https://dev.mysql.com/doc/connectors/en/connector-j-connp-props-performance-extensions.html">MySQL - Performance extensions</a></p> </li> <li> <p><a href="https://www.postgresql.org/docs/current/populate.html">PostgreSQL - Populating a Database</a></p> </li> </ul> </div> <div class="paragraph"> <p>While some settings may be specific to certain databases, several general principles apply across the majority of them.</p> </div> </div> </div>]]></content><author><name>Fiore Mario Vitale</name></author><category term="debezium"/><category term="features"/><category term="jdbc"/><category term="batch"/><category term="performance"/><summary type="html"><![CDATA[In the realm of data streaming optimization, even subtle improvements can make a significant impact. This article focuses on one such refinement: the introduction of batch support in Debezium&#8217;s JDBC connector. We&#8217;ll guide you through the process of enabling batches and share the practical outcomes of our performance testing.]]></summary></entry><entry><title type="html">Debezium 2.5.0.CR1 Released</title><link href="https://debezium.io/blog/2023/12/14/debezium-2-5-cr1-released/" rel="alternate" type="text/html" title="Debezium 2.5.0.CR1 Released"/><published>2023-12-14T00:00:00+00:00</published><updated>2023-12-14T00:00:00+00:00</updated><id>https://debezium.io/blog/2023/12/14/debezium-2-5-cr1-released</id><content type="html" xml:base="https://debezium.io/blog/2023/12/14/debezium-2-5-cr1-released/"><![CDATA[<div class="paragraph"> <p>As we are just one step away from the Debezium 2.5 final release, I am pleased to announce that Debezium <strong>2.5.0.CR1</strong> is now available. This release includes a number of improvements like AWS SQS sink for Debezium Server, INSERT/DELETE semantics for incremental snapshot watermarking, ReselectColumnsPostProcessor, uniform Oracle LOB behavior.</p> </div> <div class="paragraph"> <p>Additionally, this release includes a variety of bug fixes and several breaking changes.</p> </div> <div class="paragraph"> <p>Let&#8217;s take a closer look at all these changes and improvements included in Debezium 2.5.0.CR1; as always, you can find the complete list of changes for this release in the <a href="/releases/2.5/release-notes">release notes</a>. Please remember to take special note to any breaking changes that could affect your upgrade path.</p> </div> <div class="paragraph"> <p></p> </div> <div class="sect1"> <h2 id="breaking_changes">Breaking changes</h2> <div class="sectionbody"> <div class="paragraph"> <p>While we strive to avoid breaking changes, sometimes those changes are inevitable to evolve the right direction. This release includes several breaking changes.</p> </div> <div class="sect2"> <h3 id="schema_name_for_cloud_event_headers">Schema name for Cloud Event headers</h3> <div class="paragraph"> <p>The schema name prefix and letter casing for Cloud Event headers was not consistent with payload name. The schema name was aligned so both headers and payload share th same namespace and follow the same rules for letter casing (<a href="https://issues.redhat.com/browse/DBZ-7216">DBZ-7216</a>).</p> </div> </div> <div class="sect2"> <h3 id="mysql_bit_default_length">MySQL <code>BIT</code> default length</h3> <div class="paragraph"> <p>MySQL <code>BIT</code> datatype did not have an implicit length if any was not set. This is incorrect as the default length if none is provided is <code>1</code> (<a href="https://issues.redhat.com/browse/DBZ-7230">DBZ-7230</a>).</p> </div> </div> </div> </div> <div class="sect1"> <h2 id="new_features_and_improvements">New features and improvements</h2> <div class="sectionbody"> <div class="paragraph"> <p>Debezium 2.5 also introduces more improvements and features, lets take a look at each individually.</p> </div> <div class="sect2"> <h3 id="re_select_columns">Re-select columns</h3> <div class="paragraph"> <p>In some cases, because of the way that certain source databases function, when a Debezium connector emits a change event, the event might exclude values for specific column types. For example, values for <code>TOAST</code> columns in PostgreSQL, <code>LOB</code> columns in Oracle, or <code>Extended String</code> columns in Oracle Exadata, might all be excluded.</p> </div> <div class="paragraph"> <p>Debezium 2.5 introduces the <code>ReselectColumnsPostProcessor</code> providing a way to re-select one or more columns from a database table and fetch the current state. You can configure the post processor to re-select the following column types:</p> </div> <div class="ulist"> <ul> <li> <p>null columns.</p> </li> <li> <p>columns that contain the <code>unavailable.value.placeholder</code> sentinel value.</p> </li> </ul> </div> <div class="paragraph"> <p>Configuring a PostProcessor is similar to configuring a CustomConverter or Transformation, except that it works on the mutable payload&#8217;s Struct rather than the SourceRecord.</p> </div> </div> <div class="sect2"> <h3 id="debezium_server_streamnamemapper_for_apache_kafka_sink">Debezium Server - StreamNameMapper for Apache Kafka sink</h3> <div class="paragraph"> <p>The Kafka sink behaviour can now be modified by a custom logic providing alternative implementations for specific functionalities. When the alternative implementations are not available then the default ones are used.</p> </div> <div class="paragraph"> <p>For more details, please see the <a href="https://debezium.io/documentation/reference/2.5/operations/debezium-server.html#_injection_points_9">Apache Kafka Injection points</a>.</p> </div> </div> <div class="sect2"> <h3 id="insertdelete_semantics_for_incremental_snapshot_watermarking">INSERT/DELETE semantics for incremental snapshot watermarking</h3> <div class="paragraph"> <p>The property <code>incremental.snapshot.watermarking.strategy</code> has been introduced to let users choose the watermarking strategy to use during an incremental snapshot.</p> </div> <div class="paragraph"> <p>The <code>insert_insert</code> (old behavior) approach lets Debezium creating two entries in the signaling data collection for each chunk during the snapshot to signal the opening of the snapshot window and another to mark its closure.</p> </div> <div class="paragraph"> <p>On the other hand, with the <code>insert_delete</code> option, a single entry is written in the signaling data collection for each chunk at the beginning of the window. After completion, this entry is removed, and no corresponding entry is added to signify the closure of the snapshot window. This method aids in more efficient management of the signaling data collection.</p> </div> <div class="paragraph"> <p>For more details, please see the <code>Connector properties</code> section of the connector of your interest.</p> </div> </div> <div class="sect2"> <h3 id="debezium_server_aws_sqs_sink">Debezium Server - AWS SQS sink</h3> <div class="paragraph"> <p>Amazon Simple Queue Service (Amazon SQS) is a distributed message queuing service. It supports programmatic sending of messages via web service applications as a way to communicate over the Internet. SQS is intended to provide a highly scalable hosted message queue that resolves issues arising from the common producer–consumer problem or connectivity between producer and consumer.</p> </div> <div class="paragraph"> <p>Debezium 2.5 offers the possibility to send events to Amazon SQS.</p> </div> </div> <div class="sect2"> <h3 id="oracle_lob_behavior">Oracle LOB behavior</h3> <div class="paragraph"> <p>Debezium 2.5 aligns LOB behavior in snapshot and streaming. When <code>lob.enabled</code> is set to <code>false</code>, the unavailable value placeholder will be explicitly included during snapshot to match the behavior of streaming.</p> </div> </div> </div> </div> <div class="sect1"> <h2 id="other_fixes">Other fixes</h2> <div class="sectionbody"> <div class="paragraph"> <p>In addition, there were quite a number of stability and bug fixes that made it into this release. These include the following:</p> </div> <div class="ulist"> <ul> <li> <p>Oracle abandoned transaction implementation bug causes OoM <a href="https://issues.redhat.com/browse/DBZ-7236">DBZ-7236</a></p> </li> <li> <p>Add Grammar Oracle Truncate Cluster <a href="https://issues.redhat.com/browse/DBZ-7242">DBZ-7242</a></p> </li> <li> <p>Length value is not removed when changing a column&#8217;s type <a href="https://issues.redhat.com/browse/DBZ-7251">DBZ-7251</a></p> </li> <li> <p>MongoDB table/collection snapshot notification contain incorrect offsets <a href="https://issues.redhat.com/browse/DBZ-7252">DBZ-7252</a></p> </li> <li> <p>Broken support for multi-namespace watching <a href="https://issues.redhat.com/browse/DBZ-7254">DBZ-7254</a></p> </li> <li> <p>Add tracing logs to track execution time for Debezium JDBC connector <a href="https://issues.redhat.com/browse/DBZ-7217">DBZ-7217</a></p> </li> <li> <p>Validate &amp; clarify multiple archive log destination requirements for Oracle <a href="https://issues.redhat.com/browse/DBZ-7218">DBZ-7218</a></p> </li> <li> <p>Upgrade logback to 1.2.13 <a href="https://issues.redhat.com/browse/DBZ-7232">DBZ-7232</a></p> </li> </ul> </div> <div class="paragraph"> <p>Altogether, <a href="https://issues.redhat.com/issues/?jql=project%20%3D%20DBZ%20AND%20fixVersion%20%3D%202.5.0.CR1%20ORDER%20BY%20component%20ASC">16 issues</a> were fixed for this release. A big thank you to all the contributors from the community who worked on this release: <a href="https://github.com/roldanbob">Bob Roldan</a>, <a href="https://github.com/Naros">Chris Cranford</a>, <a href="https://github.com/gunnarmorling">Gunnar Morling</a>, <a href="https://github.com/harveyyue">Harvey Yue</a>, <a href="https://github.com/ilyasahsan123">Ilyas Ahsan</a>, <a href="https://github.com/indraraj">Indra Shukla</a>, <a href="https://github.com/jcechace">Jakub Cechacek</a>, <a href="https://github.com/Jiabao-Sun">Jiabao Sun</a>, <a href="https://github.com/sherpa003">Jiri Kulhanek</a>, <a href="https://github.com/jpechane">Jiri Pechanec</a>, <a href="https://github.com/JordanP">Jordan Pittier</a>, <a href="https://github.com/mfvitale">Mario Fiore Vitale</a>, <a href="https://github.com/nilshartmann">Nils Hartmann</a>, <a href="https://github.com/rkudryashov">Roman Kudryashov</a>, <a href="https://github.com/slknijnenburg">Sebastiaan Knijnenburg</a>, <a href="https://github.com/PlugaruT">Tudor Plugaru</a>, <a href="https://github.com/koneru9999">V K</a>, and <a href="https://github.com/GOODBOY008">Zhongqiang Gong</a>!</p> </div> </div> </div> <div class="sect1"> <h2 id="whats_next">What&#8217;s next?</h2> <div class="sectionbody"> <div class="paragraph"> <p>We have just over a week before the team takes a break for the holidays, and so we are preparing for Debezium 2.5 final release. We intend to release it the week before the holiday break.</p> </div> <div class="paragraph"> <p>The team has also finalized the roadmap for 2024, here&#8217;s a sneak peek at some highlights (and remember, this is just the tip of the iceberg!):</p> </div> <div class="ulist"> <ul> <li> <p>Asynchronous-based processing in Debezium Engine</p> </li> <li> <p>Official MariaDB connector</p> </li> <li> <p>User-friendly offset manipulation (i.e, start at a specific position in the transaction logs)</p> </li> <li> <p>Sink connector for MongoDB</p> </li> </ul> </div> <div class="paragraph"> <p>For more details, please check out our <a href="https://debezium.io/roadmap">road map</a> for all upcoming details around Debezium 2.6 and beyond.</p> </div> <div class="paragraph"> <p>As always, please be sure to get in touch with us on the <a href="https://groups.google.com/g/debezium">mailing list</a> or <a href="https://debezium.zulipchat.com/login/#narrow/stream/302529-users">Zulip chat</a> if you have questions or feedback. Until next time, stay warm out there!</p> </div> </div> </div>]]></content><author><name>Fiore Mario Vitale</name></author><category term="releases"/><category term="mongodb"/><category term="mysql"/><category term="mariadb"/><category term="postgres"/><category term="sqlserver"/><category term="cassandra"/><category term="oracle"/><category term="db2"/><category term="vitess"/><category term="outbox"/><category term="spanner"/><category term="informix"/><summary type="html"><![CDATA[As we are just one step away from the Debezium 2.5 final release, I am pleased to announce that Debezium 2.5.0.CR1 is now available. This release includes a number of improvements like AWS SQS sink for Debezium Server, INSERT/DELETE semantics for incremental snapshot watermarking, ReselectColumnsPostProcessor, uniform Oracle LOB behavior. Additionally, this release includes a variety of bug fixes and several breaking changes. Let&#8217;s take a closer look at all these changes and improvements included in Debezium 2.5.0.CR1; as always, you can find the complete list of changes for this release in the release notes. Please remember to take special note to any breaking changes that could affect your upgrade path.]]></summary></entry></feed>